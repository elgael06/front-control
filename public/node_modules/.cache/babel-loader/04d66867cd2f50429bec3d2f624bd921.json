{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2009 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*namespace com.google.zxing {*/\n\nrequire(\"./InvertedLuminanceSource\"); // required because of circular dependencies between LuminanceSource and InvertedLuminanceSource\n\n\nvar InvertedLuminanceSource_1 = require(\"./InvertedLuminanceSource\");\n\nvar LuminanceSource_1 = require(\"./LuminanceSource\");\n\nvar System_1 = require(\"./util/System\");\n\nvar IllegalArgumentException_1 = require(\"./IllegalArgumentException\");\n/**\n * This class is used to help decode images from files which arrive as RGB data from\n * an ARGB pixel array. It does not support rotation.\n *\n * @author dswitkin@google.com (Daniel Switkin)\n * @author Betaminos\n */\n\n\nvar RGBLuminanceSource =\n/** @class */\nfunction (_super) {\n  __extends(RGBLuminanceSource, _super);\n\n  function RGBLuminanceSource(luminances, width\n  /*int*/\n  , height\n  /*int*/\n  , dataWidth\n  /*int*/\n  , dataHeight\n  /*int*/\n  , left\n  /*int*/\n  , top\n  /*int*/\n  ) {\n    var _this = _super.call(this, width, height) || this;\n\n    _this.dataWidth = dataWidth;\n    _this.dataHeight = dataHeight;\n    _this.left = left;\n    _this.top = top;\n\n    if (luminances.BYTES_PER_ELEMENT === 4) {\n      // Int32Array\n      var size = width * height;\n      var luminancesUint8Array = new Uint8ClampedArray(size);\n\n      for (var offset = 0; offset < size; offset++) {\n        var pixel = luminances[offset];\n        var r = pixel >> 16 & 0xff; // red\n\n        var g2 = pixel >> 7 & 0x1fe; // 2 * green\n\n        var b = pixel & 0xff; // blue\n        // Calculate green-favouring average cheaply\n\n        luminancesUint8Array[offset] =\n        /*(byte) */\n        (r + g2 + b) / 4 & 0xFF;\n      }\n\n      _this.luminances = luminancesUint8Array;\n    } else {\n      _this.luminances = luminances;\n    }\n\n    if (undefined === dataWidth) {\n      _this.dataWidth = width;\n    }\n\n    if (undefined === dataHeight) {\n      _this.dataHeight = height;\n    }\n\n    if (undefined === left) {\n      _this.left = 0;\n    }\n\n    if (undefined === top) {\n      _this.top = 0;\n    }\n\n    if (_this.left + width > _this.dataWidth || _this.top + height > _this.dataHeight) {\n      throw new IllegalArgumentException_1.default('Crop rectangle does not fit within image data.');\n    }\n\n    return _this;\n  }\n  /*@Override*/\n\n\n  RGBLuminanceSource.prototype.getRow = function (y\n  /*int*/\n  , row) {\n    if (y < 0 || y >= this.getHeight()) {\n      throw new IllegalArgumentException_1.default('Requested row is outside the image: ' + y);\n    }\n\n    var width = this.getWidth();\n\n    if (row === null || row === undefined || row.length < width) {\n      row = new Uint8ClampedArray(width);\n    }\n\n    var offset = (y + this.top) * this.dataWidth + this.left;\n    System_1.default.arraycopy(this.luminances, offset, row, 0, width);\n    return row;\n  };\n  /*@Override*/\n\n\n  RGBLuminanceSource.prototype.getMatrix = function () {\n    var width = this.getWidth();\n    var height = this.getHeight(); // If the caller asks for the entire underlying image, save the copy and give them the\n    // original data. The docs specifically warn that result.length must be ignored.\n\n    if (width === this.dataWidth && height === this.dataHeight) {\n      return this.luminances;\n    }\n\n    var area = width * height;\n    var matrix = new Uint8ClampedArray(area);\n    var inputOffset = this.top * this.dataWidth + this.left; // If the width matches the full width of the underlying data, perform a single copy.\n\n    if (width === this.dataWidth) {\n      System_1.default.arraycopy(this.luminances, inputOffset, matrix, 0, area);\n      return matrix;\n    } // Otherwise copy one cropped row at a time.\n\n\n    for (var y = 0; y < height; y++) {\n      var outputOffset = y * width;\n      System_1.default.arraycopy(this.luminances, inputOffset, matrix, outputOffset, width);\n      inputOffset += this.dataWidth;\n    }\n\n    return matrix;\n  };\n  /*@Override*/\n\n\n  RGBLuminanceSource.prototype.isCropSupported = function () {\n    return true;\n  };\n  /*@Override*/\n\n\n  RGBLuminanceSource.prototype.crop = function (left\n  /*int*/\n  , top\n  /*int*/\n  , width\n  /*int*/\n  , height\n  /*int*/\n  ) {\n    return new RGBLuminanceSource(this.luminances, width, height, this.dataWidth, this.dataHeight, this.left + left, this.top + top);\n  };\n\n  RGBLuminanceSource.prototype.invert = function () {\n    return new InvertedLuminanceSource_1.default(this);\n  };\n\n  return RGBLuminanceSource;\n}(LuminanceSource_1.default);\n\nexports.default = RGBLuminanceSource;","map":{"version":3,"sources":["../../src/core/RGBLuminanceSource.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/*\n * Copyright 2009 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/*namespace com.google.zxing {*/\nrequire(\"./InvertedLuminanceSource\"); // required because of circular dependencies between LuminanceSource and InvertedLuminanceSource\nvar InvertedLuminanceSource_1 = require(\"./InvertedLuminanceSource\");\nvar LuminanceSource_1 = require(\"./LuminanceSource\");\nvar System_1 = require(\"./util/System\");\nvar IllegalArgumentException_1 = require(\"./IllegalArgumentException\");\n/**\n * This class is used to help decode images from files which arrive as RGB data from\n * an ARGB pixel array. It does not support rotation.\n *\n * @author dswitkin@google.com (Daniel Switkin)\n * @author Betaminos\n */\nvar RGBLuminanceSource = /** @class */ (function (_super) {\n    __extends(RGBLuminanceSource, _super);\n    function RGBLuminanceSource(luminances, width /*int*/, height /*int*/, dataWidth /*int*/, dataHeight /*int*/, left /*int*/, top /*int*/) {\n        var _this = _super.call(this, width, height) || this;\n        _this.dataWidth = dataWidth;\n        _this.dataHeight = dataHeight;\n        _this.left = left;\n        _this.top = top;\n        if (luminances.BYTES_PER_ELEMENT === 4) { // Int32Array\n            var size = width * height;\n            var luminancesUint8Array = new Uint8ClampedArray(size);\n            for (var offset = 0; offset < size; offset++) {\n                var pixel = luminances[offset];\n                var r = (pixel >> 16) & 0xff; // red\n                var g2 = (pixel >> 7) & 0x1fe; // 2 * green\n                var b = pixel & 0xff; // blue\n                // Calculate green-favouring average cheaply\n                luminancesUint8Array[offset] = /*(byte) */ ((r + g2 + b) / 4) & 0xFF;\n            }\n            _this.luminances = luminancesUint8Array;\n        }\n        else {\n            _this.luminances = luminances;\n        }\n        if (undefined === dataWidth) {\n            _this.dataWidth = width;\n        }\n        if (undefined === dataHeight) {\n            _this.dataHeight = height;\n        }\n        if (undefined === left) {\n            _this.left = 0;\n        }\n        if (undefined === top) {\n            _this.top = 0;\n        }\n        if (_this.left + width > _this.dataWidth || _this.top + height > _this.dataHeight) {\n            throw new IllegalArgumentException_1.default('Crop rectangle does not fit within image data.');\n        }\n        return _this;\n    }\n    /*@Override*/\n    RGBLuminanceSource.prototype.getRow = function (y /*int*/, row) {\n        if (y < 0 || y >= this.getHeight()) {\n            throw new IllegalArgumentException_1.default('Requested row is outside the image: ' + y);\n        }\n        var width = this.getWidth();\n        if (row === null || row === undefined || row.length < width) {\n            row = new Uint8ClampedArray(width);\n        }\n        var offset = (y + this.top) * this.dataWidth + this.left;\n        System_1.default.arraycopy(this.luminances, offset, row, 0, width);\n        return row;\n    };\n    /*@Override*/\n    RGBLuminanceSource.prototype.getMatrix = function () {\n        var width = this.getWidth();\n        var height = this.getHeight();\n        // If the caller asks for the entire underlying image, save the copy and give them the\n        // original data. The docs specifically warn that result.length must be ignored.\n        if (width === this.dataWidth && height === this.dataHeight) {\n            return this.luminances;\n        }\n        var area = width * height;\n        var matrix = new Uint8ClampedArray(area);\n        var inputOffset = this.top * this.dataWidth + this.left;\n        // If the width matches the full width of the underlying data, perform a single copy.\n        if (width === this.dataWidth) {\n            System_1.default.arraycopy(this.luminances, inputOffset, matrix, 0, area);\n            return matrix;\n        }\n        // Otherwise copy one cropped row at a time.\n        for (var y = 0; y < height; y++) {\n            var outputOffset = y * width;\n            System_1.default.arraycopy(this.luminances, inputOffset, matrix, outputOffset, width);\n            inputOffset += this.dataWidth;\n        }\n        return matrix;\n    };\n    /*@Override*/\n    RGBLuminanceSource.prototype.isCropSupported = function () {\n        return true;\n    };\n    /*@Override*/\n    RGBLuminanceSource.prototype.crop = function (left /*int*/, top /*int*/, width /*int*/, height /*int*/) {\n        return new RGBLuminanceSource(this.luminances, width, height, this.dataWidth, this.dataHeight, this.left + left, this.top + top);\n    };\n    RGBLuminanceSource.prototype.invert = function () {\n        return new InvertedLuminanceSource_1.default(this);\n    };\n    return RGBLuminanceSource;\n}(LuminanceSource_1.default));\nexports.default = RGBLuminanceSource;\n//# sourceMappingURL=RGBLuminanceSource.js.map"]},"metadata":{},"sourceType":"script"}