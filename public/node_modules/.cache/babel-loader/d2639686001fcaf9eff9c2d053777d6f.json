{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __values = this && this.__values || function (o) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator],\n      i = 0;\n  if (m) return m.call(o);\n  return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar BarcodeFormat_1 = require(\"../../../BarcodeFormat\");\n\nvar NotFoundException_1 = require(\"../../../NotFoundException\");\n\nvar Result_1 = require(\"../../../Result\");\n\nvar MathUtils_1 = require(\"../../../common/detector/MathUtils\");\n\nvar AbstractRSSReader_1 = require(\"../../rss/AbstractRSSReader\");\n\nvar DataCharacter_1 = require(\"../../rss/DataCharacter\");\n\nvar FinderPattern_1 = require(\"../../rss/FinderPattern\");\n\nvar RSSUtils_1 = require(\"../../rss/RSSUtils\");\n\nvar AbstractExpandedDecoderComplement_1 = require(\"./decoders/AbstractExpandedDecoderComplement\");\n\nvar ExpandedPair_1 = require(\"./ExpandedPair\");\n\nvar ExpandedRow_1 = require(\"./ExpandedRow\");\n\nvar BitArrayBuilder_1 = require(\"./BitArrayBuilder\");\n\nvar System_1 = require(\"../../../util/System\"); // import java.util.ArrayList;\n// import java.util.Iterator;\n// import java.util.List;\n// import java.util.Map;\n// import java.util.Collections;\n\n\nvar RSSExpandedReader =\n/** @class */\nfunction (_super) {\n  __extends(RSSExpandedReader, _super);\n\n  function RSSExpandedReader() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.pairs = new Array(RSSExpandedReader.MAX_PAIRS);\n    _this.rows = new Array();\n    _this.startEnd = [2];\n    return _this;\n  }\n\n  RSSExpandedReader.prototype.decodeRow = function (rowNumber, row, hints) {\n    // Rows can start with even pattern in case in prev rows there where odd number of patters.\n    // So lets try twice\n    //this.pairs.clear();\n    this.pairs.length = 0;\n    this.startFromEven = false;\n\n    try {\n      return RSSExpandedReader.constructResult(this.decodeRow2pairs(rowNumber, row));\n    } catch (e) {\n      // OK\n      console.log(e);\n    }\n\n    this.pairs.length = 0;\n    this.startFromEven = true;\n    return RSSExpandedReader.constructResult(this.decodeRow2pairs(rowNumber, row));\n  };\n\n  RSSExpandedReader.prototype.reset = function () {\n    this.pairs.length = 0;\n    this.rows.length = 0;\n  }; // Not private for testing\n\n\n  RSSExpandedReader.prototype.decodeRow2pairs = function (rowNumber, row) {\n    var done = false;\n\n    while (!done) {\n      try {\n        this.pairs.push(this.retrieveNextPair(row, this.pairs, rowNumber));\n      } catch (NotFoundException) {\n        if (!this.pairs.length) {\n          throw new NotFoundException();\n        } // exit this loop when retrieveNextPair() fails and throws\n\n\n        done = true;\n      }\n    } // TODO: verify sequence of finder patterns as in checkPairSequence()\n\n\n    if (this.checkChecksum()) {\n      return this.pairs;\n    }\n\n    var tryStackedDecode;\n\n    if (this.rows.length) {\n      tryStackedDecode = true;\n    } else {\n      tryStackedDecode = false;\n    } //let tryStackedDecode = !this.rows.isEmpty();\n\n\n    this.storeRow(rowNumber, false); // TODO: deal with reversed rows\n\n    if (tryStackedDecode) {\n      // When the image is 180-rotated, then rows are sorted in wrong direction.\n      // Try twice with both the directions.\n      var ps = this.checkRowsBoolean(false);\n\n      if (ps != null) {\n        return ps;\n      }\n\n      ps = this.checkRowsBoolean(true);\n\n      if (ps != null) {\n        return ps;\n      }\n    }\n\n    throw new NotFoundException_1.default();\n  }; //Need to Verify\n\n\n  RSSExpandedReader.prototype.checkRowsBoolean = function (reverse) {\n    // Limit number of rows we are checking\n    // We use recursive algorithm with pure complexity and don't want it to take forever\n    // Stacked barcode can have up to 11 rows, so 25 seems reasonable enough\n    if (this.rows.length > 25) {\n      this.rows.length = 0; // We will never have a chance to get result, so clear it\n\n      return null;\n    }\n\n    this.pairs.length = 0;\n\n    if (reverse) {\n      this.rows = this.rows.reverse(); //Collections.reverse(this.rows);\n    }\n\n    var ps = null;\n\n    try {\n      ps = this.checkRows(new Array(), 0);\n    } catch (e) {\n      // OK\n      console.log(e);\n    }\n\n    if (reverse) {\n      this.rows = this.rows.reverse(); //Collections.reverse(this.rows);\n    }\n\n    return ps;\n  }; // Try to construct a valid rows sequence\n  // Recursion is used to implement backtracking\n\n\n  RSSExpandedReader.prototype.checkRows = function (collectedRows, currentRow) {\n    var e_1, _a;\n\n    for (var i = currentRow; i < this.rows.length; i++) {\n      var row = this.rows[i];\n      this.pairs.length = 0;\n\n      try {\n        for (var collectedRows_1 = __values(collectedRows), collectedRows_1_1 = collectedRows_1.next(); !collectedRows_1_1.done; collectedRows_1_1 = collectedRows_1.next()) {\n          var collectedRow = collectedRows_1_1.value;\n          this.pairs.push(collectedRow.getPairs());\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (collectedRows_1_1 && !collectedRows_1_1.done && (_a = collectedRows_1.return)) _a.call(collectedRows_1);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n\n      this.pairs.push(row.getPairs());\n\n      if (!RSSExpandedReader.isValidSequence(this.pairs)) {\n        continue;\n      }\n\n      if (this.checkChecksum()) {\n        return this.pairs;\n      }\n\n      var rs = new Array(collectedRows);\n      rs.push(row);\n\n      try {\n        // Recursion: try to add more rows\n        return this.checkRows(rs, i + 1);\n      } catch (e) {\n        // We failed, try the next candidate\n        console.log(e);\n      }\n    }\n\n    throw new NotFoundException_1.default();\n  }; // Whether the pairs form a valid find pattern sequence,\n  // either complete or a prefix\n\n\n  RSSExpandedReader.isValidSequence = function (pairs) {\n    var e_2, _a;\n\n    try {\n      for (var _b = __values(RSSExpandedReader.FINDER_PATTERN_SEQUENCES), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var sequence = _c.value;\n\n        if (pairs.length > sequence.length) {\n          continue;\n        }\n\n        var stop_1 = true;\n\n        for (var j = 0; j < pairs.length; j++) {\n          if (pairs[j].getFinderPattern().getValue() != sequence[j]) {\n            stop_1 = false;\n            break;\n          }\n        }\n\n        if (stop_1) {\n          return true;\n        }\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n\n    return false;\n  };\n\n  RSSExpandedReader.prototype.storeRow = function (rowNumber, wasReversed) {\n    // Discard if duplicate above or below; otherwise insert in order by row number.\n    var insertPos = 0;\n    var prevIsSame = false;\n    var nextIsSame = false;\n\n    while (insertPos < this.rows.length) {\n      var erow = this.rows[insertPos];\n\n      if (erow.getRowNumber() > rowNumber) {\n        nextIsSame = erow.isEquivalent(this.pairs);\n        break;\n      }\n\n      prevIsSame = erow.isEquivalent(this.pairs);\n      insertPos++;\n    }\n\n    if (nextIsSame || prevIsSame) {\n      return;\n    } // When the row was partially decoded (e.g. 2 pairs found instead of 3),\n    // it will prevent us from detecting the barcode.\n    // Try to merge partial rows\n    // Check whether the row is part of an allready detected row\n\n\n    if (RSSExpandedReader.isPartialRow(this.pairs, this.rows)) {\n      return;\n    }\n\n    this.rows.push(insertPos, new ExpandedRow_1.default(this.pairs, rowNumber, wasReversed));\n    this.removePartialRows(this.pairs, this.rows);\n  }; // Remove all the rows that contains only specified pairs\n\n\n  RSSExpandedReader.prototype.removePartialRows = function (pairs, rows) {\n    var e_3, _a, e_4, _b, e_5, _c;\n\n    try {\n      // for (Iterator<ExpandedRow> iterator = rows.iterator(); iterator.hasNext();) {\n      //   ExpandedRow r = iterator.next();\n      //   if (r.getPairs().size() == pairs.size()) {\n      //     continue;\n      //   }\n      //   boolean allFound = true;\n      //   for (ExpandedPair p : r.getPairs()) {\n      //     boolean found = false;\n      //     for (ExpandedPair pp : pairs) {\n      //       if (p.equals(pp)) {\n      //         found = true;\n      //         break;\n      //       }\n      //     }\n      //     if (!found) {\n      //       allFound = false;\n      //       break;\n      //     }\n      //   }\n      //   if (allFound) {\n      //     // 'pairs' contains all the pairs from the row 'r'\n      //     iterator.remove();\n      //   }\n      // }\n      for (var rows_1 = __values(rows), rows_1_1 = rows_1.next(); !rows_1_1.done; rows_1_1 = rows_1.next()) {\n        var row = rows_1_1.value;\n\n        if (row.getPairs().length === pairs.length) {\n          continue;\n        }\n\n        var allFound = true;\n\n        try {\n          for (var _d = __values(row.getPairs()), _e = _d.next(); !_e.done; _e = _d.next()) {\n            var p = _e.value;\n            var found = false;\n\n            try {\n              for (var pairs_1 = __values(pairs), pairs_1_1 = pairs_1.next(); !pairs_1_1.done; pairs_1_1 = pairs_1.next()) {\n                var pp = pairs_1_1.value;\n\n                if (ExpandedPair_1.default.equals(p, pp)) {\n                  found = true;\n                  break;\n                }\n              }\n            } catch (e_5_1) {\n              e_5 = {\n                error: e_5_1\n              };\n            } finally {\n              try {\n                if (pairs_1_1 && !pairs_1_1.done && (_c = pairs_1.return)) _c.call(pairs_1);\n              } finally {\n                if (e_5) throw e_5.error;\n              }\n            }\n\n            if (!found) {\n              allFound = false;\n            }\n          }\n        } catch (e_4_1) {\n          e_4 = {\n            error: e_4_1\n          };\n        } finally {\n          try {\n            if (_e && !_e.done && (_b = _d.return)) _b.call(_d);\n          } finally {\n            if (e_4) throw e_4.error;\n          }\n        }\n      }\n    } catch (e_3_1) {\n      e_3 = {\n        error: e_3_1\n      };\n    } finally {\n      try {\n        if (rows_1_1 && !rows_1_1.done && (_a = rows_1.return)) _a.call(rows_1);\n      } finally {\n        if (e_3) throw e_3.error;\n      }\n    }\n  }; // Returns true when one of the rows already contains all the pairs\n\n\n  RSSExpandedReader.isPartialRow = function (pairs, rows) {\n    var e_6, _a, e_7, _b, e_8, _c;\n\n    try {\n      for (var rows_2 = __values(rows), rows_2_1 = rows_2.next(); !rows_2_1.done; rows_2_1 = rows_2.next()) {\n        var r = rows_2_1.value;\n        var allFound = true;\n\n        try {\n          for (var pairs_2 = __values(pairs), pairs_2_1 = pairs_2.next(); !pairs_2_1.done; pairs_2_1 = pairs_2.next()) {\n            var p = pairs_2_1.value;\n            var found = false;\n\n            try {\n              for (var _d = __values(r.getPairs()), _e = _d.next(); !_e.done; _e = _d.next()) {\n                var pp = _e.value;\n\n                if (p.equals(pp)) {\n                  found = true;\n                  break;\n                }\n              }\n            } catch (e_8_1) {\n              e_8 = {\n                error: e_8_1\n              };\n            } finally {\n              try {\n                if (_e && !_e.done && (_c = _d.return)) _c.call(_d);\n              } finally {\n                if (e_8) throw e_8.error;\n              }\n            }\n\n            if (!found) {\n              allFound = false;\n              break;\n            }\n          }\n        } catch (e_7_1) {\n          e_7 = {\n            error: e_7_1\n          };\n        } finally {\n          try {\n            if (pairs_2_1 && !pairs_2_1.done && (_b = pairs_2.return)) _b.call(pairs_2);\n          } finally {\n            if (e_7) throw e_7.error;\n          }\n        }\n\n        if (allFound) {\n          // the row 'r' contain all the pairs from 'pairs'\n          return true;\n        }\n      }\n    } catch (e_6_1) {\n      e_6 = {\n        error: e_6_1\n      };\n    } finally {\n      try {\n        if (rows_2_1 && !rows_2_1.done && (_a = rows_2.return)) _a.call(rows_2);\n      } finally {\n        if (e_6) throw e_6.error;\n      }\n    }\n\n    return false;\n  }; // Only used for unit testing\n\n\n  RSSExpandedReader.prototype.getRows = function () {\n    return this.rows;\n  }; // Not private for unit testing\n\n\n  RSSExpandedReader.constructResult = function (pairs) {\n    var binary = BitArrayBuilder_1.default.buildBitArray(pairs);\n    var decoder = AbstractExpandedDecoderComplement_1.createDecoder(binary);\n    var resultingString = decoder.parseInformation();\n    var firstPoints = pairs[0].getFinderPattern().getResultPoints();\n    var lastPoints = pairs[pairs.length - 1].getFinderPattern().getResultPoints();\n    var points = [firstPoints[0], firstPoints[1], lastPoints[0], lastPoints[1]];\n    return new Result_1.default(resultingString, null, null, points, BarcodeFormat_1.default.RSS_EXPANDED, null);\n  };\n\n  RSSExpandedReader.prototype.checkChecksum = function () {\n    var firstPair = this.pairs.get(0);\n    var checkCharacter = firstPair.getLeftChar();\n    var firstCharacter = firstPair.getRightChar();\n\n    if (firstCharacter == null) {\n      return false;\n    }\n\n    var checksum = firstCharacter.getChecksumPortion();\n    var s = 2;\n\n    for (var i = 1; i < this.pairs.size(); ++i) {\n      var currentPair = this.pairs.get(i);\n      checksum += currentPair.getLeftChar().getChecksumPortion();\n      s++;\n      var currentRightChar = currentPair.getRightChar();\n\n      if (currentRightChar != null) {\n        checksum += currentRightChar.getChecksumPortion();\n        s++;\n      }\n    }\n\n    checksum %= 211;\n    var checkCharacterValue = 211 * (s - 4) + checksum;\n    return checkCharacterValue == checkCharacter.getValue();\n  };\n\n  RSSExpandedReader.getNextSecondBar = function (row, initialPos) {\n    var currentPos;\n\n    if (row.get(initialPos)) {\n      currentPos = row.getNextUnset(initialPos);\n      currentPos = row.getNextSet(currentPos);\n    } else {\n      currentPos = row.getNextSet(initialPos);\n      currentPos = row.getNextUnset(currentPos);\n    }\n\n    return currentPos;\n  }; // not private for testing\n\n\n  RSSExpandedReader.prototype.retrieveNextPair = function (row, previousPairs, rowNumber) {\n    var isOddPattern = previousPairs.length % 2 == 0;\n\n    if (this.startFromEven) {\n      isOddPattern = !isOddPattern;\n    }\n\n    var pattern;\n    var keepFinding = true;\n    var forcedOffset = -1;\n\n    do {\n      this.findNextPair(row, previousPairs, forcedOffset);\n      pattern = this.parseFoundFinderPattern(row, rowNumber, isOddPattern);\n\n      if (pattern == null) {\n        forcedOffset = RSSExpandedReader.getNextSecondBar(row, this.startEnd[0]);\n      } else {\n        keepFinding = false;\n      }\n    } while (keepFinding); // When stacked symbol is split over multiple rows, there's no way to guess if this pair can be last or not.\n    // boolean mayBeLast = checkPairSequence(previousPairs, pattern);\n\n\n    var leftChar = this.decodeDataCharacter(row, pattern, isOddPattern, true);\n\n    if (!this.isEmptyPair(previousPairs) && previousPairs[previousPairs.length - 1].mustBeLast()) {\n      throw new NotFoundException_1.default();\n    }\n\n    var rightChar;\n\n    try {\n      rightChar = this.decodeDataCharacter(row, pattern, isOddPattern, false);\n    } catch (e) {\n      rightChar = null;\n      console.log(e);\n    }\n\n    return new ExpandedPair_1.default(leftChar, rightChar, pattern, true);\n  };\n\n  RSSExpandedReader.prototype.isEmptyPair = function (pairs) {\n    if (pairs.length === 0) {\n      return true;\n    }\n\n    return false;\n  };\n\n  RSSExpandedReader.prototype.findNextPair = function (row, previousPairs, forcedOffset) {\n    var counters = this.getDecodeFinderCounters();\n    counters[0] = 0;\n    counters[1] = 0;\n    counters[2] = 0;\n    counters[3] = 0;\n    var width = row.getSize();\n    var rowOffset;\n\n    if (forcedOffset >= 0) {\n      rowOffset = forcedOffset;\n    } else if (this.isEmptyPair(previousPairs)) {\n      rowOffset = 0;\n    } else {\n      var lastPair = previousPairs[previousPairs.length - 1];\n      rowOffset = lastPair.getFinderPattern().getStartEnd()[1];\n    }\n\n    var searchingEvenPair = previousPairs.length % 2 != 0;\n\n    if (this.startFromEven) {\n      searchingEvenPair = !searchingEvenPair;\n    }\n\n    var isWhite = false;\n\n    while (rowOffset < width) {\n      isWhite = !row.get(rowOffset);\n\n      if (!isWhite) {\n        break;\n      }\n\n      rowOffset++;\n    }\n\n    var counterPosition = 0;\n    var patternStart = rowOffset;\n\n    for (var x = rowOffset; x < width; x++) {\n      if (row.get(x) != isWhite) {\n        counters[counterPosition]++;\n      } else {\n        if (counterPosition == 3) {\n          if (searchingEvenPair) {\n            RSSExpandedReader.reverseCounters(counters);\n          }\n\n          if (RSSExpandedReader.isFinderPattern(counters)) {\n            this.startEnd[0] = patternStart;\n            this.startEnd[1] = x;\n            return;\n          }\n\n          if (searchingEvenPair) {\n            RSSExpandedReader.reverseCounters(counters);\n          }\n\n          patternStart += counters[0] + counters[1];\n          counters[0] = counters[2];\n          counters[1] = counters[3];\n          counters[2] = 0;\n          counters[3] = 0;\n          counterPosition--;\n        } else {\n          counterPosition++;\n        }\n\n        counters[counterPosition] = 1;\n        isWhite = !isWhite;\n      }\n    }\n\n    throw new NotFoundException_1.default();\n  };\n\n  RSSExpandedReader.reverseCounters = function (counters) {\n    var length = counters.length;\n\n    for (var i = 0; i < length / 2; ++i) {\n      var tmp = counters[i];\n      counters[i] = counters[length - i - 1];\n      counters[length - i - 1] = tmp;\n    }\n  };\n\n  RSSExpandedReader.prototype.parseFoundFinderPattern = function (row, rowNumber, oddPattern) {\n    // Actually we found elements 2-5.\n    var firstCounter;\n    var start;\n    var end;\n\n    if (oddPattern) {\n      // If pattern number is odd, we need to locate element 1 *before* the current block.\n      var firstElementStart = this.startEnd[0] - 1; // Locate element 1\n\n      while (firstElementStart >= 0 && !row.get(firstElementStart)) {\n        firstElementStart--;\n      }\n\n      firstElementStart++;\n      firstCounter = this.startEnd[0] - firstElementStart;\n      start = firstElementStart;\n      end = this.startEnd[1];\n    } else {\n      // If pattern number is even, the pattern is reversed, so we need to locate element 1 *after* the current block.\n      start = this.startEnd[0];\n      end = row.getNextUnset(this.startEnd[1] + 1);\n      firstCounter = end - this.startEnd[1];\n    } // Make 'counters' hold 1-4\n\n\n    var counters = this.getDecodeFinderCounters();\n    System_1.default.arraycopy(counters, 0, counters, 1, counters.length - 1);\n    counters[0] = firstCounter;\n    var value;\n\n    try {\n      value = this.parseFinderValue(counters, RSSExpandedReader.FINDER_PATTERNS);\n    } catch (e) {\n      return null;\n      console.log(e);\n    } //return new FinderPattern(value, new int[] { start, end }, start, end, rowNumber});\n\n\n    return new FinderPattern_1.default(value, [start, end], start, end, rowNumber);\n  };\n\n  RSSExpandedReader.prototype.decodeDataCharacter = function (row, pattern, isOddPattern, leftChar) {\n    var counters = this.getDataCharacterCounters();\n\n    for (var x = 0; x < counters.length; x++) {\n      counters[x] = 0;\n    }\n\n    if (leftChar) {\n      RSSExpandedReader.recordPatternInReverse(row, pattern.getStartEnd()[0], counters);\n    } else {\n      RSSExpandedReader.recordPattern(row, pattern.getStartEnd()[1], counters); // reverse it\n\n      for (var i = 0, j = counters.length - 1; i < j; i++, j--) {\n        var temp = counters[i];\n        counters[i] = counters[j];\n        counters[j] = temp;\n      }\n    } //counters[] has the pixels of the module\n\n\n    var numModules = 17; //left and right data characters have all the same length\n\n    var elementWidth = MathUtils_1.default.sum(new Int32Array(counters)) / numModules; // Sanity check: element width for pattern and the character should match\n\n    var expectedElementWidth = (pattern.getStartEnd()[1] - pattern.getStartEnd()[0]) / 15.0;\n\n    if (Math.abs(elementWidth - expectedElementWidth) / expectedElementWidth > 0.3) {\n      throw new NotFoundException_1.default();\n    }\n\n    var oddCounts = this.getOddCounts();\n    var evenCounts = this.getEvenCounts();\n    var oddRoundingErrors = this.getOddRoundingErrors();\n    var evenRoundingErrors = this.getEvenRoundingErrors();\n\n    for (var i = 0; i < counters.length; i++) {\n      var value_1 = 1.0 * counters[i] / elementWidth;\n      var count = value_1 + 0.5; // Round\n\n      if (count < 1) {\n        if (value_1 < 0.3) {\n          throw new NotFoundException_1.default();\n        }\n\n        count = 1;\n      } else if (count > 8) {\n        if (value_1 > 8.7) {\n          throw new NotFoundException_1.default();\n        }\n\n        count = 8;\n      }\n\n      var offset = i / 2;\n\n      if ((i & 0x01) == 0) {\n        oddCounts[offset] = count;\n        oddRoundingErrors[offset] = value_1 - count;\n      } else {\n        evenCounts[offset] = count;\n        evenRoundingErrors[offset] = value_1 - count;\n      }\n    }\n\n    this.adjustOddEvenCounts(numModules);\n    var weightRowNumber = 4 * pattern.getValue() + (isOddPattern ? 0 : 2) + (leftChar ? 0 : 1) - 1;\n    var oddSum = 0;\n    var oddChecksumPortion = 0;\n\n    for (var i = oddCounts.length - 1; i >= 0; i--) {\n      if (RSSExpandedReader.isNotA1left(pattern, isOddPattern, leftChar)) {\n        var weight = RSSExpandedReader.WEIGHTS[weightRowNumber][2 * i];\n        oddChecksumPortion += oddCounts[i] * weight;\n      }\n\n      oddSum += oddCounts[i];\n    }\n\n    var evenChecksumPortion = 0; //int evenSum = 0;\n\n    for (var i = evenCounts.length - 1; i >= 0; i--) {\n      if (RSSExpandedReader.isNotA1left(pattern, isOddPattern, leftChar)) {\n        var weight = RSSExpandedReader.WEIGHTS[weightRowNumber][2 * i + 1];\n        evenChecksumPortion += evenCounts[i] * weight;\n      } //evenSum += evenCounts[i];\n\n    }\n\n    var checksumPortion = oddChecksumPortion + evenChecksumPortion;\n\n    if ((oddSum & 0x01) != 0 || oddSum > 13 || oddSum < 4) {\n      throw new NotFoundException_1.default();\n    }\n\n    var group = (13 - oddSum) / 2;\n    var oddWidest = RSSExpandedReader.SYMBOL_WIDEST[group];\n    var evenWidest = 9 - oddWidest;\n    var vOdd = RSSUtils_1.default.getRSSvalue(oddCounts, oddWidest, true);\n    var vEven = RSSUtils_1.default.getRSSvalue(evenCounts, evenWidest, false);\n    var tEven = RSSExpandedReader.EVEN_TOTAL_SUBSET[group];\n    var gSum = RSSExpandedReader.GSUM[group];\n    var value = vOdd * tEven + vEven + gSum;\n    return new DataCharacter_1.default(value, checksumPortion);\n  };\n\n  RSSExpandedReader.isNotA1left = function (pattern, isOddPattern, leftChar) {\n    // A1: pattern.getValue is 0 (A), and it's an oddPattern, and it is a left char\n    return !(pattern.getValue() == 0 && isOddPattern && leftChar);\n  };\n\n  RSSExpandedReader.prototype.adjustOddEvenCounts = function (numModules) {\n    var oddSum = MathUtils_1.default.sum(new Int32Array(this.getOddCounts()));\n    var evenSum = MathUtils_1.default.sum(new Int32Array(this.getEvenCounts()));\n    var incrementOdd = false;\n    var decrementOdd = false;\n\n    if (oddSum > 13) {\n      decrementOdd = true;\n    } else if (oddSum < 4) {\n      incrementOdd = true;\n    }\n\n    var incrementEven = false;\n    var decrementEven = false;\n\n    if (evenSum > 13) {\n      decrementEven = true;\n    } else if (evenSum < 4) {\n      incrementEven = true;\n    }\n\n    var mismatch = oddSum + evenSum - numModules;\n    var oddParityBad = (oddSum & 0x01) == 1;\n    var evenParityBad = (evenSum & 0x01) == 0;\n\n    if (mismatch == 1) {\n      if (oddParityBad) {\n        if (evenParityBad) {\n          throw new NotFoundException_1.default();\n        }\n\n        decrementOdd = true;\n      } else {\n        if (!evenParityBad) {\n          throw new NotFoundException_1.default();\n        }\n\n        decrementEven = true;\n      }\n    } else if (mismatch == -1) {\n      if (oddParityBad) {\n        if (evenParityBad) {\n          throw new NotFoundException_1.default();\n        }\n\n        incrementOdd = true;\n      } else {\n        if (!evenParityBad) {\n          throw new NotFoundException_1.default();\n        }\n\n        incrementEven = true;\n      }\n    } else if (mismatch == 0) {\n      if (oddParityBad) {\n        if (!evenParityBad) {\n          throw new NotFoundException_1.default();\n        } // Both bad\n\n\n        if (oddSum < evenSum) {\n          incrementOdd = true;\n          decrementEven = true;\n        } else {\n          decrementOdd = true;\n          incrementEven = true;\n        }\n      } else {\n        if (evenParityBad) {\n          throw new NotFoundException_1.default();\n        } // Nothing to do!\n\n      }\n    } else {\n      throw new NotFoundException_1.default();\n    }\n\n    if (incrementOdd) {\n      if (decrementOdd) {\n        throw new NotFoundException_1.default();\n      }\n\n      RSSExpandedReader.increment(this.getOddCounts(), this.getOddRoundingErrors());\n    }\n\n    if (decrementOdd) {\n      RSSExpandedReader.decrement(this.getOddCounts(), this.getOddRoundingErrors());\n    }\n\n    if (incrementEven) {\n      if (decrementEven) {\n        throw new NotFoundException_1.default();\n      }\n\n      RSSExpandedReader.increment(this.getEvenCounts(), this.getOddRoundingErrors());\n    }\n\n    if (decrementEven) {\n      RSSExpandedReader.decrement(this.getEvenCounts(), this.getEvenRoundingErrors());\n    }\n  };\n\n  RSSExpandedReader.SYMBOL_WIDEST = [7, 5, 4, 3, 1];\n  RSSExpandedReader.EVEN_TOTAL_SUBSET = [4, 20, 52, 104, 204];\n  RSSExpandedReader.GSUM = [0, 348, 1388, 2948, 3988];\n  RSSExpandedReader.FINDER_PATTERNS = [[1, 8, 4, 1], [3, 6, 4, 1], [3, 4, 6, 1], [3, 2, 8, 1], [2, 6, 5, 1], [2, 2, 9, 1] // F\n  ];\n  RSSExpandedReader.WEIGHTS = [[1, 3, 9, 27, 81, 32, 96, 77], [20, 60, 180, 118, 143, 7, 21, 63], [189, 145, 13, 39, 117, 140, 209, 205], [193, 157, 49, 147, 19, 57, 171, 91], [62, 186, 136, 197, 169, 85, 44, 132], [185, 133, 188, 142, 4, 12, 36, 108], [113, 128, 173, 97, 80, 29, 87, 50], [150, 28, 84, 41, 123, 158, 52, 156], [46, 138, 203, 187, 139, 206, 196, 166], [76, 17, 51, 153, 37, 111, 122, 155], [43, 129, 176, 106, 107, 110, 119, 146], [16, 48, 144, 10, 30, 90, 59, 177], [109, 116, 137, 200, 178, 112, 125, 164], [70, 210, 208, 202, 184, 130, 179, 115], [134, 191, 151, 31, 93, 68, 204, 190], [148, 22, 66, 198, 172, 94, 71, 2], [6, 18, 54, 162, 64, 192, 154, 40], [120, 149, 25, 75, 14, 42, 126, 167], [79, 26, 78, 23, 69, 207, 199, 175], [103, 98, 83, 38, 114, 131, 182, 124], [161, 61, 183, 127, 170, 88, 53, 159], [55, 165, 73, 8, 24, 72, 5, 15], [45, 135, 194, 160, 58, 174, 100, 89]];\n  RSSExpandedReader.FINDER_PAT_A = 0;\n  RSSExpandedReader.FINDER_PAT_B = 1;\n  RSSExpandedReader.FINDER_PAT_C = 2;\n  RSSExpandedReader.FINDER_PAT_D = 3;\n  RSSExpandedReader.FINDER_PAT_E = 4;\n  RSSExpandedReader.FINDER_PAT_F = 5;\n  RSSExpandedReader.FINDER_PATTERN_SEQUENCES = [[RSSExpandedReader.FINDER_PAT_A, RSSExpandedReader.FINDER_PAT_A], [RSSExpandedReader.FINDER_PAT_A, RSSExpandedReader.FINDER_PAT_B, RSSExpandedReader.FINDER_PAT_B], [RSSExpandedReader.FINDER_PAT_A, RSSExpandedReader.FINDER_PAT_C, RSSExpandedReader.FINDER_PAT_B, RSSExpandedReader.FINDER_PAT_D], [RSSExpandedReader.FINDER_PAT_A, RSSExpandedReader.FINDER_PAT_E, RSSExpandedReader.FINDER_PAT_B, RSSExpandedReader.FINDER_PAT_D, RSSExpandedReader.FINDER_PAT_C], [RSSExpandedReader.FINDER_PAT_A, RSSExpandedReader.FINDER_PAT_E, RSSExpandedReader.FINDER_PAT_B, RSSExpandedReader.FINDER_PAT_D, RSSExpandedReader.FINDER_PAT_D, RSSExpandedReader.FINDER_PAT_F], [RSSExpandedReader.FINDER_PAT_A, RSSExpandedReader.FINDER_PAT_E, RSSExpandedReader.FINDER_PAT_B, RSSExpandedReader.FINDER_PAT_D, RSSExpandedReader.FINDER_PAT_E, RSSExpandedReader.FINDER_PAT_F, RSSExpandedReader.FINDER_PAT_F], [RSSExpandedReader.FINDER_PAT_A, RSSExpandedReader.FINDER_PAT_A, RSSExpandedReader.FINDER_PAT_B, RSSExpandedReader.FINDER_PAT_B, RSSExpandedReader.FINDER_PAT_C, RSSExpandedReader.FINDER_PAT_C, RSSExpandedReader.FINDER_PAT_D, RSSExpandedReader.FINDER_PAT_D], [RSSExpandedReader.FINDER_PAT_A, RSSExpandedReader.FINDER_PAT_A, RSSExpandedReader.FINDER_PAT_B, RSSExpandedReader.FINDER_PAT_B, RSSExpandedReader.FINDER_PAT_C, RSSExpandedReader.FINDER_PAT_C, RSSExpandedReader.FINDER_PAT_D, RSSExpandedReader.FINDER_PAT_E, RSSExpandedReader.FINDER_PAT_E], [RSSExpandedReader.FINDER_PAT_A, RSSExpandedReader.FINDER_PAT_A, RSSExpandedReader.FINDER_PAT_B, RSSExpandedReader.FINDER_PAT_B, RSSExpandedReader.FINDER_PAT_C, RSSExpandedReader.FINDER_PAT_C, RSSExpandedReader.FINDER_PAT_D, RSSExpandedReader.FINDER_PAT_E, RSSExpandedReader.FINDER_PAT_F, RSSExpandedReader.FINDER_PAT_F], [RSSExpandedReader.FINDER_PAT_A, RSSExpandedReader.FINDER_PAT_A, RSSExpandedReader.FINDER_PAT_B, RSSExpandedReader.FINDER_PAT_B, RSSExpandedReader.FINDER_PAT_C, RSSExpandedReader.FINDER_PAT_D, RSSExpandedReader.FINDER_PAT_D, RSSExpandedReader.FINDER_PAT_E, RSSExpandedReader.FINDER_PAT_E, RSSExpandedReader.FINDER_PAT_F, RSSExpandedReader.FINDER_PAT_F]];\n  RSSExpandedReader.MAX_PAIRS = 11;\n  return RSSExpandedReader;\n}(AbstractRSSReader_1.default);\n\nexports.default = RSSExpandedReader;","map":{"version":3,"sources":["../../../../../src/core/oned/rss/expanded/RSSExpandedReader.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __values = (this && this.__values) || function (o) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\n    if (m) return m.call(o);\n    return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar BarcodeFormat_1 = require(\"../../../BarcodeFormat\");\nvar NotFoundException_1 = require(\"../../../NotFoundException\");\nvar Result_1 = require(\"../../../Result\");\nvar MathUtils_1 = require(\"../../../common/detector/MathUtils\");\nvar AbstractRSSReader_1 = require(\"../../rss/AbstractRSSReader\");\nvar DataCharacter_1 = require(\"../../rss/DataCharacter\");\nvar FinderPattern_1 = require(\"../../rss/FinderPattern\");\nvar RSSUtils_1 = require(\"../../rss/RSSUtils\");\nvar AbstractExpandedDecoderComplement_1 = require(\"./decoders/AbstractExpandedDecoderComplement\");\nvar ExpandedPair_1 = require(\"./ExpandedPair\");\nvar ExpandedRow_1 = require(\"./ExpandedRow\");\nvar BitArrayBuilder_1 = require(\"./BitArrayBuilder\");\nvar System_1 = require(\"../../../util/System\");\n// import java.util.ArrayList;\n// import java.util.Iterator;\n// import java.util.List;\n// import java.util.Map;\n// import java.util.Collections;\nvar RSSExpandedReader = /** @class */ (function (_super) {\n    __extends(RSSExpandedReader, _super);\n    function RSSExpandedReader() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.pairs = new Array(RSSExpandedReader.MAX_PAIRS);\n        _this.rows = new Array();\n        _this.startEnd = [2];\n        return _this;\n    }\n    RSSExpandedReader.prototype.decodeRow = function (rowNumber, row, hints) {\n        // Rows can start with even pattern in case in prev rows there where odd number of patters.\n        // So lets try twice\n        //this.pairs.clear();\n        this.pairs.length = 0;\n        this.startFromEven = false;\n        try {\n            return RSSExpandedReader.constructResult(this.decodeRow2pairs(rowNumber, row));\n        }\n        catch (e) {\n            // OK\n            console.log(e);\n        }\n        this.pairs.length = 0;\n        this.startFromEven = true;\n        return RSSExpandedReader.constructResult(this.decodeRow2pairs(rowNumber, row));\n    };\n    RSSExpandedReader.prototype.reset = function () {\n        this.pairs.length = 0;\n        this.rows.length = 0;\n    };\n    // Not private for testing\n    RSSExpandedReader.prototype.decodeRow2pairs = function (rowNumber, row) {\n        var done = false;\n        while (!done) {\n            try {\n                this.pairs.push(this.retrieveNextPair(row, this.pairs, rowNumber));\n            }\n            catch (NotFoundException) {\n                if (!this.pairs.length) {\n                    throw new NotFoundException();\n                }\n                // exit this loop when retrieveNextPair() fails and throws\n                done = true;\n            }\n        }\n        // TODO: verify sequence of finder patterns as in checkPairSequence()\n        if (this.checkChecksum()) {\n            return this.pairs;\n        }\n        var tryStackedDecode;\n        if (this.rows.length) {\n            tryStackedDecode = true;\n        }\n        else {\n            tryStackedDecode = false;\n        }\n        //let tryStackedDecode = !this.rows.isEmpty();\n        this.storeRow(rowNumber, false); // TODO: deal with reversed rows\n        if (tryStackedDecode) {\n            // When the image is 180-rotated, then rows are sorted in wrong direction.\n            // Try twice with both the directions.\n            var ps = this.checkRowsBoolean(false);\n            if (ps != null) {\n                return ps;\n            }\n            ps = this.checkRowsBoolean(true);\n            if (ps != null) {\n                return ps;\n            }\n        }\n        throw new NotFoundException_1.default();\n    };\n    //Need to Verify\n    RSSExpandedReader.prototype.checkRowsBoolean = function (reverse) {\n        // Limit number of rows we are checking\n        // We use recursive algorithm with pure complexity and don't want it to take forever\n        // Stacked barcode can have up to 11 rows, so 25 seems reasonable enough\n        if (this.rows.length > 25) {\n            this.rows.length = 0; // We will never have a chance to get result, so clear it\n            return null;\n        }\n        this.pairs.length = 0;\n        if (reverse) {\n            this.rows = this.rows.reverse();\n            //Collections.reverse(this.rows);\n        }\n        var ps = null;\n        try {\n            ps = this.checkRows(new Array(), 0);\n        }\n        catch (e) {\n            // OK\n            console.log(e);\n        }\n        if (reverse) {\n            this.rows = this.rows.reverse();\n            //Collections.reverse(this.rows);\n        }\n        return ps;\n    };\n    // Try to construct a valid rows sequence\n    // Recursion is used to implement backtracking\n    RSSExpandedReader.prototype.checkRows = function (collectedRows, currentRow) {\n        var e_1, _a;\n        for (var i = currentRow; i < this.rows.length; i++) {\n            var row = this.rows[i];\n            this.pairs.length = 0;\n            try {\n                for (var collectedRows_1 = __values(collectedRows), collectedRows_1_1 = collectedRows_1.next(); !collectedRows_1_1.done; collectedRows_1_1 = collectedRows_1.next()) {\n                    var collectedRow = collectedRows_1_1.value;\n                    this.pairs.push(collectedRow.getPairs());\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (collectedRows_1_1 && !collectedRows_1_1.done && (_a = collectedRows_1.return)) _a.call(collectedRows_1);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n            this.pairs.push(row.getPairs());\n            if (!RSSExpandedReader.isValidSequence(this.pairs)) {\n                continue;\n            }\n            if (this.checkChecksum()) {\n                return this.pairs;\n            }\n            var rs = new Array(collectedRows);\n            rs.push(row);\n            try {\n                // Recursion: try to add more rows\n                return this.checkRows(rs, i + 1);\n            }\n            catch (e) {\n                // We failed, try the next candidate\n                console.log(e);\n            }\n        }\n        throw new NotFoundException_1.default();\n    };\n    // Whether the pairs form a valid find pattern sequence,\n    // either complete or a prefix\n    RSSExpandedReader.isValidSequence = function (pairs) {\n        var e_2, _a;\n        try {\n            for (var _b = __values(RSSExpandedReader.FINDER_PATTERN_SEQUENCES), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var sequence = _c.value;\n                if (pairs.length > sequence.length) {\n                    continue;\n                }\n                var stop_1 = true;\n                for (var j = 0; j < pairs.length; j++) {\n                    if (pairs[j].getFinderPattern().getValue() != sequence[j]) {\n                        stop_1 = false;\n                        break;\n                    }\n                }\n                if (stop_1) {\n                    return true;\n                }\n            }\n        }\n        catch (e_2_1) { e_2 = { error: e_2_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_2) throw e_2.error; }\n        }\n        return false;\n    };\n    RSSExpandedReader.prototype.storeRow = function (rowNumber, wasReversed) {\n        // Discard if duplicate above or below; otherwise insert in order by row number.\n        var insertPos = 0;\n        var prevIsSame = false;\n        var nextIsSame = false;\n        while (insertPos < this.rows.length) {\n            var erow = this.rows[insertPos];\n            if (erow.getRowNumber() > rowNumber) {\n                nextIsSame = erow.isEquivalent(this.pairs);\n                break;\n            }\n            prevIsSame = erow.isEquivalent(this.pairs);\n            insertPos++;\n        }\n        if (nextIsSame || prevIsSame) {\n            return;\n        }\n        // When the row was partially decoded (e.g. 2 pairs found instead of 3),\n        // it will prevent us from detecting the barcode.\n        // Try to merge partial rows\n        // Check whether the row is part of an allready detected row\n        if (RSSExpandedReader.isPartialRow(this.pairs, this.rows)) {\n            return;\n        }\n        this.rows.push(insertPos, new ExpandedRow_1.default(this.pairs, rowNumber, wasReversed));\n        this.removePartialRows(this.pairs, this.rows);\n    };\n    // Remove all the rows that contains only specified pairs\n    RSSExpandedReader.prototype.removePartialRows = function (pairs, rows) {\n        var e_3, _a, e_4, _b, e_5, _c;\n        try {\n            // for (Iterator<ExpandedRow> iterator = rows.iterator(); iterator.hasNext();) {\n            //   ExpandedRow r = iterator.next();\n            //   if (r.getPairs().size() == pairs.size()) {\n            //     continue;\n            //   }\n            //   boolean allFound = true;\n            //   for (ExpandedPair p : r.getPairs()) {\n            //     boolean found = false;\n            //     for (ExpandedPair pp : pairs) {\n            //       if (p.equals(pp)) {\n            //         found = true;\n            //         break;\n            //       }\n            //     }\n            //     if (!found) {\n            //       allFound = false;\n            //       break;\n            //     }\n            //   }\n            //   if (allFound) {\n            //     // 'pairs' contains all the pairs from the row 'r'\n            //     iterator.remove();\n            //   }\n            // }\n            for (var rows_1 = __values(rows), rows_1_1 = rows_1.next(); !rows_1_1.done; rows_1_1 = rows_1.next()) {\n                var row = rows_1_1.value;\n                if (row.getPairs().length === pairs.length) {\n                    continue;\n                }\n                var allFound = true;\n                try {\n                    for (var _d = __values(row.getPairs()), _e = _d.next(); !_e.done; _e = _d.next()) {\n                        var p = _e.value;\n                        var found = false;\n                        try {\n                            for (var pairs_1 = __values(pairs), pairs_1_1 = pairs_1.next(); !pairs_1_1.done; pairs_1_1 = pairs_1.next()) {\n                                var pp = pairs_1_1.value;\n                                if (ExpandedPair_1.default.equals(p, pp)) {\n                                    found = true;\n                                    break;\n                                }\n                            }\n                        }\n                        catch (e_5_1) { e_5 = { error: e_5_1 }; }\n                        finally {\n                            try {\n                                if (pairs_1_1 && !pairs_1_1.done && (_c = pairs_1.return)) _c.call(pairs_1);\n                            }\n                            finally { if (e_5) throw e_5.error; }\n                        }\n                        if (!found) {\n                            allFound = false;\n                        }\n                    }\n                }\n                catch (e_4_1) { e_4 = { error: e_4_1 }; }\n                finally {\n                    try {\n                        if (_e && !_e.done && (_b = _d.return)) _b.call(_d);\n                    }\n                    finally { if (e_4) throw e_4.error; }\n                }\n            }\n        }\n        catch (e_3_1) { e_3 = { error: e_3_1 }; }\n        finally {\n            try {\n                if (rows_1_1 && !rows_1_1.done && (_a = rows_1.return)) _a.call(rows_1);\n            }\n            finally { if (e_3) throw e_3.error; }\n        }\n    };\n    // Returns true when one of the rows already contains all the pairs\n    RSSExpandedReader.isPartialRow = function (pairs, rows) {\n        var e_6, _a, e_7, _b, e_8, _c;\n        try {\n            for (var rows_2 = __values(rows), rows_2_1 = rows_2.next(); !rows_2_1.done; rows_2_1 = rows_2.next()) {\n                var r = rows_2_1.value;\n                var allFound = true;\n                try {\n                    for (var pairs_2 = __values(pairs), pairs_2_1 = pairs_2.next(); !pairs_2_1.done; pairs_2_1 = pairs_2.next()) {\n                        var p = pairs_2_1.value;\n                        var found = false;\n                        try {\n                            for (var _d = __values(r.getPairs()), _e = _d.next(); !_e.done; _e = _d.next()) {\n                                var pp = _e.value;\n                                if (p.equals(pp)) {\n                                    found = true;\n                                    break;\n                                }\n                            }\n                        }\n                        catch (e_8_1) { e_8 = { error: e_8_1 }; }\n                        finally {\n                            try {\n                                if (_e && !_e.done && (_c = _d.return)) _c.call(_d);\n                            }\n                            finally { if (e_8) throw e_8.error; }\n                        }\n                        if (!found) {\n                            allFound = false;\n                            break;\n                        }\n                    }\n                }\n                catch (e_7_1) { e_7 = { error: e_7_1 }; }\n                finally {\n                    try {\n                        if (pairs_2_1 && !pairs_2_1.done && (_b = pairs_2.return)) _b.call(pairs_2);\n                    }\n                    finally { if (e_7) throw e_7.error; }\n                }\n                if (allFound) {\n                    // the row 'r' contain all the pairs from 'pairs'\n                    return true;\n                }\n            }\n        }\n        catch (e_6_1) { e_6 = { error: e_6_1 }; }\n        finally {\n            try {\n                if (rows_2_1 && !rows_2_1.done && (_a = rows_2.return)) _a.call(rows_2);\n            }\n            finally { if (e_6) throw e_6.error; }\n        }\n        return false;\n    };\n    // Only used for unit testing\n    RSSExpandedReader.prototype.getRows = function () {\n        return this.rows;\n    };\n    // Not private for unit testing\n    RSSExpandedReader.constructResult = function (pairs) {\n        var binary = BitArrayBuilder_1.default.buildBitArray(pairs);\n        var decoder = AbstractExpandedDecoderComplement_1.createDecoder(binary);\n        var resultingString = decoder.parseInformation();\n        var firstPoints = pairs[0].getFinderPattern().getResultPoints();\n        var lastPoints = pairs[pairs.length - 1].getFinderPattern().getResultPoints();\n        var points = [firstPoints[0], firstPoints[1], lastPoints[0], lastPoints[1]];\n        return new Result_1.default(resultingString, null, null, points, BarcodeFormat_1.default.RSS_EXPANDED, null);\n    };\n    RSSExpandedReader.prototype.checkChecksum = function () {\n        var firstPair = this.pairs.get(0);\n        var checkCharacter = firstPair.getLeftChar();\n        var firstCharacter = firstPair.getRightChar();\n        if (firstCharacter == null) {\n            return false;\n        }\n        var checksum = firstCharacter.getChecksumPortion();\n        var s = 2;\n        for (var i = 1; i < this.pairs.size(); ++i) {\n            var currentPair = this.pairs.get(i);\n            checksum += currentPair.getLeftChar().getChecksumPortion();\n            s++;\n            var currentRightChar = currentPair.getRightChar();\n            if (currentRightChar != null) {\n                checksum += currentRightChar.getChecksumPortion();\n                s++;\n            }\n        }\n        checksum %= 211;\n        var checkCharacterValue = 211 * (s - 4) + checksum;\n        return checkCharacterValue == checkCharacter.getValue();\n    };\n    RSSExpandedReader.getNextSecondBar = function (row, initialPos) {\n        var currentPos;\n        if (row.get(initialPos)) {\n            currentPos = row.getNextUnset(initialPos);\n            currentPos = row.getNextSet(currentPos);\n        }\n        else {\n            currentPos = row.getNextSet(initialPos);\n            currentPos = row.getNextUnset(currentPos);\n        }\n        return currentPos;\n    };\n    // not private for testing\n    RSSExpandedReader.prototype.retrieveNextPair = function (row, previousPairs, rowNumber) {\n        var isOddPattern = previousPairs.length % 2 == 0;\n        if (this.startFromEven) {\n            isOddPattern = !isOddPattern;\n        }\n        var pattern;\n        var keepFinding = true;\n        var forcedOffset = -1;\n        do {\n            this.findNextPair(row, previousPairs, forcedOffset);\n            pattern = this.parseFoundFinderPattern(row, rowNumber, isOddPattern);\n            if (pattern == null) {\n                forcedOffset = RSSExpandedReader.getNextSecondBar(row, this.startEnd[0]);\n            }\n            else {\n                keepFinding = false;\n            }\n        } while (keepFinding);\n        // When stacked symbol is split over multiple rows, there's no way to guess if this pair can be last or not.\n        // boolean mayBeLast = checkPairSequence(previousPairs, pattern);\n        var leftChar = this.decodeDataCharacter(row, pattern, isOddPattern, true);\n        if (!this.isEmptyPair(previousPairs) && previousPairs[previousPairs.length - 1].mustBeLast()) {\n            throw new NotFoundException_1.default();\n        }\n        var rightChar;\n        try {\n            rightChar = this.decodeDataCharacter(row, pattern, isOddPattern, false);\n        }\n        catch (e) {\n            rightChar = null;\n            console.log(e);\n        }\n        return new ExpandedPair_1.default(leftChar, rightChar, pattern, true);\n    };\n    RSSExpandedReader.prototype.isEmptyPair = function (pairs) {\n        if (pairs.length === 0) {\n            return true;\n        }\n        return false;\n    };\n    RSSExpandedReader.prototype.findNextPair = function (row, previousPairs, forcedOffset) {\n        var counters = this.getDecodeFinderCounters();\n        counters[0] = 0;\n        counters[1] = 0;\n        counters[2] = 0;\n        counters[3] = 0;\n        var width = row.getSize();\n        var rowOffset;\n        if (forcedOffset >= 0) {\n            rowOffset = forcedOffset;\n        }\n        else if (this.isEmptyPair(previousPairs)) {\n            rowOffset = 0;\n        }\n        else {\n            var lastPair = previousPairs[previousPairs.length - 1];\n            rowOffset = lastPair.getFinderPattern().getStartEnd()[1];\n        }\n        var searchingEvenPair = previousPairs.length % 2 != 0;\n        if (this.startFromEven) {\n            searchingEvenPair = !searchingEvenPair;\n        }\n        var isWhite = false;\n        while (rowOffset < width) {\n            isWhite = !row.get(rowOffset);\n            if (!isWhite) {\n                break;\n            }\n            rowOffset++;\n        }\n        var counterPosition = 0;\n        var patternStart = rowOffset;\n        for (var x = rowOffset; x < width; x++) {\n            if (row.get(x) != isWhite) {\n                counters[counterPosition]++;\n            }\n            else {\n                if (counterPosition == 3) {\n                    if (searchingEvenPair) {\n                        RSSExpandedReader.reverseCounters(counters);\n                    }\n                    if (RSSExpandedReader.isFinderPattern(counters)) {\n                        this.startEnd[0] = patternStart;\n                        this.startEnd[1] = x;\n                        return;\n                    }\n                    if (searchingEvenPair) {\n                        RSSExpandedReader.reverseCounters(counters);\n                    }\n                    patternStart += counters[0] + counters[1];\n                    counters[0] = counters[2];\n                    counters[1] = counters[3];\n                    counters[2] = 0;\n                    counters[3] = 0;\n                    counterPosition--;\n                }\n                else {\n                    counterPosition++;\n                }\n                counters[counterPosition] = 1;\n                isWhite = !isWhite;\n            }\n        }\n        throw new NotFoundException_1.default();\n    };\n    RSSExpandedReader.reverseCounters = function (counters) {\n        var length = counters.length;\n        for (var i = 0; i < length / 2; ++i) {\n            var tmp = counters[i];\n            counters[i] = counters[length - i - 1];\n            counters[length - i - 1] = tmp;\n        }\n    };\n    RSSExpandedReader.prototype.parseFoundFinderPattern = function (row, rowNumber, oddPattern) {\n        // Actually we found elements 2-5.\n        var firstCounter;\n        var start;\n        var end;\n        if (oddPattern) {\n            // If pattern number is odd, we need to locate element 1 *before* the current block.\n            var firstElementStart = this.startEnd[0] - 1;\n            // Locate element 1\n            while (firstElementStart >= 0 && !row.get(firstElementStart)) {\n                firstElementStart--;\n            }\n            firstElementStart++;\n            firstCounter = this.startEnd[0] - firstElementStart;\n            start = firstElementStart;\n            end = this.startEnd[1];\n        }\n        else {\n            // If pattern number is even, the pattern is reversed, so we need to locate element 1 *after* the current block.\n            start = this.startEnd[0];\n            end = row.getNextUnset(this.startEnd[1] + 1);\n            firstCounter = end - this.startEnd[1];\n        }\n        // Make 'counters' hold 1-4\n        var counters = this.getDecodeFinderCounters();\n        System_1.default.arraycopy(counters, 0, counters, 1, counters.length - 1);\n        counters[0] = firstCounter;\n        var value;\n        try {\n            value = this.parseFinderValue(counters, RSSExpandedReader.FINDER_PATTERNS);\n        }\n        catch (e) {\n            return null;\n            console.log(e);\n        }\n        //return new FinderPattern(value, new int[] { start, end }, start, end, rowNumber});\n        return new FinderPattern_1.default(value, [start, end], start, end, rowNumber);\n    };\n    RSSExpandedReader.prototype.decodeDataCharacter = function (row, pattern, isOddPattern, leftChar) {\n        var counters = this.getDataCharacterCounters();\n        for (var x = 0; x < counters.length; x++) {\n            counters[x] = 0;\n        }\n        if (leftChar) {\n            RSSExpandedReader.recordPatternInReverse(row, pattern.getStartEnd()[0], counters);\n        }\n        else {\n            RSSExpandedReader.recordPattern(row, pattern.getStartEnd()[1], counters);\n            // reverse it\n            for (var i = 0, j = counters.length - 1; i < j; i++, j--) {\n                var temp = counters[i];\n                counters[i] = counters[j];\n                counters[j] = temp;\n            }\n        } //counters[] has the pixels of the module\n        var numModules = 17; //left and right data characters have all the same length\n        var elementWidth = MathUtils_1.default.sum(new Int32Array(counters)) / numModules;\n        // Sanity check: element width for pattern and the character should match\n        var expectedElementWidth = (pattern.getStartEnd()[1] - pattern.getStartEnd()[0]) / 15.0;\n        if (Math.abs(elementWidth - expectedElementWidth) / expectedElementWidth > 0.3) {\n            throw new NotFoundException_1.default();\n        }\n        var oddCounts = this.getOddCounts();\n        var evenCounts = this.getEvenCounts();\n        var oddRoundingErrors = this.getOddRoundingErrors();\n        var evenRoundingErrors = this.getEvenRoundingErrors();\n        for (var i = 0; i < counters.length; i++) {\n            var value_1 = 1.0 * counters[i] / elementWidth;\n            var count = value_1 + 0.5; // Round\n            if (count < 1) {\n                if (value_1 < 0.3) {\n                    throw new NotFoundException_1.default();\n                }\n                count = 1;\n            }\n            else if (count > 8) {\n                if (value_1 > 8.7) {\n                    throw new NotFoundException_1.default();\n                }\n                count = 8;\n            }\n            var offset = i / 2;\n            if ((i & 0x01) == 0) {\n                oddCounts[offset] = count;\n                oddRoundingErrors[offset] = value_1 - count;\n            }\n            else {\n                evenCounts[offset] = count;\n                evenRoundingErrors[offset] = value_1 - count;\n            }\n        }\n        this.adjustOddEvenCounts(numModules);\n        var weightRowNumber = 4 * pattern.getValue() + (isOddPattern ? 0 : 2) + (leftChar ? 0 : 1) - 1;\n        var oddSum = 0;\n        var oddChecksumPortion = 0;\n        for (var i = oddCounts.length - 1; i >= 0; i--) {\n            if (RSSExpandedReader.isNotA1left(pattern, isOddPattern, leftChar)) {\n                var weight = RSSExpandedReader.WEIGHTS[weightRowNumber][2 * i];\n                oddChecksumPortion += oddCounts[i] * weight;\n            }\n            oddSum += oddCounts[i];\n        }\n        var evenChecksumPortion = 0;\n        //int evenSum = 0;\n        for (var i = evenCounts.length - 1; i >= 0; i--) {\n            if (RSSExpandedReader.isNotA1left(pattern, isOddPattern, leftChar)) {\n                var weight = RSSExpandedReader.WEIGHTS[weightRowNumber][2 * i + 1];\n                evenChecksumPortion += evenCounts[i] * weight;\n            }\n            //evenSum += evenCounts[i];\n        }\n        var checksumPortion = oddChecksumPortion + evenChecksumPortion;\n        if ((oddSum & 0x01) != 0 || oddSum > 13 || oddSum < 4) {\n            throw new NotFoundException_1.default();\n        }\n        var group = (13 - oddSum) / 2;\n        var oddWidest = RSSExpandedReader.SYMBOL_WIDEST[group];\n        var evenWidest = 9 - oddWidest;\n        var vOdd = RSSUtils_1.default.getRSSvalue(oddCounts, oddWidest, true);\n        var vEven = RSSUtils_1.default.getRSSvalue(evenCounts, evenWidest, false);\n        var tEven = RSSExpandedReader.EVEN_TOTAL_SUBSET[group];\n        var gSum = RSSExpandedReader.GSUM[group];\n        var value = vOdd * tEven + vEven + gSum;\n        return new DataCharacter_1.default(value, checksumPortion);\n    };\n    RSSExpandedReader.isNotA1left = function (pattern, isOddPattern, leftChar) {\n        // A1: pattern.getValue is 0 (A), and it's an oddPattern, and it is a left char\n        return !(pattern.getValue() == 0 && isOddPattern && leftChar);\n    };\n    RSSExpandedReader.prototype.adjustOddEvenCounts = function (numModules) {\n        var oddSum = MathUtils_1.default.sum(new Int32Array(this.getOddCounts()));\n        var evenSum = MathUtils_1.default.sum(new Int32Array(this.getEvenCounts()));\n        var incrementOdd = false;\n        var decrementOdd = false;\n        if (oddSum > 13) {\n            decrementOdd = true;\n        }\n        else if (oddSum < 4) {\n            incrementOdd = true;\n        }\n        var incrementEven = false;\n        var decrementEven = false;\n        if (evenSum > 13) {\n            decrementEven = true;\n        }\n        else if (evenSum < 4) {\n            incrementEven = true;\n        }\n        var mismatch = oddSum + evenSum - numModules;\n        var oddParityBad = (oddSum & 0x01) == 1;\n        var evenParityBad = (evenSum & 0x01) == 0;\n        if (mismatch == 1) {\n            if (oddParityBad) {\n                if (evenParityBad) {\n                    throw new NotFoundException_1.default();\n                }\n                decrementOdd = true;\n            }\n            else {\n                if (!evenParityBad) {\n                    throw new NotFoundException_1.default();\n                }\n                decrementEven = true;\n            }\n        }\n        else if (mismatch == -1) {\n            if (oddParityBad) {\n                if (evenParityBad) {\n                    throw new NotFoundException_1.default();\n                }\n                incrementOdd = true;\n            }\n            else {\n                if (!evenParityBad) {\n                    throw new NotFoundException_1.default();\n                }\n                incrementEven = true;\n            }\n        }\n        else if (mismatch == 0) {\n            if (oddParityBad) {\n                if (!evenParityBad) {\n                    throw new NotFoundException_1.default();\n                }\n                // Both bad\n                if (oddSum < evenSum) {\n                    incrementOdd = true;\n                    decrementEven = true;\n                }\n                else {\n                    decrementOdd = true;\n                    incrementEven = true;\n                }\n            }\n            else {\n                if (evenParityBad) {\n                    throw new NotFoundException_1.default();\n                }\n                // Nothing to do!\n            }\n        }\n        else {\n            throw new NotFoundException_1.default();\n        }\n        if (incrementOdd) {\n            if (decrementOdd) {\n                throw new NotFoundException_1.default();\n            }\n            RSSExpandedReader.increment(this.getOddCounts(), this.getOddRoundingErrors());\n        }\n        if (decrementOdd) {\n            RSSExpandedReader.decrement(this.getOddCounts(), this.getOddRoundingErrors());\n        }\n        if (incrementEven) {\n            if (decrementEven) {\n                throw new NotFoundException_1.default();\n            }\n            RSSExpandedReader.increment(this.getEvenCounts(), this.getOddRoundingErrors());\n        }\n        if (decrementEven) {\n            RSSExpandedReader.decrement(this.getEvenCounts(), this.getEvenRoundingErrors());\n        }\n    };\n    RSSExpandedReader.SYMBOL_WIDEST = [7, 5, 4, 3, 1];\n    RSSExpandedReader.EVEN_TOTAL_SUBSET = [4, 20, 52, 104, 204];\n    RSSExpandedReader.GSUM = [0, 348, 1388, 2948, 3988];\n    RSSExpandedReader.FINDER_PATTERNS = [\n        [1, 8, 4, 1],\n        [3, 6, 4, 1],\n        [3, 4, 6, 1],\n        [3, 2, 8, 1],\n        [2, 6, 5, 1],\n        [2, 2, 9, 1] // F\n    ];\n    RSSExpandedReader.WEIGHTS = [\n        [1, 3, 9, 27, 81, 32, 96, 77],\n        [20, 60, 180, 118, 143, 7, 21, 63],\n        [189, 145, 13, 39, 117, 140, 209, 205],\n        [193, 157, 49, 147, 19, 57, 171, 91],\n        [62, 186, 136, 197, 169, 85, 44, 132],\n        [185, 133, 188, 142, 4, 12, 36, 108],\n        [113, 128, 173, 97, 80, 29, 87, 50],\n        [150, 28, 84, 41, 123, 158, 52, 156],\n        [46, 138, 203, 187, 139, 206, 196, 166],\n        [76, 17, 51, 153, 37, 111, 122, 155],\n        [43, 129, 176, 106, 107, 110, 119, 146],\n        [16, 48, 144, 10, 30, 90, 59, 177],\n        [109, 116, 137, 200, 178, 112, 125, 164],\n        [70, 210, 208, 202, 184, 130, 179, 115],\n        [134, 191, 151, 31, 93, 68, 204, 190],\n        [148, 22, 66, 198, 172, 94, 71, 2],\n        [6, 18, 54, 162, 64, 192, 154, 40],\n        [120, 149, 25, 75, 14, 42, 126, 167],\n        [79, 26, 78, 23, 69, 207, 199, 175],\n        [103, 98, 83, 38, 114, 131, 182, 124],\n        [161, 61, 183, 127, 170, 88, 53, 159],\n        [55, 165, 73, 8, 24, 72, 5, 15],\n        [45, 135, 194, 160, 58, 174, 100, 89]\n    ];\n    RSSExpandedReader.FINDER_PAT_A = 0;\n    RSSExpandedReader.FINDER_PAT_B = 1;\n    RSSExpandedReader.FINDER_PAT_C = 2;\n    RSSExpandedReader.FINDER_PAT_D = 3;\n    RSSExpandedReader.FINDER_PAT_E = 4;\n    RSSExpandedReader.FINDER_PAT_F = 5;\n    RSSExpandedReader.FINDER_PATTERN_SEQUENCES = [\n        [RSSExpandedReader.FINDER_PAT_A, RSSExpandedReader.FINDER_PAT_A],\n        [RSSExpandedReader.FINDER_PAT_A, RSSExpandedReader.FINDER_PAT_B, RSSExpandedReader.FINDER_PAT_B],\n        [RSSExpandedReader.FINDER_PAT_A, RSSExpandedReader.FINDER_PAT_C, RSSExpandedReader.FINDER_PAT_B, RSSExpandedReader.FINDER_PAT_D],\n        [RSSExpandedReader.FINDER_PAT_A, RSSExpandedReader.FINDER_PAT_E, RSSExpandedReader.FINDER_PAT_B, RSSExpandedReader.FINDER_PAT_D, RSSExpandedReader.FINDER_PAT_C],\n        [RSSExpandedReader.FINDER_PAT_A, RSSExpandedReader.FINDER_PAT_E, RSSExpandedReader.FINDER_PAT_B, RSSExpandedReader.FINDER_PAT_D, RSSExpandedReader.FINDER_PAT_D, RSSExpandedReader.FINDER_PAT_F],\n        [RSSExpandedReader.FINDER_PAT_A, RSSExpandedReader.FINDER_PAT_E, RSSExpandedReader.FINDER_PAT_B, RSSExpandedReader.FINDER_PAT_D, RSSExpandedReader.FINDER_PAT_E, RSSExpandedReader.FINDER_PAT_F, RSSExpandedReader.FINDER_PAT_F],\n        [RSSExpandedReader.FINDER_PAT_A, RSSExpandedReader.FINDER_PAT_A, RSSExpandedReader.FINDER_PAT_B, RSSExpandedReader.FINDER_PAT_B, RSSExpandedReader.FINDER_PAT_C, RSSExpandedReader.FINDER_PAT_C, RSSExpandedReader.FINDER_PAT_D, RSSExpandedReader.FINDER_PAT_D],\n        [RSSExpandedReader.FINDER_PAT_A, RSSExpandedReader.FINDER_PAT_A, RSSExpandedReader.FINDER_PAT_B, RSSExpandedReader.FINDER_PAT_B, RSSExpandedReader.FINDER_PAT_C, RSSExpandedReader.FINDER_PAT_C, RSSExpandedReader.FINDER_PAT_D, RSSExpandedReader.FINDER_PAT_E, RSSExpandedReader.FINDER_PAT_E],\n        [RSSExpandedReader.FINDER_PAT_A, RSSExpandedReader.FINDER_PAT_A, RSSExpandedReader.FINDER_PAT_B, RSSExpandedReader.FINDER_PAT_B, RSSExpandedReader.FINDER_PAT_C, RSSExpandedReader.FINDER_PAT_C, RSSExpandedReader.FINDER_PAT_D, RSSExpandedReader.FINDER_PAT_E, RSSExpandedReader.FINDER_PAT_F, RSSExpandedReader.FINDER_PAT_F],\n        [RSSExpandedReader.FINDER_PAT_A, RSSExpandedReader.FINDER_PAT_A, RSSExpandedReader.FINDER_PAT_B, RSSExpandedReader.FINDER_PAT_B, RSSExpandedReader.FINDER_PAT_C, RSSExpandedReader.FINDER_PAT_D, RSSExpandedReader.FINDER_PAT_D, RSSExpandedReader.FINDER_PAT_E, RSSExpandedReader.FINDER_PAT_E, RSSExpandedReader.FINDER_PAT_F, RSSExpandedReader.FINDER_PAT_F],\n    ];\n    RSSExpandedReader.MAX_PAIRS = 11;\n    return RSSExpandedReader;\n}(AbstractRSSReader_1.default));\nexports.default = RSSExpandedReader;\n//# sourceMappingURL=RSSExpandedReader.js.map"]},"metadata":{},"sourceType":"script"}