{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2013 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar __values = this && this.__values || function (o) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator],\n      i = 0;\n  if (m) return m.call(o);\n  return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n}); // package com.google.zxing.pdf417.decoder;\n// import java.util.Formatter;\n\nvar Formatter_1 = require(\"../../util/Formatter\");\n\nvar BoundingBox_1 = require(\"./BoundingBox\");\n/**\n * @author Guenther Grau\n */\n\n\nvar DetectionResultColumn =\n/** @class */\nfunction () {\n  function DetectionResultColumn(boundingBox) {\n    this.boundingBox = new BoundingBox_1.default(boundingBox); // this.codewords = new Codeword[boundingBox.getMaxY() - boundingBox.getMinY() + 1];\n\n    this.codewords = new Array(boundingBox.getMaxY() - boundingBox.getMinY() + 1);\n  }\n  /*final*/\n\n\n  DetectionResultColumn.prototype.getCodewordNearby = function (imageRow) {\n    var codeword = this.getCodeword(imageRow);\n\n    if (codeword != null) {\n      return codeword;\n    }\n\n    for (var i = 1; i < DetectionResultColumn.MAX_NEARBY_DISTANCE; i++) {\n      var nearImageRow = this.imageRowToCodewordIndex(imageRow) - i;\n\n      if (nearImageRow >= 0) {\n        codeword = this.codewords[nearImageRow];\n\n        if (codeword != null) {\n          return codeword;\n        }\n      }\n\n      nearImageRow = this.imageRowToCodewordIndex(imageRow) + i;\n\n      if (nearImageRow < this.codewords.length) {\n        codeword = this.codewords[nearImageRow];\n\n        if (codeword != null) {\n          return codeword;\n        }\n      }\n    }\n\n    return null;\n  };\n  /*final int*/\n\n\n  DetectionResultColumn.prototype.imageRowToCodewordIndex = function (imageRow) {\n    return imageRow - this.boundingBox.getMinY();\n  };\n  /*final void*/\n\n\n  DetectionResultColumn.prototype.setCodeword = function (imageRow, codeword) {\n    this.codewords[this.imageRowToCodewordIndex(imageRow)] = codeword;\n  };\n  /*final*/\n\n\n  DetectionResultColumn.prototype.getCodeword = function (imageRow) {\n    return this.codewords[this.imageRowToCodewordIndex(imageRow)];\n  };\n  /*final*/\n\n\n  DetectionResultColumn.prototype.getBoundingBox = function () {\n    return this.boundingBox;\n  };\n  /*final*/\n\n\n  DetectionResultColumn.prototype.getCodewords = function () {\n    return this.codewords;\n  }; // @Override\n\n\n  DetectionResultColumn.prototype.toString = function () {\n    var e_1, _a;\n\n    var formatter = new Formatter_1.default();\n    var row = 0;\n\n    try {\n      for (var _b = __values(this.codewords), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var codeword = _c.value;\n\n        if (codeword == null) {\n          formatter.format('%3d:    |   %n', row++);\n          continue;\n        }\n\n        formatter.format('%3d: %3d|%3d%n', row++, codeword.getRowNumber(), codeword.getValue());\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n\n    return formatter.toString();\n  };\n\n  DetectionResultColumn.MAX_NEARBY_DISTANCE = 5;\n  return DetectionResultColumn;\n}();\n\nexports.default = DetectionResultColumn;","map":{"version":3,"sources":["../../../../src/core/pdf417/decoder/DetectionResultColumn.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;AAcG;;;;;;;;;;;;;;;;;;;IAEH;AAEA;;AACA,IAAA,WAAA,GAAA,OAAA,CAAA,sBAAA,CAAA;;AAGA,IAAA,aAAA,GAAA,OAAA,CAAA,eAAA,CAAA;AAIA;;AAEG;;;AACH,IAAA,qBAAA;AAAA;AAAA,YAAA;AAOI,WAAA,qBAAA,CAAY,WAAZ,EAAoC;AAChC,SAAK,WAAL,GAAmB,IAAI,aAAA,CAAA,OAAJ,CAAgB,WAAhB,CAAnB,CADgC,CAEhC;;AACA,SAAK,SAAL,GAAiB,IAAI,KAAJ,CAAoB,WAAW,CAAC,OAAZ,KAAwB,WAAW,CAAC,OAAZ,EAAxB,GAAgD,CAApE,CAAjB;AACH;AAED;;;AAAW,EAAA,qBAAA,CAAA,SAAA,CAAA,iBAAA,GAAA,UAAkB,QAAlB,EAA+B;AACtC,QAAI,QAAQ,GAAG,KAAK,WAAL,CAAiB,QAAjB,CAAf;;AACA,QAAI,QAAQ,IAAI,IAAhB,EAAsB;AAClB,aAAO,QAAP;AACH;;AACD,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,qBAAqB,CAAC,mBAA1C,EAA+D,CAAC,EAAhE,EAAoE;AAChE,UAAI,YAAY,GAAG,KAAK,uBAAL,CAA6B,QAA7B,IAAyC,CAA5D;;AACA,UAAI,YAAY,IAAI,CAApB,EAAuB;AACnB,QAAA,QAAQ,GAAG,KAAK,SAAL,CAAe,YAAf,CAAX;;AACA,YAAI,QAAQ,IAAI,IAAhB,EAAsB;AAClB,iBAAO,QAAP;AACH;AACJ;;AACD,MAAA,YAAY,GAAG,KAAK,uBAAL,CAA6B,QAA7B,IAAyC,CAAxD;;AACA,UAAI,YAAY,GAAG,KAAK,SAAL,CAAe,MAAlC,EAA0C;AACtC,QAAA,QAAQ,GAAG,KAAK,SAAL,CAAe,YAAf,CAAX;;AACA,YAAI,QAAQ,IAAI,IAAhB,EAAsB;AAClB,iBAAO,QAAP;AACH;AACJ;AACJ;;AACD,WAAO,IAAP;AACH,GAtBU;AAwBX;;;AAAc,EAAA,qBAAA,CAAA,SAAA,CAAA,uBAAA,GAAA,UAAwB,QAAxB,EAAqC;AAC/C,WAAO,QAAQ,GAAG,KAAK,WAAL,CAAiB,OAAjB,EAAlB;AACH,GAFa;AAId;;;AAAe,EAAA,qBAAA,CAAA,SAAA,CAAA,WAAA,GAAA,UAAY,QAAZ,EAA2B,QAA3B,EAA6C;AACxD,SAAK,SAAL,CAAe,KAAK,uBAAL,CAA6B,QAA7B,CAAf,IAAyD,QAAzD;AACH,GAFc;AAInB;;;AAAU,EAAA,qBAAA,CAAA,SAAA,CAAA,WAAA,GAAA,UAAY,QAAZ,EAAyB;AAC3B,WAAO,KAAK,SAAL,CAAe,KAAK,uBAAL,CAA6B,QAA7B,CAAf,CAAP;AACH,GAFK;AAIV;;;AAAU,EAAA,qBAAA,CAAA,SAAA,CAAA,cAAA,GAAA,YAAA;AACF,WAAO,KAAK,WAAZ;AACH,GAFK;AAIV;;;AAAU,EAAA,qBAAA,CAAA,SAAA,CAAA,YAAA,GAAA,YAAA;AACF,WAAO,KAAK,SAAZ;AACH,GAFK,CArDV,CAyDI;;;AACO,EAAA,qBAAA,CAAA,SAAA,CAAA,QAAA,GAAP,YAAA;;;AACI,QAAM,SAAS,GAAG,IAAI,WAAA,CAAA,OAAJ,EAAlB;AACA,QAAI,GAAG,GAAG,CAAV;;;AACA,WAAuB,IAAA,EAAA,GAAA,QAAA,CAAA,KAAK,SAAL,CAAA,EAAc,EAAA,GAAA,EAAA,CAAA,IAAA,EAArC,EAAqC,CAAA,EAAA,CAAA,IAArC,EAAqC,EAAA,GAAA,EAAA,CAAA,IAAA,EAArC,EAAuC;AAAlC,YAAM,QAAQ,GAAA,EAAA,CAAA,KAAd;;AACD,YAAI,QAAQ,IAAI,IAAhB,EAAsB;AAClB,UAAA,SAAS,CAAC,MAAV,CAAiB,gBAAjB,EAAmC,GAAG,EAAtC;AACA;AACH;;AACD,QAAA,SAAS,CAAC,MAAV,CAAiB,gBAAjB,EAAmC,GAAG,EAAtC,EAA0C,QAAQ,CAAC,YAAT,EAA1C,EAAmE,QAAQ,CAAC,QAAT,EAAnE;AACH;;;;;;;;;;;;;AACD,WAAO,SAAS,CAAC,QAAV,EAAP;AAEH,GAZM;;AAxDkB,EAAA,qBAAA,CAAA,mBAAA,GAA2B,CAA3B;AAsE7B,SAAA,qBAAA;AAAC,CAxED,EAAA;;kBAAqB,qB","sourceRoot":"","sourcesContent":["\"use strict\";\n/*\n * Copyright 2013 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __values = (this && this.__values) || function (o) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\n    if (m) return m.call(o);\n    return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// package com.google.zxing.pdf417.decoder;\n// import java.util.Formatter;\nvar Formatter_1 = require(\"../../util/Formatter\");\nvar BoundingBox_1 = require(\"./BoundingBox\");\n/**\n * @author Guenther Grau\n */\nvar DetectionResultColumn = /** @class */ (function () {\n    function DetectionResultColumn(boundingBox) {\n        this.boundingBox = new BoundingBox_1.default(boundingBox);\n        // this.codewords = new Codeword[boundingBox.getMaxY() - boundingBox.getMinY() + 1];\n        this.codewords = new Array(boundingBox.getMaxY() - boundingBox.getMinY() + 1);\n    }\n    /*final*/ DetectionResultColumn.prototype.getCodewordNearby = function (imageRow) {\n        var codeword = this.getCodeword(imageRow);\n        if (codeword != null) {\n            return codeword;\n        }\n        for (var i = 1; i < DetectionResultColumn.MAX_NEARBY_DISTANCE; i++) {\n            var nearImageRow = this.imageRowToCodewordIndex(imageRow) - i;\n            if (nearImageRow >= 0) {\n                codeword = this.codewords[nearImageRow];\n                if (codeword != null) {\n                    return codeword;\n                }\n            }\n            nearImageRow = this.imageRowToCodewordIndex(imageRow) + i;\n            if (nearImageRow < this.codewords.length) {\n                codeword = this.codewords[nearImageRow];\n                if (codeword != null) {\n                    return codeword;\n                }\n            }\n        }\n        return null;\n    };\n    /*final int*/ DetectionResultColumn.prototype.imageRowToCodewordIndex = function (imageRow) {\n        return imageRow - this.boundingBox.getMinY();\n    };\n    /*final void*/ DetectionResultColumn.prototype.setCodeword = function (imageRow, codeword) {\n        this.codewords[this.imageRowToCodewordIndex(imageRow)] = codeword;\n    };\n    /*final*/ DetectionResultColumn.prototype.getCodeword = function (imageRow) {\n        return this.codewords[this.imageRowToCodewordIndex(imageRow)];\n    };\n    /*final*/ DetectionResultColumn.prototype.getBoundingBox = function () {\n        return this.boundingBox;\n    };\n    /*final*/ DetectionResultColumn.prototype.getCodewords = function () {\n        return this.codewords;\n    };\n    // @Override\n    DetectionResultColumn.prototype.toString = function () {\n        var e_1, _a;\n        var formatter = new Formatter_1.default();\n        var row = 0;\n        try {\n            for (var _b = __values(this.codewords), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var codeword = _c.value;\n                if (codeword == null) {\n                    formatter.format('%3d:    |   %n', row++);\n                    continue;\n                }\n                formatter.format('%3d: %3d|%3d%n', row++, codeword.getRowNumber(), codeword.getValue());\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        return formatter.toString();\n    };\n    DetectionResultColumn.MAX_NEARBY_DISTANCE = 5;\n    return DetectionResultColumn;\n}());\nexports.default = DetectionResultColumn;\n//# sourceMappingURL=DetectionResultColumn.js.map"]},"metadata":{},"sourceType":"script"}