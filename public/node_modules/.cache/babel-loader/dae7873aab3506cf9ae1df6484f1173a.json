{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2007 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*namespace com.google.zxing.qrcode.detector {*/\n\nvar ResultPoint_1 = require(\"../../ResultPoint\");\n/**\n * <p>Encapsulates an alignment pattern, which are the smaller square patterns found in\n * all but the simplest QR Codes.</p>\n *\n * @author Sean Owen\n */\n\n\nvar AlignmentPattern =\n/** @class */\nfunction (_super) {\n  __extends(AlignmentPattern, _super);\n\n  function AlignmentPattern(posX\n  /*float*/\n  , posY\n  /*float*/\n  , estimatedModuleSize\n  /*float*/\n  ) {\n    var _this = _super.call(this, posX, posY) || this;\n\n    _this.estimatedModuleSize = estimatedModuleSize;\n    return _this;\n  }\n  /**\n   * <p>Determines if this alignment pattern \"about equals\" an alignment pattern at the stated\n   * position and size -- meaning, it is at nearly the same center with nearly the same size.</p>\n   */\n\n\n  AlignmentPattern.prototype.aboutEquals = function (moduleSize\n  /*float*/\n  , i\n  /*float*/\n  , j\n  /*float*/\n  ) {\n    if (Math.abs(i - this.getY()) <= moduleSize && Math.abs(j - this.getX()) <= moduleSize) {\n      var moduleSizeDiff = Math.abs(moduleSize - this.estimatedModuleSize);\n      return moduleSizeDiff <= 1.0 || moduleSizeDiff <= this.estimatedModuleSize;\n    }\n\n    return false;\n  };\n  /**\n   * Combines this object's current estimate of a finder pattern position and module size\n   * with a new estimate. It returns a new {@code FinderPattern} containing an average of the two.\n   */\n\n\n  AlignmentPattern.prototype.combineEstimate = function (i\n  /*float*/\n  , j\n  /*float*/\n  , newModuleSize\n  /*float*/\n  ) {\n    var combinedX = (this.getX() + j) / 2.0;\n    var combinedY = (this.getY() + i) / 2.0;\n    var combinedModuleSize = (this.estimatedModuleSize + newModuleSize) / 2.0;\n    return new AlignmentPattern(combinedX, combinedY, combinedModuleSize);\n  };\n\n  return AlignmentPattern;\n}(ResultPoint_1.default);\n\nexports.default = AlignmentPattern;","map":{"version":3,"sources":["../../../../src/core/qrcode/detector/AlignmentPattern.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;AAcG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEH;;AAEA,IAAA,aAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;AAEA;;;;;AAKG;;;AACH,IAAA,gBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA8C,EAAA,SAAA,CAAA,gBAAA,EAAA,MAAA,CAAA;;AAE1C,WAAA,gBAAA,CAAmB;AAAY;AAA/B,IAA0C;AAAY;AAAtD,IAAyE;AAA2B;AAApG,IAA6G;AAA7G,QAAA,KAAA,GACI,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,IAAN,EAAY,IAAZ,KAAiB,IADrB;;AAAyE,IAAA,KAAA,CAAA,mBAAA,GAAA,mBAAA;;AAExE;AAED;;;AAGG;;;AACI,EAAA,gBAAA,CAAA,SAAA,CAAA,WAAA,GAAP,UAAmB;AAAkB;AAArC,IAAgD;AAAS;AAAzD,IAAoE;AAAS;AAA7E,IAAsF;AAClF,QAAI,IAAI,CAAC,GAAL,CAAS,CAAC,GAAG,KAAK,IAAL,EAAb,KAA6B,UAA7B,IAA2C,IAAI,CAAC,GAAL,CAAS,CAAC,GAAG,KAAK,IAAL,EAAb,KAA6B,UAA5E,EAAwF;AACpF,UAAM,cAAc,GAAqB,IAAI,CAAC,GAAL,CAAS,UAAU,GAAG,KAAK,mBAA3B,CAAzC;AACA,aAAO,cAAc,IAAI,GAAlB,IAAyB,cAAc,IAAI,KAAK,mBAAvD;AACH;;AACD,WAAO,KAAP;AACH,GANM;AAQP;;;AAGG;;;AACI,EAAA,gBAAA,CAAA,SAAA,CAAA,eAAA,GAAP,UAAuB;AAAS;AAAhC,IAA2C;AAAS;AAApD,IAA+D;AAAqB;AAApF,IAA6F;AACzF,QAAM,SAAS,GAAqB,CAAC,KAAK,IAAL,KAAc,CAAf,IAAoB,GAAxD;AACA,QAAM,SAAS,GAAqB,CAAC,KAAK,IAAL,KAAc,CAAf,IAAoB,GAAxD;AACA,QAAM,kBAAkB,GAAqB,CAAC,KAAK,mBAAL,GAA2B,aAA5B,IAA6C,GAA1F;AACA,WAAO,IAAI,gBAAJ,CAAqB,SAArB,EAAgC,SAAhC,EAA2C,kBAA3C,CAAP;AACH,GALM;;AAOX,SAAA,gBAAA;AAAC,CA7BD,CAA8C,aAAA,CAAA,OAA9C,CAAA","sourceRoot":"","sourcesContent":["\"use strict\";\n/*\n * Copyright 2007 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/*namespace com.google.zxing.qrcode.detector {*/\nvar ResultPoint_1 = require(\"../../ResultPoint\");\n/**\n * <p>Encapsulates an alignment pattern, which are the smaller square patterns found in\n * all but the simplest QR Codes.</p>\n *\n * @author Sean Owen\n */\nvar AlignmentPattern = /** @class */ (function (_super) {\n    __extends(AlignmentPattern, _super);\n    function AlignmentPattern(posX /*float*/, posY /*float*/, estimatedModuleSize /*float*/) {\n        var _this = _super.call(this, posX, posY) || this;\n        _this.estimatedModuleSize = estimatedModuleSize;\n        return _this;\n    }\n    /**\n     * <p>Determines if this alignment pattern \"about equals\" an alignment pattern at the stated\n     * position and size -- meaning, it is at nearly the same center with nearly the same size.</p>\n     */\n    AlignmentPattern.prototype.aboutEquals = function (moduleSize /*float*/, i /*float*/, j /*float*/) {\n        if (Math.abs(i - this.getY()) <= moduleSize && Math.abs(j - this.getX()) <= moduleSize) {\n            var moduleSizeDiff = Math.abs(moduleSize - this.estimatedModuleSize);\n            return moduleSizeDiff <= 1.0 || moduleSizeDiff <= this.estimatedModuleSize;\n        }\n        return false;\n    };\n    /**\n     * Combines this object's current estimate of a finder pattern position and module size\n     * with a new estimate. It returns a new {@code FinderPattern} containing an average of the two.\n     */\n    AlignmentPattern.prototype.combineEstimate = function (i /*float*/, j /*float*/, newModuleSize /*float*/) {\n        var combinedX = (this.getX() + j) / 2.0;\n        var combinedY = (this.getY() + i) / 2.0;\n        var combinedModuleSize = (this.estimatedModuleSize + newModuleSize) / 2.0;\n        return new AlignmentPattern(combinedX, combinedY, combinedModuleSize);\n    };\n    return AlignmentPattern;\n}(ResultPoint_1.default));\nexports.default = AlignmentPattern;\n//# sourceMappingURL=AlignmentPattern.js.map"]},"metadata":{},"sourceType":"script"}