{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { IonicNativePlugin, cordova } from '@ionic-native/core';\n\nvar BarcodeScannerOriginal =\n/** @class */\nfunction (_super) {\n  __extends(BarcodeScannerOriginal, _super);\n\n  function BarcodeScannerOriginal() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.Encode = {\n      TEXT_TYPE: 'TEXT_TYPE',\n      EMAIL_TYPE: 'EMAIL_TYPE',\n      PHONE_TYPE: 'PHONE_TYPE',\n      SMS_TYPE: 'SMS_TYPE'\n    };\n    return _this;\n  }\n\n  BarcodeScannerOriginal.prototype.scan = function (options) {\n    return cordova(this, \"scan\", {\n      \"callbackOrder\": \"reverse\"\n    }, arguments);\n  };\n\n  BarcodeScannerOriginal.prototype.encode = function (type, data) {\n    return cordova(this, \"encode\", {}, arguments);\n  };\n\n  BarcodeScannerOriginal.pluginName = \"BarcodeScanner\";\n  BarcodeScannerOriginal.plugin = \"phonegap-plugin-barcodescanner\";\n  BarcodeScannerOriginal.pluginRef = \"cordova.plugins.barcodeScanner\";\n  BarcodeScannerOriginal.repo = \"https://github.com/phonegap/phonegap-plugin-barcodescanner\";\n  BarcodeScannerOriginal.platforms = [\"Android\", \"BlackBerry 10\", \"Browser\", \"iOS\", \"Windows\"];\n  return BarcodeScannerOriginal;\n}(IonicNativePlugin);\n\nvar BarcodeScanner = new BarcodeScannerOriginal();\nexport { BarcodeScanner };","map":{"version":3,"sources":["../../../../src/@ionic-native/plugins/barcode-scanner/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AACA,SAAO,iBAAP,EAAO,OAAP,QAAmD,oBAAnD;;;;;AA8GoC,EAAA,SAAA,CAAA,sBAAA,EAAiB,MAAjB,CAAA;;;;;AAClC,IAAA,KAAA,CAAA,MAAA,GAKI;AACF,MAAA,SAAS,EAAE,WADT;AAEF,MAAA,UAAU,EAAE,YAFV;AAGF,MAAA,UAAU,EAAE,YAHV;AAIF,MAAA,QAAQ,EAAE;AAJR,KALJ;;;;AAoBA,EAAA,sBAAA,CAAA,SAAA,CAAI,IAAJ,GAAI,UAAgC,OAAhC,EAAgC;AAAA,WAAA,OAAA,CAAA,IAAA,EAAA,MAAA,EAAA;AAAA,uBAAA;AAAA,KAAA,EAAA,SAAA,CAAA;AAAA,GAApC;;AAYA,EAAA,sBAAA,CAAA,SAAA,CAAM,MAAN,GAAM,UAAe,IAAf,EAAwB,IAAxB,EAAwB;AAAA,WAAA,OAAA,CAAA,IAAA,EAAA,QAAA,EAAA,EAAA,EAAA,SAAA,CAAA;AAAA,GAA9B;;;;;;;SAhJF,sB;EA+GoC,iB;;IAAvB,cAAA,GAAA,IAAc,sBAAd,E","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cordova, IonicNativePlugin, Plugin } from '@ionic-native/core';\n\nexport interface BarcodeScannerOptions {\n  /**\n   * Prefer front camera. Supported on iOS and Android.\n   */\n  preferFrontCamera?: boolean;\n\n  /**\n   * Show flip camera button. Supported on iOS and Android.\n   */\n  showFlipCameraButton?: boolean;\n\n  /**\n   * Show torch button. Supported on iOS and Android.\n   */\n  showTorchButton?: boolean;\n\n  /**\n   * Disable animations. Supported on iOS only.\n   */\n  disableAnimations?: boolean;\n\n  /**\n   * Disable success beep. Supported on iOS only.\n   */\n  disableSuccessBeep?: boolean;\n\n  /**\n   * Prompt text. Supported on Android only.\n   */\n  prompt?: string;\n\n  /**\n   * Formats separated by commas. Defaults to all formats except `PDF_417` and `RSS_EXPANDED`.\n   */\n  formats?: string;\n\n  /**\n   * Orientation. Supported on Android only. Can be set to `portrait` or `landscape`. Defaults to none so the user can rotate the phone and pick an orientation.\n   */\n  orientation?: string;\n\n  /**\n   * Launch with the torch switched on (if available). Supported on Android only.\n   */\n  torchOn?: boolean;\n\n  /**\n   * Display scanned text for X ms. 0 suppresses it entirely, default 1500. Supported on Android only.\n   */\n  resultDisplayDuration?: number;\n}\n\nexport interface BarcodeScanResult {\n  format:\n    | 'QR_CODE'\n    | 'DATA_MATRIX'\n    | 'UPC_E'\n    | 'UPC_A'\n    | 'EAN_8'\n    | 'EAN_13'\n    | 'CODE_128'\n    | 'CODE_39'\n    | 'CODE_93'\n    | 'CODABAR'\n    | 'ITF'\n    | 'RSS14'\n    | 'RSS_EXPANDED'\n    | 'PDF_417'\n    | 'AZTEC'\n    | 'MSI';\n  cancelled: boolean;\n  text: string;\n}\n\n/**\n * @name Barcode Scanner\n * @description\n * The Barcode Scanner Plugin opens a camera view and automatically scans a barcode, returning the data back to you.\n *\n * Requires Cordova plugin: `phonegap-plugin-barcodescanner`. For more info, please see the [BarcodeScanner plugin docs](https://github.com/phonegap/phonegap-plugin-barcodescanner).\n *\n * @usage\n * ```typescript\n * import { BarcodeScanner } from '@ionic-native/barcode-scanner/ngx';\n *\n * constructor(private barcodeScanner: BarcodeScanner) { }\n *\n * ...\n *\n *\n * this.barcodeScanner.scan().then(barcodeData => {\n *  console.log('Barcode data', barcodeData);\n * }).catch(err => {\n * \tconsole.log('Error', err);\n * });\n * ```\n * @interfaces\n * BarcodeScannerOptions\n * BarcodeScanResult\n */\n@Plugin({\n  pluginName: 'BarcodeScanner',\n  plugin: 'phonegap-plugin-barcodescanner',\n  pluginRef: 'cordova.plugins.barcodeScanner',\n  repo: 'https://github.com/phonegap/phonegap-plugin-barcodescanner',\n  platforms: ['Android', 'BlackBerry 10', 'Browser', 'iOS', 'Windows'],\n})\n@Injectable()\nexport class BarcodeScanner extends IonicNativePlugin {\n  Encode: {\n    TEXT_TYPE: string;\n    EMAIL_TYPE: string;\n    PHONE_TYPE: string;\n    SMS_TYPE: string;\n  } = {\n    TEXT_TYPE: 'TEXT_TYPE',\n    EMAIL_TYPE: 'EMAIL_TYPE',\n    PHONE_TYPE: 'PHONE_TYPE',\n    SMS_TYPE: 'SMS_TYPE',\n  };\n\n  /**\n   * Open the barcode scanner.\n   * @param {BarcodeScannerOptions} [options] Optional options to pass to the scanner\n   * @returns {Promise<any>} Returns a Promise that resolves with scanner data, or rejects with an error.\n   */\n  @Cordova({\n    callbackOrder: 'reverse',\n  })\n  scan(options?: BarcodeScannerOptions): Promise<BarcodeScanResult> {\n    return;\n  }\n\n  /**\n   * Encodes data into a barcode.\n   * NOTE: not well supported on Android\n   * @param {string} type Type of encoding\n   * @param {any} data Data to encode\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  encode(type: string, data: any): Promise<any> {\n    return;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}