{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2008 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar IllegalArgumentException_1 = require(\"../../IllegalArgumentException\");\n/**\n * @author Satoru Takabayashi\n * @author Daniel Switkin\n * @author Sean Owen\n */\n\n\nvar MaskUtil =\n/** @class */\nfunction () {\n  function MaskUtil() {// do nothing\n  }\n  /**\n   * Apply mask penalty rule 1 and return the penalty. Find repetitive cells with the same color and\n   * give penalty to them. Example: 00000 or 11111.\n   */\n\n\n  MaskUtil.applyMaskPenaltyRule1 = function (matrix) {\n    return MaskUtil.applyMaskPenaltyRule1Internal(matrix, true) + MaskUtil.applyMaskPenaltyRule1Internal(matrix, false);\n  };\n  /**\n   * Apply mask penalty rule 2 and return the penalty. Find 2x2 blocks with the same color and give\n   * penalty to them. This is actually equivalent to the spec's rule, which is to find MxN blocks and give a\n   * penalty proportional to (M-1)x(N-1), because this is the number of 2x2 blocks inside such a block.\n   */\n\n\n  MaskUtil.applyMaskPenaltyRule2 = function (matrix) {\n    var penalty = 0;\n    var array = matrix.getArray();\n    var width = matrix.getWidth();\n    var height = matrix.getHeight();\n\n    for (var y = 0; y < height - 1; y++) {\n      var arrayY = array[y];\n\n      for (var x = 0; x < width - 1; x++) {\n        var value = arrayY[x];\n\n        if (value === arrayY[x + 1] && value === array[y + 1][x] && value === array[y + 1][x + 1]) {\n          penalty++;\n        }\n      }\n    }\n\n    return MaskUtil.N2 * penalty;\n  };\n  /**\n   * Apply mask penalty rule 3 and return the penalty. Find consecutive runs of 1:1:3:1:1:4\n   * starting with black, or 4:1:1:3:1:1 starting with white, and give penalty to them.  If we\n   * find patterns like 000010111010000, we give penalty once.\n   */\n\n\n  MaskUtil.applyMaskPenaltyRule3 = function (matrix) {\n    var numPenalties = 0;\n    var array = matrix.getArray();\n    var width = matrix.getWidth();\n    var height = matrix.getHeight();\n\n    for (var y = 0; y < height; y++) {\n      for (var x = 0; x < width; x++) {\n        var arrayY = array[y]; // We can at least optimize this access\n\n        if (x + 6 < width && arrayY[x] === 1 && arrayY[x + 1] === 0 && arrayY[x + 2] === 1 && arrayY[x + 3] === 1 && arrayY[x + 4] === 1 && arrayY[x + 5] === 0 && arrayY[x + 6] === 1 && (MaskUtil.isWhiteHorizontal(arrayY, x - 4, x) || MaskUtil.isWhiteHorizontal(arrayY, x + 7, x + 11))) {\n          numPenalties++;\n        }\n\n        if (y + 6 < height && array[y][x] === 1 && array[y + 1][x] === 0 && array[y + 2][x] === 1 && array[y + 3][x] === 1 && array[y + 4][x] === 1 && array[y + 5][x] === 0 && array[y + 6][x] === 1 && (MaskUtil.isWhiteVertical(array, x, y - 4, y) || MaskUtil.isWhiteVertical(array, x, y + 7, y + 11))) {\n          numPenalties++;\n        }\n      }\n    }\n\n    return numPenalties * MaskUtil.N3;\n  };\n\n  MaskUtil.isWhiteHorizontal = function (rowArray, from\n  /*int*/\n  , to\n  /*int*/\n  ) {\n    from = Math.max(from, 0);\n    to = Math.min(to, rowArray.length);\n\n    for (var i = from; i < to; i++) {\n      if (rowArray[i] === 1) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  MaskUtil.isWhiteVertical = function (array, col\n  /*int*/\n  , from\n  /*int*/\n  , to\n  /*int*/\n  ) {\n    from = Math.max(from, 0);\n    to = Math.min(to, array.length);\n\n    for (var i = from; i < to; i++) {\n      if (array[i][col] === 1) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n  /**\n   * Apply mask penalty rule 4 and return the penalty. Calculate the ratio of dark cells and give\n   * penalty if the ratio is far from 50%. It gives 10 penalty for 5% distance.\n   */\n\n\n  MaskUtil.applyMaskPenaltyRule4 = function (matrix) {\n    var numDarkCells = 0;\n    var array = matrix.getArray();\n    var width = matrix.getWidth();\n    var height = matrix.getHeight();\n\n    for (var y = 0; y < height; y++) {\n      var arrayY = array[y];\n\n      for (var x = 0; x < width; x++) {\n        if (arrayY[x] === 1) {\n          numDarkCells++;\n        }\n      }\n    }\n\n    var numTotalCells = matrix.getHeight() * matrix.getWidth();\n    var fivePercentVariances = Math.floor(Math.abs(numDarkCells * 2 - numTotalCells) * 10 / numTotalCells);\n    return fivePercentVariances * MaskUtil.N4;\n  };\n  /**\n   * Return the mask bit for \"getMaskPattern\" at \"x\" and \"y\". See 8.8 of JISX0510:2004 for mask\n   * pattern conditions.\n   */\n\n\n  MaskUtil.getDataMaskBit = function (maskPattern\n  /*int*/\n  , x\n  /*int*/\n  , y\n  /*int*/\n  ) {\n    var intermediate;\n    /*int*/\n\n    var temp;\n    /*int*/\n\n    switch (maskPattern) {\n      case 0:\n        intermediate = y + x & 0x1;\n        break;\n\n      case 1:\n        intermediate = y & 0x1;\n        break;\n\n      case 2:\n        intermediate = x % 3;\n        break;\n\n      case 3:\n        intermediate = (y + x) % 3;\n        break;\n\n      case 4:\n        intermediate = Math.floor(y / 2) + Math.floor(x / 3) & 0x1;\n        break;\n\n      case 5:\n        temp = y * x;\n        intermediate = (temp & 0x1) + temp % 3;\n        break;\n\n      case 6:\n        temp = y * x;\n        intermediate = (temp & 0x1) + temp % 3 & 0x1;\n        break;\n\n      case 7:\n        temp = y * x;\n        intermediate = temp % 3 + (y + x & 0x1) & 0x1;\n        break;\n\n      default:\n        throw new IllegalArgumentException_1.default('Invalid mask pattern: ' + maskPattern);\n    }\n\n    return intermediate === 0;\n  };\n  /**\n   * Helper function for applyMaskPenaltyRule1. We need this for doing this calculation in both\n   * vertical and horizontal orders respectively.\n   */\n\n\n  MaskUtil.applyMaskPenaltyRule1Internal = function (matrix, isHorizontal) {\n    var penalty = 0;\n    var iLimit = isHorizontal ? matrix.getHeight() : matrix.getWidth();\n    var jLimit = isHorizontal ? matrix.getWidth() : matrix.getHeight();\n    var array = matrix.getArray();\n\n    for (var i = 0; i < iLimit; i++) {\n      var numSameBitCells = 0;\n      var prevBit = -1;\n\n      for (var j = 0; j < jLimit; j++) {\n        var bit = isHorizontal ? array[i][j] : array[j][i];\n\n        if (bit === prevBit) {\n          numSameBitCells++;\n        } else {\n          if (numSameBitCells >= 5) {\n            penalty += MaskUtil.N1 + (numSameBitCells - 5);\n          }\n\n          numSameBitCells = 1; // Include the cell itself.\n\n          prevBit = bit;\n        }\n      }\n\n      if (numSameBitCells >= 5) {\n        penalty += MaskUtil.N1 + (numSameBitCells - 5);\n      }\n    }\n\n    return penalty;\n  }; // Penalty weights from section 6.8.2.1\n\n\n  MaskUtil.N1 = 3;\n  MaskUtil.N2 = 3;\n  MaskUtil.N3 = 40;\n  MaskUtil.N4 = 10;\n  return MaskUtil;\n}();\n\nexports.default = MaskUtil;","map":{"version":3,"sources":["../../../../src/core/qrcode/encoder/MaskUtil.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;AAcG;;;;;;AAMH,IAAA,0BAAA,GAAA,OAAA,CAAA,gCAAA,CAAA;AAEA;;;;AAIG;;;AACH,IAAA,QAAA;AAAA;AAAA,YAAA;AAQI,WAAA,QAAA,GAAA,CACI;AACH;AAED;;;AAGG;;;AACW,EAAA,QAAA,CAAA,qBAAA,GAAd,UAAoC,MAApC,EAAsD;AAClD,WAAO,QAAQ,CAAC,6BAAT,CAAuC,MAAvC,EAA+C,IAA/C,IAAuD,QAAQ,CAAC,6BAAT,CAAuC,MAAvC,EAA+C,KAA/C,CAA9D;AACH,GAFa;AAId;;;;AAIG;;;AACW,EAAA,QAAA,CAAA,qBAAA,GAAd,UAAoC,MAApC,EAAsD;AAClD,QAAI,OAAO,GAAG,CAAd;AACA,QAAM,KAAK,GAAsB,MAAM,CAAC,QAAP,EAAjC;AACA,QAAM,KAAK,GAAmB,MAAM,CAAC,QAAP,EAA9B;AACA,QAAM,MAAM,GAAmB,MAAM,CAAC,SAAP,EAA/B;;AACA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,MAAM,GAAG,CAA7B,EAAgC,CAAC,EAAjC,EAAqC;AACjC,UAAM,MAAM,GAAG,KAAK,CAAC,CAAD,CAApB;;AACA,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,GAAG,CAA5B,EAA+B,CAAC,EAAhC,EAAoC;AAChC,YAAM,KAAK,GAAG,MAAM,CAAC,CAAD,CAApB;;AACA,YAAI,KAAK,KAAK,MAAM,CAAC,CAAC,GAAG,CAAL,CAAhB,IAA2B,KAAK,KAAK,KAAK,CAAC,CAAC,GAAG,CAAL,CAAL,CAAa,CAAb,CAArC,IAAwD,KAAK,KAAK,KAAK,CAAC,CAAC,GAAG,CAAL,CAAL,CAAa,CAAC,GAAG,CAAjB,CAAtE,EAA2F;AACvF,UAAA,OAAO;AACV;AACJ;AACJ;;AACD,WAAO,QAAQ,CAAC,EAAT,GAAc,OAArB;AACH,GAfa;AAiBd;;;;AAIG;;;AACW,EAAA,QAAA,CAAA,qBAAA,GAAd,UAAoC,MAApC,EAAsD;AAClD,QAAI,YAAY,GAAG,CAAnB;AACA,QAAM,KAAK,GAAsB,MAAM,CAAC,QAAP,EAAjC;AACA,QAAM,KAAK,GAAmB,MAAM,CAAC,QAAP,EAA9B;AACA,QAAM,MAAM,GAAmB,MAAM,CAAC,SAAP,EAA/B;;AACA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,MAApB,EAA4B,CAAC,EAA7B,EAAiC;AAC7B,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAApB,EAA2B,CAAC,EAA5B,EAAgC;AAC5B,YAAM,MAAM,GAAe,KAAK,CAAC,CAAD,CAAhC,CAD4B,CACU;;AACtC,YAAI,CAAC,GAAG,CAAJ,GAAQ,KAAR,IACA,MAAM,CAAC,CAAD,CAAN,KAAc,CADd,IAEA,MAAM,CAAC,CAAC,GAAG,CAAL,CAAN,KAAkB,CAFlB,IAGA,MAAM,CAAC,CAAC,GAAG,CAAL,CAAN,KAAkB,CAHlB,IAIA,MAAM,CAAC,CAAC,GAAG,CAAL,CAAN,KAAkB,CAJlB,IAKA,MAAM,CAAC,CAAC,GAAG,CAAL,CAAN,KAAkB,CALlB,IAMA,MAAM,CAAC,CAAC,GAAG,CAAL,CAAN,KAAkB,CANlB,IAOA,MAAM,CAAC,CAAC,GAAG,CAAL,CAAN,KAAkB,CAPlB,KAQC,QAAQ,CAAC,iBAAT,CAA2B,MAA3B,EAAmC,CAAC,GAAG,CAAvC,EAA0C,CAA1C,KAAgD,QAAQ,CAAC,iBAAT,CAA2B,MAA3B,EAAmC,CAAC,GAAG,CAAvC,EAA0C,CAAC,GAAG,EAA9C,CARjD,CAAJ,EAQyG;AACrG,UAAA,YAAY;AACf;;AACD,YAAI,CAAC,GAAG,CAAJ,GAAQ,MAAR,IACA,KAAK,CAAC,CAAD,CAAL,CAAS,CAAT,MAAgB,CADhB,IAEA,KAAK,CAAC,CAAC,GAAG,CAAL,CAAL,CAAa,CAAb,MAAoB,CAFpB,IAGA,KAAK,CAAC,CAAC,GAAG,CAAL,CAAL,CAAa,CAAb,MAAoB,CAHpB,IAIA,KAAK,CAAC,CAAC,GAAG,CAAL,CAAL,CAAa,CAAb,MAAoB,CAJpB,IAKA,KAAK,CAAC,CAAC,GAAG,CAAL,CAAL,CAAa,CAAb,MAAoB,CALpB,IAMA,KAAK,CAAC,CAAC,GAAG,CAAL,CAAL,CAAa,CAAb,MAAoB,CANpB,IAOA,KAAK,CAAC,CAAC,GAAG,CAAL,CAAL,CAAa,CAAb,MAAoB,CAPpB,KAQC,QAAQ,CAAC,eAAT,CAAyB,KAAzB,EAAgC,CAAhC,EAAmC,CAAC,GAAG,CAAvC,EAA0C,CAA1C,KAAgD,QAAQ,CAAC,eAAT,CAAyB,KAAzB,EAAgC,CAAhC,EAAmC,CAAC,GAAG,CAAvC,EAA0C,CAAC,GAAG,EAA9C,CARjD,CAAJ,EAQyG;AACrG,UAAA,YAAY;AACf;AACJ;AACJ;;AACD,WAAO,YAAY,GAAG,QAAQ,CAAC,EAA/B;AACH,GAjCa;;AAmCC,EAAA,QAAA,CAAA,iBAAA,GAAf,UAAiC,QAAjC,EAAuD;AAAa;AAApE,IAA6E;AAAW;AAAxF,IAA+F;AAC3F,IAAA,IAAI,GAAG,IAAI,CAAC,GAAL,CAAS,IAAT,EAAe,CAAf,CAAP;AACA,IAAA,EAAE,GAAG,IAAI,CAAC,GAAL,CAAS,EAAT,EAAa,QAAQ,CAAC,MAAtB,CAAL;;AACA,SAAK,IAAI,CAAC,GAAG,IAAb,EAAmB,CAAC,GAAG,EAAvB,EAA2B,CAAC,EAA5B,EAAgC;AAC5B,UAAI,QAAQ,CAAC,CAAD,CAAR,KAAgB,CAApB,EAAuB;AACnB,eAAO,KAAP;AACH;AACJ;;AACD,WAAO,IAAP;AACH,GATc;;AAWA,EAAA,QAAA,CAAA,eAAA,GAAf,UAA+B,KAA/B,EAAoD;AAAY;AAAhE,IAAyE;AAAa;AAAtF,IAA+F;AAAW;AAA1G,IAAiH;AAC7G,IAAA,IAAI,GAAG,IAAI,CAAC,GAAL,CAAS,IAAT,EAAe,CAAf,CAAP;AACA,IAAA,EAAE,GAAG,IAAI,CAAC,GAAL,CAAS,EAAT,EAAa,KAAK,CAAC,MAAnB,CAAL;;AACA,SAAK,IAAI,CAAC,GAAG,IAAb,EAAmB,CAAC,GAAG,EAAvB,EAA2B,CAAC,EAA5B,EAAgC;AAC5B,UAAI,KAAK,CAAC,CAAD,CAAL,CAAS,GAAT,MAAkB,CAAtB,EAAyB;AACrB,eAAO,KAAP;AACH;AACJ;;AACD,WAAO,IAAP;AACH,GATc;AAWf;;;AAGG;;;AACW,EAAA,QAAA,CAAA,qBAAA,GAAd,UAAoC,MAApC,EAAsD;AAClD,QAAI,YAAY,GAAG,CAAnB;AACA,QAAM,KAAK,GAAsB,MAAM,CAAC,QAAP,EAAjC;AACA,QAAM,KAAK,GAAmB,MAAM,CAAC,QAAP,EAA9B;AACA,QAAM,MAAM,GAAmB,MAAM,CAAC,SAAP,EAA/B;;AACA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,MAApB,EAA4B,CAAC,EAA7B,EAAiC;AAC7B,UAAM,MAAM,GAAe,KAAK,CAAC,CAAD,CAAhC;;AACA,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAApB,EAA2B,CAAC,EAA5B,EAAgC;AAC5B,YAAI,MAAM,CAAC,CAAD,CAAN,KAAc,CAAlB,EAAqB;AACjB,UAAA,YAAY;AACf;AACJ;AACJ;;AACD,QAAM,aAAa,GAAG,MAAM,CAAC,SAAP,KAAqB,MAAM,CAAC,QAAP,EAA3C;AACA,QAAM,oBAAoB,GAAG,IAAI,CAAC,KAAL,CAAW,IAAI,CAAC,GAAL,CAAS,YAAY,GAAG,CAAf,GAAmB,aAA5B,IAA6C,EAA7C,GAAkD,aAA7D,CAA7B;AACA,WAAO,oBAAoB,GAAG,QAAQ,CAAC,EAAvC;AACH,GAhBa;AAkBd;;;AAGG;;;AACW,EAAA,QAAA,CAAA,cAAA,GAAd,UAA6B;AAAoB;AAAjD,IAA0D;AAAU;AAApE,IAA6E;AAAU;AAAvF,IAA8F;AAC1F,QAAI,YAAJ;AAA0B;;AAC1B,QAAI,IAAJ;AAAkB;;AAClB,YAAQ,WAAR;AACI,WAAK,CAAL;AACI,QAAA,YAAY,GAAI,CAAC,GAAG,CAAL,GAAU,GAAzB;AACA;;AACJ,WAAK,CAAL;AACI,QAAA,YAAY,GAAG,CAAC,GAAG,GAAnB;AACA;;AACJ,WAAK,CAAL;AACI,QAAA,YAAY,GAAG,CAAC,GAAG,CAAnB;AACA;;AACJ,WAAK,CAAL;AACI,QAAA,YAAY,GAAG,CAAC,CAAC,GAAG,CAAL,IAAU,CAAzB;AACA;;AACJ,WAAK,CAAL;AACI,QAAA,YAAY,GAAI,IAAI,CAAC,KAAL,CAAW,CAAC,GAAG,CAAf,IAAoB,IAAI,CAAC,KAAL,CAAW,CAAC,GAAG,CAAf,CAArB,GAA0C,GAAzD;AACA;;AACJ,WAAK,CAAL;AACI,QAAA,IAAI,GAAG,CAAC,GAAG,CAAX;AACA,QAAA,YAAY,GAAG,CAAC,IAAI,GAAG,GAAR,IAAgB,IAAI,GAAG,CAAtC;AACA;;AACJ,WAAK,CAAL;AACI,QAAA,IAAI,GAAG,CAAC,GAAG,CAAX;AACA,QAAA,YAAY,GAAI,CAAC,IAAI,GAAG,GAAR,IAAgB,IAAI,GAAG,CAAxB,GAA8B,GAA7C;AACA;;AACJ,WAAK,CAAL;AACI,QAAA,IAAI,GAAG,CAAC,GAAG,CAAX;AACA,QAAA,YAAY,GAAK,IAAI,GAAG,CAAR,IAAe,CAAC,GAAG,CAAL,GAAU,GAAxB,CAAD,GAAiC,GAAhD;AACA;;AACJ;AACI,cAAM,IAAI,0BAAA,CAAA,OAAJ,CAA6B,2BAA2B,WAAxD,CAAN;AA7BR;;AA+BA,WAAO,YAAY,KAAK,CAAxB;AACH,GAnCa;AAqCd;;;AAGG;;;AACY,EAAA,QAAA,CAAA,6BAAA,GAAf,UAA6C,MAA7C,EAAiE,YAAjE,EAAsF;AAClF,QAAI,OAAO,GAAG,CAAd;AACA,QAAM,MAAM,GAAG,YAAY,GAAG,MAAM,CAAC,SAAP,EAAH,GAAwB,MAAM,CAAC,QAAP,EAAnD;AACA,QAAM,MAAM,GAAG,YAAY,GAAG,MAAM,CAAC,QAAP,EAAH,GAAuB,MAAM,CAAC,SAAP,EAAlD;AACA,QAAM,KAAK,GAAsB,MAAM,CAAC,QAAP,EAAjC;;AACA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,MAApB,EAA4B,CAAC,EAA7B,EAAiC;AAC7B,UAAI,eAAe,GAAG,CAAtB;AACA,UAAI,OAAO,GAAG,CAAC,CAAf;;AACA,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,MAApB,EAA4B,CAAC,EAA7B,EAAiC;AAC7B,YAAM,GAAG,GAAG,YAAY,GAAG,KAAK,CAAC,CAAD,CAAL,CAAS,CAAT,CAAH,GAAiB,KAAK,CAAC,CAAD,CAAL,CAAS,CAAT,CAAzC;;AACA,YAAI,GAAG,KAAK,OAAZ,EAAqB;AACjB,UAAA,eAAe;AAClB,SAFD,MAEO;AACH,cAAI,eAAe,IAAI,CAAvB,EAA0B;AACtB,YAAA,OAAO,IAAI,QAAQ,CAAC,EAAT,IAAe,eAAe,GAAG,CAAjC,CAAX;AACH;;AACD,UAAA,eAAe,GAAG,CAAlB,CAJG,CAImB;;AACtB,UAAA,OAAO,GAAG,GAAV;AACH;AACJ;;AACD,UAAI,eAAe,IAAI,CAAvB,EAA0B;AACtB,QAAA,OAAO,IAAI,QAAQ,CAAC,EAAT,IAAe,eAAe,GAAG,CAAjC,CAAX;AACH;AACJ;;AACD,WAAO,OAAP;AACH,GAzBc,CA3KnB,CAEI;;;AACe,EAAA,QAAA,CAAA,EAAA,GAAK,CAAL;AACA,EAAA,QAAA,CAAA,EAAA,GAAK,CAAL;AACA,EAAA,QAAA,CAAA,EAAA,GAAK,EAAL;AACA,EAAA,QAAA,CAAA,EAAA,GAAK,EAAL;AAgMnB,SAAA,QAAA;AAAC,CAtMD,EAAA;;kBAAqB,Q","sourceRoot":"","sourcesContent":["\"use strict\";\n/*\n * Copyright 2008 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar IllegalArgumentException_1 = require(\"../../IllegalArgumentException\");\n/**\n * @author Satoru Takabayashi\n * @author Daniel Switkin\n * @author Sean Owen\n */\nvar MaskUtil = /** @class */ (function () {\n    function MaskUtil() {\n        // do nothing\n    }\n    /**\n     * Apply mask penalty rule 1 and return the penalty. Find repetitive cells with the same color and\n     * give penalty to them. Example: 00000 or 11111.\n     */\n    MaskUtil.applyMaskPenaltyRule1 = function (matrix) {\n        return MaskUtil.applyMaskPenaltyRule1Internal(matrix, true) + MaskUtil.applyMaskPenaltyRule1Internal(matrix, false);\n    };\n    /**\n     * Apply mask penalty rule 2 and return the penalty. Find 2x2 blocks with the same color and give\n     * penalty to them. This is actually equivalent to the spec's rule, which is to find MxN blocks and give a\n     * penalty proportional to (M-1)x(N-1), because this is the number of 2x2 blocks inside such a block.\n     */\n    MaskUtil.applyMaskPenaltyRule2 = function (matrix) {\n        var penalty = 0;\n        var array = matrix.getArray();\n        var width = matrix.getWidth();\n        var height = matrix.getHeight();\n        for (var y = 0; y < height - 1; y++) {\n            var arrayY = array[y];\n            for (var x = 0; x < width - 1; x++) {\n                var value = arrayY[x];\n                if (value === arrayY[x + 1] && value === array[y + 1][x] && value === array[y + 1][x + 1]) {\n                    penalty++;\n                }\n            }\n        }\n        return MaskUtil.N2 * penalty;\n    };\n    /**\n     * Apply mask penalty rule 3 and return the penalty. Find consecutive runs of 1:1:3:1:1:4\n     * starting with black, or 4:1:1:3:1:1 starting with white, and give penalty to them.  If we\n     * find patterns like 000010111010000, we give penalty once.\n     */\n    MaskUtil.applyMaskPenaltyRule3 = function (matrix) {\n        var numPenalties = 0;\n        var array = matrix.getArray();\n        var width = matrix.getWidth();\n        var height = matrix.getHeight();\n        for (var y = 0; y < height; y++) {\n            for (var x = 0; x < width; x++) {\n                var arrayY = array[y]; // We can at least optimize this access\n                if (x + 6 < width &&\n                    arrayY[x] === 1 &&\n                    arrayY[x + 1] === 0 &&\n                    arrayY[x + 2] === 1 &&\n                    arrayY[x + 3] === 1 &&\n                    arrayY[x + 4] === 1 &&\n                    arrayY[x + 5] === 0 &&\n                    arrayY[x + 6] === 1 &&\n                    (MaskUtil.isWhiteHorizontal(arrayY, x - 4, x) || MaskUtil.isWhiteHorizontal(arrayY, x + 7, x + 11))) {\n                    numPenalties++;\n                }\n                if (y + 6 < height &&\n                    array[y][x] === 1 &&\n                    array[y + 1][x] === 0 &&\n                    array[y + 2][x] === 1 &&\n                    array[y + 3][x] === 1 &&\n                    array[y + 4][x] === 1 &&\n                    array[y + 5][x] === 0 &&\n                    array[y + 6][x] === 1 &&\n                    (MaskUtil.isWhiteVertical(array, x, y - 4, y) || MaskUtil.isWhiteVertical(array, x, y + 7, y + 11))) {\n                    numPenalties++;\n                }\n            }\n        }\n        return numPenalties * MaskUtil.N3;\n    };\n    MaskUtil.isWhiteHorizontal = function (rowArray, from /*int*/, to /*int*/) {\n        from = Math.max(from, 0);\n        to = Math.min(to, rowArray.length);\n        for (var i = from; i < to; i++) {\n            if (rowArray[i] === 1) {\n                return false;\n            }\n        }\n        return true;\n    };\n    MaskUtil.isWhiteVertical = function (array, col /*int*/, from /*int*/, to /*int*/) {\n        from = Math.max(from, 0);\n        to = Math.min(to, array.length);\n        for (var i = from; i < to; i++) {\n            if (array[i][col] === 1) {\n                return false;\n            }\n        }\n        return true;\n    };\n    /**\n     * Apply mask penalty rule 4 and return the penalty. Calculate the ratio of dark cells and give\n     * penalty if the ratio is far from 50%. It gives 10 penalty for 5% distance.\n     */\n    MaskUtil.applyMaskPenaltyRule4 = function (matrix) {\n        var numDarkCells = 0;\n        var array = matrix.getArray();\n        var width = matrix.getWidth();\n        var height = matrix.getHeight();\n        for (var y = 0; y < height; y++) {\n            var arrayY = array[y];\n            for (var x = 0; x < width; x++) {\n                if (arrayY[x] === 1) {\n                    numDarkCells++;\n                }\n            }\n        }\n        var numTotalCells = matrix.getHeight() * matrix.getWidth();\n        var fivePercentVariances = Math.floor(Math.abs(numDarkCells * 2 - numTotalCells) * 10 / numTotalCells);\n        return fivePercentVariances * MaskUtil.N4;\n    };\n    /**\n     * Return the mask bit for \"getMaskPattern\" at \"x\" and \"y\". See 8.8 of JISX0510:2004 for mask\n     * pattern conditions.\n     */\n    MaskUtil.getDataMaskBit = function (maskPattern /*int*/, x /*int*/, y /*int*/) {\n        var intermediate; /*int*/\n        var temp; /*int*/\n        switch (maskPattern) {\n            case 0:\n                intermediate = (y + x) & 0x1;\n                break;\n            case 1:\n                intermediate = y & 0x1;\n                break;\n            case 2:\n                intermediate = x % 3;\n                break;\n            case 3:\n                intermediate = (y + x) % 3;\n                break;\n            case 4:\n                intermediate = (Math.floor(y / 2) + Math.floor(x / 3)) & 0x1;\n                break;\n            case 5:\n                temp = y * x;\n                intermediate = (temp & 0x1) + (temp % 3);\n                break;\n            case 6:\n                temp = y * x;\n                intermediate = ((temp & 0x1) + (temp % 3)) & 0x1;\n                break;\n            case 7:\n                temp = y * x;\n                intermediate = ((temp % 3) + ((y + x) & 0x1)) & 0x1;\n                break;\n            default:\n                throw new IllegalArgumentException_1.default('Invalid mask pattern: ' + maskPattern);\n        }\n        return intermediate === 0;\n    };\n    /**\n     * Helper function for applyMaskPenaltyRule1. We need this for doing this calculation in both\n     * vertical and horizontal orders respectively.\n     */\n    MaskUtil.applyMaskPenaltyRule1Internal = function (matrix, isHorizontal) {\n        var penalty = 0;\n        var iLimit = isHorizontal ? matrix.getHeight() : matrix.getWidth();\n        var jLimit = isHorizontal ? matrix.getWidth() : matrix.getHeight();\n        var array = matrix.getArray();\n        for (var i = 0; i < iLimit; i++) {\n            var numSameBitCells = 0;\n            var prevBit = -1;\n            for (var j = 0; j < jLimit; j++) {\n                var bit = isHorizontal ? array[i][j] : array[j][i];\n                if (bit === prevBit) {\n                    numSameBitCells++;\n                }\n                else {\n                    if (numSameBitCells >= 5) {\n                        penalty += MaskUtil.N1 + (numSameBitCells - 5);\n                    }\n                    numSameBitCells = 1; // Include the cell itself.\n                    prevBit = bit;\n                }\n            }\n            if (numSameBitCells >= 5) {\n                penalty += MaskUtil.N1 + (numSameBitCells - 5);\n            }\n        }\n        return penalty;\n    };\n    // Penalty weights from section 6.8.2.1\n    MaskUtil.N1 = 3;\n    MaskUtil.N2 = 3;\n    MaskUtil.N3 = 40;\n    MaskUtil.N4 = 10;\n    return MaskUtil;\n}());\nexports.default = MaskUtil;\n//# sourceMappingURL=MaskUtil.js.map"]},"metadata":{},"sourceType":"script"}