{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2007 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar System_1 = require(\"./util/System\");\n/**\n * <p>Encapsulates the result of decoding a barcode within an image.</p>\n *\n * @author Sean Owen\n */\n\n\nvar Result =\n/** @class */\nfunction () {\n  // public constructor(private text: string,\n  //               Uint8Array rawBytes,\n  //               ResultPoconst resultPoints: Int32Array,\n  //               BarcodeFormat format) {\n  //   this(text, rawBytes, resultPoints, format, System.currentTimeMillis())\n  // }\n  // public constructor(text: string,\n  //               Uint8Array rawBytes,\n  //               ResultPoconst resultPoints: Int32Array,\n  //               BarcodeFormat format,\n  //               long timestamp) {\n  //   this(text, rawBytes, rawBytes == null ? 0 : 8 * rawBytes.length,\n  //        resultPoints, format, timestamp)\n  // }\n  function Result(text, rawBytes, numBits, resultPoints, format, timestamp) {\n    if (numBits === void 0) {\n      numBits = rawBytes == null ? 0 : 8 * rawBytes.length;\n    }\n\n    if (timestamp === void 0) {\n      timestamp = System_1.default.currentTimeMillis();\n    }\n\n    this.text = text;\n    this.rawBytes = rawBytes;\n    this.numBits = numBits;\n    this.resultPoints = resultPoints;\n    this.format = format;\n    this.timestamp = timestamp;\n    this.text = text;\n    this.rawBytes = rawBytes;\n\n    if (undefined === numBits || null === numBits) {\n      this.numBits = rawBytes === null || rawBytes === undefined ? 0 : 8 * rawBytes.length;\n    } else {\n      this.numBits = numBits;\n    }\n\n    this.resultPoints = resultPoints;\n    this.format = format;\n    this.resultMetadata = null;\n\n    if (undefined === timestamp || null === timestamp) {\n      this.timestamp = System_1.default.currentTimeMillis();\n    } else {\n      this.timestamp = timestamp;\n    }\n  }\n  /**\n   * @return raw text encoded by the barcode\n   */\n\n\n  Result.prototype.getText = function () {\n    return this.text;\n  };\n  /**\n   * @return raw bytes encoded by the barcode, if applicable, otherwise {@code null}\n   */\n\n\n  Result.prototype.getRawBytes = function () {\n    return this.rawBytes;\n  };\n  /**\n   * @return how many bits of {@link #getRawBytes()} are valid; typically 8 times its length\n   * @since 3.3.0\n   */\n\n\n  Result.prototype.getNumBits = function () {\n    return this.numBits;\n  };\n  /**\n   * @return points related to the barcode in the image. These are typically points\n   *         identifying finder patterns or the corners of the barcode. The exact meaning is\n   *         specific to the type of barcode that was decoded.\n   */\n\n\n  Result.prototype.getResultPoints = function () {\n    return this.resultPoints;\n  };\n  /**\n   * @return {@link BarcodeFormat} representing the format of the barcode that was decoded\n   */\n\n\n  Result.prototype.getBarcodeFormat = function () {\n    return this.format;\n  };\n  /**\n   * @return {@link Map} mapping {@link ResultMetadataType} keys to values. May be\n   *   {@code null}. This contains optional metadata about what was detected about the barcode,\n   *   like orientation.\n   */\n\n\n  Result.prototype.getResultMetadata = function () {\n    return this.resultMetadata;\n  };\n\n  Result.prototype.putMetadata = function (type, value) {\n    if (this.resultMetadata === null) {\n      this.resultMetadata = new Map();\n    }\n\n    this.resultMetadata.set(type, value);\n  };\n\n  Result.prototype.putAllMetadata = function (metadata) {\n    if (metadata !== null) {\n      if (this.resultMetadata === null) {\n        this.resultMetadata = metadata;\n      } else {\n        this.resultMetadata = new Map(metadata);\n      }\n    }\n  };\n\n  Result.prototype.addResultPoints = function (newPoints) {\n    var oldPoints = this.resultPoints;\n\n    if (oldPoints === null) {\n      this.resultPoints = newPoints;\n    } else if (newPoints !== null && newPoints.length > 0) {\n      var allPoints = new Array(oldPoints.length + newPoints.length);\n      System_1.default.arraycopy(oldPoints, 0, allPoints, 0, oldPoints.length);\n      System_1.default.arraycopy(newPoints, 0, allPoints, oldPoints.length, newPoints.length);\n      this.resultPoints = allPoints;\n    }\n  };\n\n  Result.prototype.getTimestamp = function () {\n    return this.timestamp;\n  };\n  /*@Override*/\n\n\n  Result.prototype.toString = function () {\n    return this.text;\n  };\n\n  return Result;\n}();\n\nexports.default = Result;","map":{"version":3,"sources":["../../src/core/Result.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;AAcG;;;;;;AAQH,IAAA,QAAA,GAAA,OAAA,CAAA,eAAA,CAAA;AAGA;;;;AAIG;;;AACH,IAAA,MAAA;AAAA;AAAA,YAAA;AAII;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,WAAA,MAAA,CAA2B,IAA3B,EACU,QADV,EAEU,OAFV,EAGU,YAHV,EAIU,MAJV,EAKU,SALV,EAKiE;AAHvD,QAAA,OAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,OAAA,GAA0B,QAAQ,IAAI,IAAZ,GAAmB,CAAnB,GAAuB,IAAI,QAAQ,CAAC,MAA9D;AAAoE;;AAGpE,QAAA,SAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,SAAA,GAA6B,QAAA,CAAA,OAAA,CAAO,iBAAP,EAA7B;AAAuD;;AALtC,SAAA,IAAA,GAAA,IAAA;AACjB,SAAA,QAAA,GAAA,QAAA;AACA,SAAA,OAAA,GAAA,OAAA;AACA,SAAA,YAAA,GAAA,YAAA;AACA,SAAA,MAAA,GAAA,MAAA;AACA,SAAA,SAAA,GAAA,SAAA;AACN,SAAK,IAAL,GAAY,IAAZ;AACA,SAAK,QAAL,GAAgB,QAAhB;;AACA,QAAI,SAAS,KAAK,OAAd,IAAyB,SAAS,OAAtC,EAA+C;AAC3C,WAAK,OAAL,GAAgB,QAAQ,KAAK,IAAb,IAAqB,QAAQ,KAAK,SAAnC,GAAgD,CAAhD,GAAoD,IAAI,QAAQ,CAAC,MAAhF;AACH,KAFD,MAEO;AACH,WAAK,OAAL,GAAe,OAAf;AACH;;AACD,SAAK,YAAL,GAAoB,YAApB;AACA,SAAK,MAAL,GAAc,MAAd;AACA,SAAK,cAAL,GAAsB,IAAtB;;AACA,QAAI,SAAS,KAAK,SAAd,IAA2B,SAAS,SAAxC,EAAmD;AAC/C,WAAK,SAAL,GAAiB,QAAA,CAAA,OAAA,CAAO,iBAAP,EAAjB;AACH,KAFD,MAEO;AACH,WAAK,SAAL,GAAiB,SAAjB;AACH;AACJ;AAED;;AAEG;;;AACI,EAAA,MAAA,CAAA,SAAA,CAAA,OAAA,GAAP,YAAA;AACI,WAAO,KAAK,IAAZ;AACH,GAFM;AAIP;;AAEG;;;AACI,EAAA,MAAA,CAAA,SAAA,CAAA,WAAA,GAAP,YAAA;AACI,WAAO,KAAK,QAAZ;AACH,GAFM;AAIP;;;AAGG;;;AACI,EAAA,MAAA,CAAA,SAAA,CAAA,UAAA,GAAP,YAAA;AACI,WAAO,KAAK,OAAZ;AACH,GAFM;AAIP;;;;AAIG;;;AACI,EAAA,MAAA,CAAA,SAAA,CAAA,eAAA,GAAP,YAAA;AACI,WAAO,KAAK,YAAZ;AACH,GAFM;AAIP;;AAEG;;;AACI,EAAA,MAAA,CAAA,SAAA,CAAA,gBAAA,GAAP,YAAA;AACI,WAAO,KAAK,MAAZ;AACH,GAFM;AAIP;;;;AAIG;;;AACI,EAAA,MAAA,CAAA,SAAA,CAAA,iBAAA,GAAP,YAAA;AACI,WAAO,KAAK,cAAZ;AACH,GAFM;;AAIA,EAAA,MAAA,CAAA,SAAA,CAAA,WAAA,GAAP,UAAmB,IAAnB,EAA6C,KAA7C,EAA0D;AACtD,QAAI,KAAK,cAAL,KAAwB,IAA5B,EAAkC;AAC9B,WAAK,cAAL,GAAsB,IAAI,GAAJ,EAAtB;AACH;;AACD,SAAK,cAAL,CAAoB,GAApB,CAAwB,IAAxB,EAA8B,KAA9B;AACH,GALM;;AAOA,EAAA,MAAA,CAAA,SAAA,CAAA,cAAA,GAAP,UAAsB,QAAtB,EAA+D;AAC3D,QAAI,QAAQ,KAAK,IAAjB,EAAuB;AACnB,UAAI,KAAK,cAAL,KAAwB,IAA5B,EAAkC;AAC9B,aAAK,cAAL,GAAsB,QAAtB;AACH,OAFD,MAEO;AACH,aAAK,cAAL,GAAsB,IAAI,GAAJ,CAAQ,QAAR,CAAtB;AACH;AACJ;AACJ,GARM;;AAUA,EAAA,MAAA,CAAA,SAAA,CAAA,eAAA,GAAP,UAAuB,SAAvB,EAAoD;AAChD,QAAM,SAAS,GAAG,KAAK,YAAvB;;AACA,QAAI,SAAS,KAAK,IAAlB,EAAwB;AACpB,WAAK,YAAL,GAAoB,SAApB;AACH,KAFD,MAEO,IAAI,SAAS,KAAK,IAAd,IAAsB,SAAS,CAAC,MAAV,GAAmB,CAA7C,EAAgD;AACnD,UAAM,SAAS,GAAG,IAAI,KAAJ,CAAuB,SAAS,CAAC,MAAV,GAAmB,SAAS,CAAC,MAApD,CAAlB;AACA,MAAA,QAAA,CAAA,OAAA,CAAO,SAAP,CAAiB,SAAjB,EAA4B,CAA5B,EAA+B,SAA/B,EAA0C,CAA1C,EAA6C,SAAS,CAAC,MAAvD;AACA,MAAA,QAAA,CAAA,OAAA,CAAO,SAAP,CAAiB,SAAjB,EAA4B,CAA5B,EAA+B,SAA/B,EAA0C,SAAS,CAAC,MAApD,EAA4D,SAAS,CAAC,MAAtE;AACA,WAAK,YAAL,GAAoB,SAApB;AACH;AACJ,GAVM;;AAYA,EAAA,MAAA,CAAA,SAAA,CAAA,YAAA,GAAP,YAAA;AACI,WAAO,KAAK,SAAZ;AACH,GAFM;AAIP;;;AACO,EAAA,MAAA,CAAA,SAAA,CAAA,QAAA,GAAP,YAAA;AACI,WAAO,KAAK,IAAZ;AACH,GAFM;;AAIX,SAAA,MAAA;AAAC,CAhID,EAAA","sourceRoot":"","sourcesContent":["\"use strict\";\n/*\n * Copyright 2007 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar System_1 = require(\"./util/System\");\n/**\n * <p>Encapsulates the result of decoding a barcode within an image.</p>\n *\n * @author Sean Owen\n */\nvar Result = /** @class */ (function () {\n    // public constructor(private text: string,\n    //               Uint8Array rawBytes,\n    //               ResultPoconst resultPoints: Int32Array,\n    //               BarcodeFormat format) {\n    //   this(text, rawBytes, resultPoints, format, System.currentTimeMillis())\n    // }\n    // public constructor(text: string,\n    //               Uint8Array rawBytes,\n    //               ResultPoconst resultPoints: Int32Array,\n    //               BarcodeFormat format,\n    //               long timestamp) {\n    //   this(text, rawBytes, rawBytes == null ? 0 : 8 * rawBytes.length,\n    //        resultPoints, format, timestamp)\n    // }\n    function Result(text, rawBytes, numBits, resultPoints, format, timestamp) {\n        if (numBits === void 0) { numBits = rawBytes == null ? 0 : 8 * rawBytes.length; }\n        if (timestamp === void 0) { timestamp = System_1.default.currentTimeMillis(); }\n        this.text = text;\n        this.rawBytes = rawBytes;\n        this.numBits = numBits;\n        this.resultPoints = resultPoints;\n        this.format = format;\n        this.timestamp = timestamp;\n        this.text = text;\n        this.rawBytes = rawBytes;\n        if (undefined === numBits || null === numBits) {\n            this.numBits = (rawBytes === null || rawBytes === undefined) ? 0 : 8 * rawBytes.length;\n        }\n        else {\n            this.numBits = numBits;\n        }\n        this.resultPoints = resultPoints;\n        this.format = format;\n        this.resultMetadata = null;\n        if (undefined === timestamp || null === timestamp) {\n            this.timestamp = System_1.default.currentTimeMillis();\n        }\n        else {\n            this.timestamp = timestamp;\n        }\n    }\n    /**\n     * @return raw text encoded by the barcode\n     */\n    Result.prototype.getText = function () {\n        return this.text;\n    };\n    /**\n     * @return raw bytes encoded by the barcode, if applicable, otherwise {@code null}\n     */\n    Result.prototype.getRawBytes = function () {\n        return this.rawBytes;\n    };\n    /**\n     * @return how many bits of {@link #getRawBytes()} are valid; typically 8 times its length\n     * @since 3.3.0\n     */\n    Result.prototype.getNumBits = function () {\n        return this.numBits;\n    };\n    /**\n     * @return points related to the barcode in the image. These are typically points\n     *         identifying finder patterns or the corners of the barcode. The exact meaning is\n     *         specific to the type of barcode that was decoded.\n     */\n    Result.prototype.getResultPoints = function () {\n        return this.resultPoints;\n    };\n    /**\n     * @return {@link BarcodeFormat} representing the format of the barcode that was decoded\n     */\n    Result.prototype.getBarcodeFormat = function () {\n        return this.format;\n    };\n    /**\n     * @return {@link Map} mapping {@link ResultMetadataType} keys to values. May be\n     *   {@code null}. This contains optional metadata about what was detected about the barcode,\n     *   like orientation.\n     */\n    Result.prototype.getResultMetadata = function () {\n        return this.resultMetadata;\n    };\n    Result.prototype.putMetadata = function (type, value) {\n        if (this.resultMetadata === null) {\n            this.resultMetadata = new Map();\n        }\n        this.resultMetadata.set(type, value);\n    };\n    Result.prototype.putAllMetadata = function (metadata) {\n        if (metadata !== null) {\n            if (this.resultMetadata === null) {\n                this.resultMetadata = metadata;\n            }\n            else {\n                this.resultMetadata = new Map(metadata);\n            }\n        }\n    };\n    Result.prototype.addResultPoints = function (newPoints) {\n        var oldPoints = this.resultPoints;\n        if (oldPoints === null) {\n            this.resultPoints = newPoints;\n        }\n        else if (newPoints !== null && newPoints.length > 0) {\n            var allPoints = new Array(oldPoints.length + newPoints.length);\n            System_1.default.arraycopy(oldPoints, 0, allPoints, 0, oldPoints.length);\n            System_1.default.arraycopy(newPoints, 0, allPoints, oldPoints.length, newPoints.length);\n            this.resultPoints = allPoints;\n        }\n    };\n    Result.prototype.getTimestamp = function () {\n        return this.timestamp;\n    };\n    /*@Override*/\n    Result.prototype.toString = function () {\n        return this.text;\n    };\n    return Result;\n}());\nexports.default = Result;\n//# sourceMappingURL=Result.js.map"]},"metadata":{},"sourceType":"script"}