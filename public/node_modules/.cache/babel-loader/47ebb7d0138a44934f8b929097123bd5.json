{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2007 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar __values = this && this.__values || function (o) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator],\n      i = 0;\n  if (m) return m.call(o);\n  return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*namespace com.google.zxing.qrcode.detector {*/\n\nvar DecodeHintType_1 = require(\"../../DecodeHintType\");\n\nvar ResultPoint_1 = require(\"../../ResultPoint\");\n\nvar FinderPattern_1 = require(\"./FinderPattern\");\n\nvar FinderPatternInfo_1 = require(\"./FinderPatternInfo\");\n\nvar NotFoundException_1 = require(\"../../NotFoundException\");\n/*import java.io.Serializable;*/\n\n/*import java.util.ArrayList;*/\n\n/*import java.util.Collections;*/\n\n/*import java.util.Comparator;*/\n\n/*import java.util.List;*/\n\n/*import java.util.Map;*/\n\n/**\n * <p>This class attempts to find finder patterns in a QR Code. Finder patterns are the square\n * markers at three corners of a QR Code.</p>\n *\n * <p>This class is thread-safe but not reentrant. Each thread must allocate its own object.\n *\n * @author Sean Owen\n */\n\n\nvar FinderPatternFinder =\n/** @class */\nfunction () {\n  /**\n   * <p>Creates a finder that will search the image for three finder patterns.</p>\n   *\n   * @param image image to search\n   */\n  // public constructor(image: BitMatrix) {\n  //   this(image, null)\n  // }\n  function FinderPatternFinder(image, resultPointCallback) {\n    this.image = image;\n    this.resultPointCallback = resultPointCallback;\n    this.possibleCenters = [];\n    this.crossCheckStateCount = new Int32Array(5);\n    this.resultPointCallback = resultPointCallback;\n  }\n\n  FinderPatternFinder.prototype.getImage = function () {\n    return this.image;\n  };\n\n  FinderPatternFinder.prototype.getPossibleCenters = function () {\n    return this.possibleCenters;\n  };\n\n  FinderPatternFinder.prototype.find = function (hints) {\n    var tryHarder = hints !== null && hints !== undefined && undefined !== hints.get(DecodeHintType_1.default.TRY_HARDER);\n    var pureBarcode = hints !== null && hints !== undefined && undefined !== hints.get(DecodeHintType_1.default.PURE_BARCODE);\n    var image = this.image;\n    var maxI = image.getHeight();\n    var maxJ = image.getWidth(); // We are looking for black/white/black/white/black modules in\n    // 1:1:3:1:1 ratio; this tracks the number of such modules seen so far\n    // Let's assume that the maximum version QR Code we support takes up 1/4 the height of the\n    // image, and then account for the center being 3 modules in size. This gives the smallest\n    // number of pixels the center could be, so skip this often. When trying harder, look for all\n    // QR versions regardless of how dense they are.\n\n    var iSkip = Math.floor(3 * maxI / (4 * FinderPatternFinder.MAX_MODULES));\n\n    if (iSkip < FinderPatternFinder.MIN_SKIP || tryHarder) {\n      iSkip = FinderPatternFinder.MIN_SKIP;\n    }\n\n    var done = false;\n    var stateCount = new Int32Array(5);\n\n    for (var i = iSkip - 1; i < maxI && !done; i += iSkip) {\n      // Get a row of black/white values\n      stateCount[0] = 0;\n      stateCount[1] = 0;\n      stateCount[2] = 0;\n      stateCount[3] = 0;\n      stateCount[4] = 0;\n      var currentState = 0;\n\n      for (var j = 0; j < maxJ; j++) {\n        if (image.get(j, i)) {\n          // Black pixel\n          if ((currentState & 1) === 1) {\n            // Counting white pixels\n            currentState++;\n          }\n\n          stateCount[currentState]++;\n        } else {\n          // White pixel\n          if ((currentState & 1) === 0) {\n            // Counting black pixels\n            if (currentState === 4) {\n              // A winner?\n              if (FinderPatternFinder.foundPatternCross(stateCount)) {\n                // Yes\n                var confirmed = this.handlePossibleCenter(stateCount, i, j, pureBarcode);\n\n                if (confirmed === true) {\n                  // Start examining every other line. Checking each line turned out to be too\n                  // expensive and didn't improve performance.\n                  iSkip = 2;\n\n                  if (this.hasSkipped === true) {\n                    done = this.haveMultiplyConfirmedCenters();\n                  } else {\n                    var rowSkip = this.findRowSkip();\n\n                    if (rowSkip > stateCount[2]) {\n                      // Skip rows between row of lower confirmed center\n                      // and top of presumed third confirmed center\n                      // but back up a bit to get a full chance of detecting\n                      // it, entire width of center of finder pattern\n                      // Skip by rowSkip, but back off by stateCount[2] (size of last center\n                      // of pattern we saw) to be conservative, and also back off by iSkip which\n                      // is about to be re-added\n                      i += rowSkip - stateCount[2] - iSkip;\n                      j = maxJ - 1;\n                    }\n                  }\n                } else {\n                  stateCount[0] = stateCount[2];\n                  stateCount[1] = stateCount[3];\n                  stateCount[2] = stateCount[4];\n                  stateCount[3] = 1;\n                  stateCount[4] = 0;\n                  currentState = 3;\n                  continue;\n                } // Clear state to start looking again\n\n\n                currentState = 0;\n                stateCount[0] = 0;\n                stateCount[1] = 0;\n                stateCount[2] = 0;\n                stateCount[3] = 0;\n                stateCount[4] = 0;\n              } else {\n                // No, shift counts back by two\n                stateCount[0] = stateCount[2];\n                stateCount[1] = stateCount[3];\n                stateCount[2] = stateCount[4];\n                stateCount[3] = 1;\n                stateCount[4] = 0;\n                currentState = 3;\n              }\n            } else {\n              stateCount[++currentState]++;\n            }\n          } else {\n            // Counting white pixels\n            stateCount[currentState]++;\n          }\n        }\n      }\n\n      if (FinderPatternFinder.foundPatternCross(stateCount)) {\n        var confirmed = this.handlePossibleCenter(stateCount, i, maxJ, pureBarcode);\n\n        if (confirmed === true) {\n          iSkip = stateCount[0];\n\n          if (this.hasSkipped) {\n            // Found a third one\n            done = this.haveMultiplyConfirmedCenters();\n          }\n        }\n      }\n    }\n\n    var patternInfo = this.selectBestPatterns();\n    ResultPoint_1.default.orderBestPatterns(patternInfo);\n    return new FinderPatternInfo_1.default(patternInfo);\n  };\n  /**\n   * Given a count of black/white/black/white/black pixels just seen and an end position,\n   * figures the location of the center of this run.\n   */\n\n\n  FinderPatternFinder.centerFromEnd = function (stateCount, end\n  /*int*/\n  ) {\n    return end - stateCount[4] - stateCount[3] - stateCount[2] / 2.0;\n  };\n  /**\n   * @param stateCount count of black/white/black/white/black pixels just read\n   * @return true iff the proportions of the counts is close enough to the 1/1/3/1/1 ratios\n   *         used by finder patterns to be considered a match\n   */\n\n\n  FinderPatternFinder.foundPatternCross = function (stateCount) {\n    var totalModuleSize = 0;\n\n    for (var i = 0; i < 5; i++) {\n      var count = stateCount[i];\n\n      if (count === 0) {\n        return false;\n      }\n\n      totalModuleSize += count;\n    }\n\n    if (totalModuleSize < 7) {\n      return false;\n    }\n\n    var moduleSize = totalModuleSize / 7.0;\n    var maxVariance = moduleSize / 2.0; // Allow less than 50% variance from 1-1-3-1-1 proportions\n\n    return Math.abs(moduleSize - stateCount[0]) < maxVariance && Math.abs(moduleSize - stateCount[1]) < maxVariance && Math.abs(3.0 * moduleSize - stateCount[2]) < 3 * maxVariance && Math.abs(moduleSize - stateCount[3]) < maxVariance && Math.abs(moduleSize - stateCount[4]) < maxVariance;\n  };\n\n  FinderPatternFinder.prototype.getCrossCheckStateCount = function () {\n    var crossCheckStateCount = this.crossCheckStateCount;\n    crossCheckStateCount[0] = 0;\n    crossCheckStateCount[1] = 0;\n    crossCheckStateCount[2] = 0;\n    crossCheckStateCount[3] = 0;\n    crossCheckStateCount[4] = 0;\n    return crossCheckStateCount;\n  };\n  /**\n   * After a vertical and horizontal scan finds a potential finder pattern, this method\n   * \"cross-cross-cross-checks\" by scanning down diagonally through the center of the possible\n   * finder pattern to see if the same proportion is detected.\n   *\n   * @param startI row where a finder pattern was detected\n   * @param centerJ center of the section that appears to cross a finder pattern\n   * @param maxCount maximum reasonable number of modules that should be\n   *  observed in any reading state, based on the results of the horizontal scan\n   * @param originalStateCountTotal The original state count total.\n   * @return true if proportions are withing expected limits\n   */\n\n\n  FinderPatternFinder.prototype.crossCheckDiagonal = function (startI\n  /*int*/\n  , centerJ\n  /*int*/\n  , maxCount\n  /*int*/\n  , originalStateCountTotal\n  /*int*/\n  ) {\n    var stateCount = this.getCrossCheckStateCount(); // Start counting up, left from center finding black center mass\n\n    var i = 0;\n    var image = this.image;\n\n    while (startI >= i && centerJ >= i && image.get(centerJ - i, startI - i)) {\n      stateCount[2]++;\n      i++;\n    }\n\n    if (startI < i || centerJ < i) {\n      return false;\n    } // Continue up, left finding white space\n\n\n    while (startI >= i && centerJ >= i && !image.get(centerJ - i, startI - i) && stateCount[1] <= maxCount) {\n      stateCount[1]++;\n      i++;\n    } // If already too many modules in this state or ran off the edge:\n\n\n    if (startI < i || centerJ < i || stateCount[1] > maxCount) {\n      return false;\n    } // Continue up, left finding black border\n\n\n    while (startI >= i && centerJ >= i && image.get(centerJ - i, startI - i) && stateCount[0] <= maxCount) {\n      stateCount[0]++;\n      i++;\n    }\n\n    if (stateCount[0] > maxCount) {\n      return false;\n    }\n\n    var maxI = image.getHeight();\n    var maxJ = image.getWidth(); // Now also count down, right from center\n\n    i = 1;\n\n    while (startI + i < maxI && centerJ + i < maxJ && image.get(centerJ + i, startI + i)) {\n      stateCount[2]++;\n      i++;\n    } // Ran off the edge?\n\n\n    if (startI + i >= maxI || centerJ + i >= maxJ) {\n      return false;\n    }\n\n    while (startI + i < maxI && centerJ + i < maxJ && !image.get(centerJ + i, startI + i) && stateCount[3] < maxCount) {\n      stateCount[3]++;\n      i++;\n    }\n\n    if (startI + i >= maxI || centerJ + i >= maxJ || stateCount[3] >= maxCount) {\n      return false;\n    }\n\n    while (startI + i < maxI && centerJ + i < maxJ && image.get(centerJ + i, startI + i) && stateCount[4] < maxCount) {\n      stateCount[4]++;\n      i++;\n    }\n\n    if (stateCount[4] >= maxCount) {\n      return false;\n    } // If we found a finder-pattern-like section, but its size is more than 100% different than\n    // the original, assume it's a false positive\n\n\n    var stateCountTotal = stateCount[0] + stateCount[1] + stateCount[2] + stateCount[3] + stateCount[4];\n    return Math.abs(stateCountTotal - originalStateCountTotal) < 2 * originalStateCountTotal && FinderPatternFinder.foundPatternCross(stateCount);\n  };\n  /**\n   * <p>After a horizontal scan finds a potential finder pattern, this method\n   * \"cross-checks\" by scanning down vertically through the center of the possible\n   * finder pattern to see if the same proportion is detected.</p>\n   *\n   * @param startI row where a finder pattern was detected\n   * @param centerJ center of the section that appears to cross a finder pattern\n   * @param maxCount maximum reasonable number of modules that should be\n   * observed in any reading state, based on the results of the horizontal scan\n   * @return vertical center of finder pattern, or {@link Float#NaN} if not found\n   */\n\n\n  FinderPatternFinder.prototype.crossCheckVertical = function (startI\n  /*int*/\n  , centerJ\n  /*int*/\n  , maxCount\n  /*int*/\n  , originalStateCountTotal\n  /*int*/\n  ) {\n    var image = this.image;\n    var maxI = image.getHeight();\n    var stateCount = this.getCrossCheckStateCount(); // Start counting up from center\n\n    var i = startI;\n\n    while (i >= 0 && image.get(centerJ, i)) {\n      stateCount[2]++;\n      i--;\n    }\n\n    if (i < 0) {\n      return NaN;\n    }\n\n    while (i >= 0 && !image.get(centerJ, i) && stateCount[1] <= maxCount) {\n      stateCount[1]++;\n      i--;\n    } // If already too many modules in this state or ran off the edge:\n\n\n    if (i < 0 || stateCount[1] > maxCount) {\n      return NaN;\n    }\n\n    while (i >= 0 && image.get(centerJ, i) && stateCount[0] <= maxCount) {\n      stateCount[0]++;\n      i--;\n    }\n\n    if (stateCount[0] > maxCount) {\n      return NaN;\n    } // Now also count down from center\n\n\n    i = startI + 1;\n\n    while (i < maxI && image.get(centerJ, i)) {\n      stateCount[2]++;\n      i++;\n    }\n\n    if (i === maxI) {\n      return NaN;\n    }\n\n    while (i < maxI && !image.get(centerJ, i) && stateCount[3] < maxCount) {\n      stateCount[3]++;\n      i++;\n    }\n\n    if (i === maxI || stateCount[3] >= maxCount) {\n      return NaN;\n    }\n\n    while (i < maxI && image.get(centerJ, i) && stateCount[4] < maxCount) {\n      stateCount[4]++;\n      i++;\n    }\n\n    if (stateCount[4] >= maxCount) {\n      return NaN;\n    } // If we found a finder-pattern-like section, but its size is more than 40% different than\n    // the original, assume it's a false positive\n\n\n    var stateCountTotal = stateCount[0] + stateCount[1] + stateCount[2] + stateCount[3] + stateCount[4];\n\n    if (5 * Math.abs(stateCountTotal - originalStateCountTotal) >= 2 * originalStateCountTotal) {\n      return NaN;\n    }\n\n    return FinderPatternFinder.foundPatternCross(stateCount) ? FinderPatternFinder.centerFromEnd(stateCount, i) : NaN;\n  };\n  /**\n   * <p>Like {@link #crossCheckVertical(int, int, int, int)}, and in fact is basically identical,\n   * except it reads horizontally instead of vertically. This is used to cross-cross\n   * check a vertical cross check and locate the real center of the alignment pattern.</p>\n   */\n\n\n  FinderPatternFinder.prototype.crossCheckHorizontal = function (startJ\n  /*int*/\n  , centerI\n  /*int*/\n  , maxCount\n  /*int*/\n  , originalStateCountTotal\n  /*int*/\n  ) {\n    var image = this.image;\n    var maxJ = image.getWidth();\n    var stateCount = this.getCrossCheckStateCount();\n    var j = startJ;\n\n    while (j >= 0 && image.get(j, centerI)) {\n      stateCount[2]++;\n      j--;\n    }\n\n    if (j < 0) {\n      return NaN;\n    }\n\n    while (j >= 0 && !image.get(j, centerI) && stateCount[1] <= maxCount) {\n      stateCount[1]++;\n      j--;\n    }\n\n    if (j < 0 || stateCount[1] > maxCount) {\n      return NaN;\n    }\n\n    while (j >= 0 && image.get(j, centerI) && stateCount[0] <= maxCount) {\n      stateCount[0]++;\n      j--;\n    }\n\n    if (stateCount[0] > maxCount) {\n      return NaN;\n    }\n\n    j = startJ + 1;\n\n    while (j < maxJ && image.get(j, centerI)) {\n      stateCount[2]++;\n      j++;\n    }\n\n    if (j === maxJ) {\n      return NaN;\n    }\n\n    while (j < maxJ && !image.get(j, centerI) && stateCount[3] < maxCount) {\n      stateCount[3]++;\n      j++;\n    }\n\n    if (j === maxJ || stateCount[3] >= maxCount) {\n      return NaN;\n    }\n\n    while (j < maxJ && image.get(j, centerI) && stateCount[4] < maxCount) {\n      stateCount[4]++;\n      j++;\n    }\n\n    if (stateCount[4] >= maxCount) {\n      return NaN;\n    } // If we found a finder-pattern-like section, but its size is significantly different than\n    // the original, assume it's a false positive\n\n\n    var stateCountTotal = stateCount[0] + stateCount[1] + stateCount[2] + stateCount[3] + stateCount[4];\n\n    if (5 * Math.abs(stateCountTotal - originalStateCountTotal) >= originalStateCountTotal) {\n      return NaN;\n    }\n\n    return FinderPatternFinder.foundPatternCross(stateCount) ? FinderPatternFinder.centerFromEnd(stateCount, j) : NaN;\n  };\n  /**\n   * <p>This is called when a horizontal scan finds a possible alignment pattern. It will\n   * cross check with a vertical scan, and if successful, will, ah, cross-cross-check\n   * with another horizontal scan. This is needed primarily to locate the real horizontal\n   * center of the pattern in cases of extreme skew.\n   * And then we cross-cross-cross check with another diagonal scan.</p>\n   *\n   * <p>If that succeeds the finder pattern location is added to a list that tracks\n   * the number of times each location has been nearly-matched as a finder pattern.\n   * Each additional find is more evidence that the location is in fact a finder\n   * pattern center\n   *\n   * @param stateCount reading state module counts from horizontal scan\n   * @param i row where finder pattern may be found\n   * @param j end of possible finder pattern in row\n   * @param pureBarcode true if in \"pure barcode\" mode\n   * @return true if a finder pattern candidate was found this time\n   */\n\n\n  FinderPatternFinder.prototype.handlePossibleCenter = function (stateCount, i\n  /*int*/\n  , j\n  /*int*/\n  , pureBarcode) {\n    var stateCountTotal = stateCount[0] + stateCount[1] + stateCount[2] + stateCount[3] + stateCount[4];\n    var centerJ = FinderPatternFinder.centerFromEnd(stateCount, j);\n    var centerI = this.crossCheckVertical(i,\n    /*(int) */\n    Math.floor(centerJ), stateCount[2], stateCountTotal);\n\n    if (!isNaN(centerI)) {\n      // Re-cross check\n      centerJ = this.crossCheckHorizontal(\n      /*(int) */\n      Math.floor(centerJ),\n      /*(int) */\n      Math.floor(centerI), stateCount[2], stateCountTotal);\n\n      if (!isNaN(centerJ) && (!pureBarcode || this.crossCheckDiagonal(\n      /*(int) */\n      Math.floor(centerI),\n      /*(int) */\n      Math.floor(centerJ), stateCount[2], stateCountTotal))) {\n        var estimatedModuleSize = stateCountTotal / 7.0;\n        var found = false;\n        var possibleCenters = this.possibleCenters;\n\n        for (var index = 0, length_1 = possibleCenters.length; index < length_1; index++) {\n          var center = possibleCenters[index]; // Look for about the same center and module size:\n\n          if (center.aboutEquals(estimatedModuleSize, centerI, centerJ)) {\n            possibleCenters[index] = center.combineEstimate(centerI, centerJ, estimatedModuleSize);\n            found = true;\n            break;\n          }\n        }\n\n        if (!found) {\n          var point = new FinderPattern_1.default(centerJ, centerI, estimatedModuleSize);\n          possibleCenters.push(point);\n\n          if (this.resultPointCallback !== null && this.resultPointCallback !== undefined) {\n            this.resultPointCallback.foundPossibleResultPoint(point);\n          }\n        }\n\n        return true;\n      }\n    }\n\n    return false;\n  };\n  /**\n   * @return number of rows we could safely skip during scanning, based on the first\n   *         two finder patterns that have been located. In some cases their position will\n   *         allow us to infer that the third pattern must lie below a certain point farther\n   *         down in the image.\n   */\n\n\n  FinderPatternFinder.prototype.findRowSkip = function () {\n    var e_1, _a;\n\n    var max = this.possibleCenters.length;\n\n    if (max <= 1) {\n      return 0;\n    }\n\n    var firstConfirmedCenter = null;\n\n    try {\n      for (var _b = __values(this.possibleCenters), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var center = _c.value;\n\n        if (center.getCount() >= FinderPatternFinder.CENTER_QUORUM) {\n          if (firstConfirmedCenter == null) {\n            firstConfirmedCenter = center;\n          } else {\n            // We have two confirmed centers\n            // How far down can we skip before resuming looking for the next\n            // pattern? In the worst case, only the difference between the\n            // difference in the x / y coordinates of the two centers.\n            // This is the case where you find top left last.\n            this.hasSkipped = true;\n            return (\n              /*(int) */\n              Math.floor((Math.abs(firstConfirmedCenter.getX() - center.getX()) - Math.abs(firstConfirmedCenter.getY() - center.getY())) / 2)\n            );\n          }\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n\n    return 0;\n  };\n  /**\n   * @return true iff we have found at least 3 finder patterns that have been detected\n   *         at least {@link #CENTER_QUORUM} times each, and, the estimated module size of the\n   *         candidates is \"pretty similar\"\n   */\n\n\n  FinderPatternFinder.prototype.haveMultiplyConfirmedCenters = function () {\n    var e_2, _a, e_3, _b;\n\n    var confirmedCount = 0;\n    var totalModuleSize = 0.0;\n    var max = this.possibleCenters.length;\n\n    try {\n      for (var _c = __values(this.possibleCenters), _d = _c.next(); !_d.done; _d = _c.next()) {\n        var pattern = _d.value;\n\n        if (pattern.getCount() >= FinderPatternFinder.CENTER_QUORUM) {\n          confirmedCount++;\n          totalModuleSize += pattern.getEstimatedModuleSize();\n        }\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n\n    if (confirmedCount < 3) {\n      return false;\n    } // OK, we have at least 3 confirmed centers, but, it's possible that one is a \"false positive\"\n    // and that we need to keep looking. We detect this by asking if the estimated module sizes\n    // vary too much. We arbitrarily say that when the total deviation from average exceeds\n    // 5% of the total module size estimates, it's too much.\n\n\n    var average = totalModuleSize / max;\n    var totalDeviation = 0.0;\n\n    try {\n      for (var _e = __values(this.possibleCenters), _f = _e.next(); !_f.done; _f = _e.next()) {\n        var pattern = _f.value;\n        totalDeviation += Math.abs(pattern.getEstimatedModuleSize() - average);\n      }\n    } catch (e_3_1) {\n      e_3 = {\n        error: e_3_1\n      };\n    } finally {\n      try {\n        if (_f && !_f.done && (_b = _e.return)) _b.call(_e);\n      } finally {\n        if (e_3) throw e_3.error;\n      }\n    }\n\n    return totalDeviation <= 0.05 * totalModuleSize;\n  };\n  /**\n   * @return the 3 best {@link FinderPattern}s from our list of candidates. The \"best\" are\n   *         those that have been detected at least {@link #CENTER_QUORUM} times, and whose module\n   *         size differs from the average among those patterns the least\n   * @throws NotFoundException if 3 such finder patterns do not exist\n   */\n\n\n  FinderPatternFinder.prototype.selectBestPatterns = function () {\n    var e_4, _a, e_5, _b;\n\n    var startSize = this.possibleCenters.length;\n\n    if (startSize < 3) {\n      // Couldn't find enough finder patterns\n      throw new NotFoundException_1.default();\n    }\n\n    var possibleCenters = this.possibleCenters;\n    var average; // Filter outlier possibilities whose module size is too different\n\n    if (startSize > 3) {\n      // But we can only afford to do so if we have at least 4 possibilities to choose from\n      var totalModuleSize = 0.0;\n      var square = 0.0;\n\n      try {\n        for (var _c = __values(this.possibleCenters), _d = _c.next(); !_d.done; _d = _c.next()) {\n          var center = _d.value;\n          var size = center.getEstimatedModuleSize();\n          totalModuleSize += size;\n          square += size * size;\n        }\n      } catch (e_4_1) {\n        e_4 = {\n          error: e_4_1\n        };\n      } finally {\n        try {\n          if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n        } finally {\n          if (e_4) throw e_4.error;\n        }\n      }\n\n      average = totalModuleSize / startSize;\n      var stdDev = Math.sqrt(square / startSize - average * average);\n      possibleCenters.sort(\n      /**\n       * <p>Orders by furthest from average</p>\n       */\n      // FurthestFromAverageComparator implements Comparator<FinderPattern>\n      function (center1, center2) {\n        var dA = Math.abs(center2.getEstimatedModuleSize() - average);\n        var dB = Math.abs(center1.getEstimatedModuleSize() - average);\n        return dA < dB ? -1 : dA > dB ? 1 : 0;\n      });\n      var limit = Math.max(0.2 * average, stdDev);\n\n      for (var i = 0; i < possibleCenters.length && possibleCenters.length > 3; i++) {\n        var pattern = possibleCenters[i];\n\n        if (Math.abs(pattern.getEstimatedModuleSize() - average) > limit) {\n          possibleCenters.splice(i, 1);\n          i--;\n        }\n      }\n    }\n\n    if (possibleCenters.length > 3) {\n      // Throw away all but those first size candidate points we found.\n      var totalModuleSize = 0.0;\n\n      try {\n        for (var possibleCenters_1 = __values(possibleCenters), possibleCenters_1_1 = possibleCenters_1.next(); !possibleCenters_1_1.done; possibleCenters_1_1 = possibleCenters_1.next()) {\n          var possibleCenter = possibleCenters_1_1.value;\n          totalModuleSize += possibleCenter.getEstimatedModuleSize();\n        }\n      } catch (e_5_1) {\n        e_5 = {\n          error: e_5_1\n        };\n      } finally {\n        try {\n          if (possibleCenters_1_1 && !possibleCenters_1_1.done && (_b = possibleCenters_1.return)) _b.call(possibleCenters_1);\n        } finally {\n          if (e_5) throw e_5.error;\n        }\n      }\n\n      average = totalModuleSize / possibleCenters.length;\n      possibleCenters.sort(\n      /**\n       * <p>Orders by {@link FinderPattern#getCount()}, descending.</p>\n       */\n      // CenterComparator implements Comparator<FinderPattern>\n      function (center1, center2) {\n        if (center2.getCount() === center1.getCount()) {\n          var dA = Math.abs(center2.getEstimatedModuleSize() - average);\n          var dB = Math.abs(center1.getEstimatedModuleSize() - average);\n          return dA < dB ? 1 : dA > dB ? -1 : 0;\n        } else {\n          return center2.getCount() - center1.getCount();\n        }\n      });\n      possibleCenters.splice(3); // this is not realy necessary as we only return first 3 anyway\n    }\n\n    return [possibleCenters[0], possibleCenters[1], possibleCenters[2]];\n  };\n\n  FinderPatternFinder.CENTER_QUORUM = 2;\n  FinderPatternFinder.MIN_SKIP = 3; // 1 pixel/module times 3 modules/center\n\n  FinderPatternFinder.MAX_MODULES = 57; // support up to version 10 for mobile clients\n\n  return FinderPatternFinder;\n}();\n\nexports.default = FinderPatternFinder;","map":{"version":3,"sources":["../../../../src/core/qrcode/detector/FinderPatternFinder.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/*\n * Copyright 2007 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __values = (this && this.__values) || function (o) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\n    if (m) return m.call(o);\n    return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/*namespace com.google.zxing.qrcode.detector {*/\nvar DecodeHintType_1 = require(\"../../DecodeHintType\");\nvar ResultPoint_1 = require(\"../../ResultPoint\");\nvar FinderPattern_1 = require(\"./FinderPattern\");\nvar FinderPatternInfo_1 = require(\"./FinderPatternInfo\");\nvar NotFoundException_1 = require(\"../../NotFoundException\");\n/*import java.io.Serializable;*/\n/*import java.util.ArrayList;*/\n/*import java.util.Collections;*/\n/*import java.util.Comparator;*/\n/*import java.util.List;*/\n/*import java.util.Map;*/\n/**\n * <p>This class attempts to find finder patterns in a QR Code. Finder patterns are the square\n * markers at three corners of a QR Code.</p>\n *\n * <p>This class is thread-safe but not reentrant. Each thread must allocate its own object.\n *\n * @author Sean Owen\n */\nvar FinderPatternFinder = /** @class */ (function () {\n    /**\n     * <p>Creates a finder that will search the image for three finder patterns.</p>\n     *\n     * @param image image to search\n     */\n    // public constructor(image: BitMatrix) {\n    //   this(image, null)\n    // }\n    function FinderPatternFinder(image, resultPointCallback) {\n        this.image = image;\n        this.resultPointCallback = resultPointCallback;\n        this.possibleCenters = [];\n        this.crossCheckStateCount = new Int32Array(5);\n        this.resultPointCallback = resultPointCallback;\n    }\n    FinderPatternFinder.prototype.getImage = function () {\n        return this.image;\n    };\n    FinderPatternFinder.prototype.getPossibleCenters = function () {\n        return this.possibleCenters;\n    };\n    FinderPatternFinder.prototype.find = function (hints) {\n        var tryHarder = (hints !== null && hints !== undefined) && undefined !== hints.get(DecodeHintType_1.default.TRY_HARDER);\n        var pureBarcode = (hints !== null && hints !== undefined) && undefined !== hints.get(DecodeHintType_1.default.PURE_BARCODE);\n        var image = this.image;\n        var maxI = image.getHeight();\n        var maxJ = image.getWidth();\n        // We are looking for black/white/black/white/black modules in\n        // 1:1:3:1:1 ratio; this tracks the number of such modules seen so far\n        // Let's assume that the maximum version QR Code we support takes up 1/4 the height of the\n        // image, and then account for the center being 3 modules in size. This gives the smallest\n        // number of pixels the center could be, so skip this often. When trying harder, look for all\n        // QR versions regardless of how dense they are.\n        var iSkip = Math.floor((3 * maxI) / (4 * FinderPatternFinder.MAX_MODULES));\n        if (iSkip < FinderPatternFinder.MIN_SKIP || tryHarder) {\n            iSkip = FinderPatternFinder.MIN_SKIP;\n        }\n        var done = false;\n        var stateCount = new Int32Array(5);\n        for (var i = iSkip - 1; i < maxI && !done; i += iSkip) {\n            // Get a row of black/white values\n            stateCount[0] = 0;\n            stateCount[1] = 0;\n            stateCount[2] = 0;\n            stateCount[3] = 0;\n            stateCount[4] = 0;\n            var currentState = 0;\n            for (var j = 0; j < maxJ; j++) {\n                if (image.get(j, i)) {\n                    // Black pixel\n                    if ((currentState & 1) === 1) { // Counting white pixels\n                        currentState++;\n                    }\n                    stateCount[currentState]++;\n                }\n                else { // White pixel\n                    if ((currentState & 1) === 0) { // Counting black pixels\n                        if (currentState === 4) { // A winner?\n                            if (FinderPatternFinder.foundPatternCross(stateCount)) { // Yes\n                                var confirmed = this.handlePossibleCenter(stateCount, i, j, pureBarcode);\n                                if (confirmed === true) {\n                                    // Start examining every other line. Checking each line turned out to be too\n                                    // expensive and didn't improve performance.\n                                    iSkip = 2;\n                                    if (this.hasSkipped === true) {\n                                        done = this.haveMultiplyConfirmedCenters();\n                                    }\n                                    else {\n                                        var rowSkip = this.findRowSkip();\n                                        if (rowSkip > stateCount[2]) {\n                                            // Skip rows between row of lower confirmed center\n                                            // and top of presumed third confirmed center\n                                            // but back up a bit to get a full chance of detecting\n                                            // it, entire width of center of finder pattern\n                                            // Skip by rowSkip, but back off by stateCount[2] (size of last center\n                                            // of pattern we saw) to be conservative, and also back off by iSkip which\n                                            // is about to be re-added\n                                            i += rowSkip - stateCount[2] - iSkip;\n                                            j = maxJ - 1;\n                                        }\n                                    }\n                                }\n                                else {\n                                    stateCount[0] = stateCount[2];\n                                    stateCount[1] = stateCount[3];\n                                    stateCount[2] = stateCount[4];\n                                    stateCount[3] = 1;\n                                    stateCount[4] = 0;\n                                    currentState = 3;\n                                    continue;\n                                }\n                                // Clear state to start looking again\n                                currentState = 0;\n                                stateCount[0] = 0;\n                                stateCount[1] = 0;\n                                stateCount[2] = 0;\n                                stateCount[3] = 0;\n                                stateCount[4] = 0;\n                            }\n                            else { // No, shift counts back by two\n                                stateCount[0] = stateCount[2];\n                                stateCount[1] = stateCount[3];\n                                stateCount[2] = stateCount[4];\n                                stateCount[3] = 1;\n                                stateCount[4] = 0;\n                                currentState = 3;\n                            }\n                        }\n                        else {\n                            stateCount[++currentState]++;\n                        }\n                    }\n                    else { // Counting white pixels\n                        stateCount[currentState]++;\n                    }\n                }\n            }\n            if (FinderPatternFinder.foundPatternCross(stateCount)) {\n                var confirmed = this.handlePossibleCenter(stateCount, i, maxJ, pureBarcode);\n                if (confirmed === true) {\n                    iSkip = stateCount[0];\n                    if (this.hasSkipped) {\n                        // Found a third one\n                        done = this.haveMultiplyConfirmedCenters();\n                    }\n                }\n            }\n        }\n        var patternInfo = this.selectBestPatterns();\n        ResultPoint_1.default.orderBestPatterns(patternInfo);\n        return new FinderPatternInfo_1.default(patternInfo);\n    };\n    /**\n     * Given a count of black/white/black/white/black pixels just seen and an end position,\n     * figures the location of the center of this run.\n     */\n    FinderPatternFinder.centerFromEnd = function (stateCount, end /*int*/) {\n        return (end - stateCount[4] - stateCount[3]) - stateCount[2] / 2.0;\n    };\n    /**\n     * @param stateCount count of black/white/black/white/black pixels just read\n     * @return true iff the proportions of the counts is close enough to the 1/1/3/1/1 ratios\n     *         used by finder patterns to be considered a match\n     */\n    FinderPatternFinder.foundPatternCross = function (stateCount) {\n        var totalModuleSize = 0;\n        for (var i = 0; i < 5; i++) {\n            var count = stateCount[i];\n            if (count === 0) {\n                return false;\n            }\n            totalModuleSize += count;\n        }\n        if (totalModuleSize < 7) {\n            return false;\n        }\n        var moduleSize = totalModuleSize / 7.0;\n        var maxVariance = moduleSize / 2.0;\n        // Allow less than 50% variance from 1-1-3-1-1 proportions\n        return Math.abs(moduleSize - stateCount[0]) < maxVariance &&\n            Math.abs(moduleSize - stateCount[1]) < maxVariance &&\n            Math.abs(3.0 * moduleSize - stateCount[2]) < 3 * maxVariance &&\n            Math.abs(moduleSize - stateCount[3]) < maxVariance &&\n            Math.abs(moduleSize - stateCount[4]) < maxVariance;\n    };\n    FinderPatternFinder.prototype.getCrossCheckStateCount = function () {\n        var crossCheckStateCount = this.crossCheckStateCount;\n        crossCheckStateCount[0] = 0;\n        crossCheckStateCount[1] = 0;\n        crossCheckStateCount[2] = 0;\n        crossCheckStateCount[3] = 0;\n        crossCheckStateCount[4] = 0;\n        return crossCheckStateCount;\n    };\n    /**\n     * After a vertical and horizontal scan finds a potential finder pattern, this method\n     * \"cross-cross-cross-checks\" by scanning down diagonally through the center of the possible\n     * finder pattern to see if the same proportion is detected.\n     *\n     * @param startI row where a finder pattern was detected\n     * @param centerJ center of the section that appears to cross a finder pattern\n     * @param maxCount maximum reasonable number of modules that should be\n     *  observed in any reading state, based on the results of the horizontal scan\n     * @param originalStateCountTotal The original state count total.\n     * @return true if proportions are withing expected limits\n     */\n    FinderPatternFinder.prototype.crossCheckDiagonal = function (startI /*int*/, centerJ /*int*/, maxCount /*int*/, originalStateCountTotal /*int*/) {\n        var stateCount = this.getCrossCheckStateCount();\n        // Start counting up, left from center finding black center mass\n        var i = 0;\n        var image = this.image;\n        while (startI >= i && centerJ >= i && image.get(centerJ - i, startI - i)) {\n            stateCount[2]++;\n            i++;\n        }\n        if (startI < i || centerJ < i) {\n            return false;\n        }\n        // Continue up, left finding white space\n        while (startI >= i && centerJ >= i && !image.get(centerJ - i, startI - i) &&\n            stateCount[1] <= maxCount) {\n            stateCount[1]++;\n            i++;\n        }\n        // If already too many modules in this state or ran off the edge:\n        if (startI < i || centerJ < i || stateCount[1] > maxCount) {\n            return false;\n        }\n        // Continue up, left finding black border\n        while (startI >= i && centerJ >= i && image.get(centerJ - i, startI - i) &&\n            stateCount[0] <= maxCount) {\n            stateCount[0]++;\n            i++;\n        }\n        if (stateCount[0] > maxCount) {\n            return false;\n        }\n        var maxI = image.getHeight();\n        var maxJ = image.getWidth();\n        // Now also count down, right from center\n        i = 1;\n        while (startI + i < maxI && centerJ + i < maxJ && image.get(centerJ + i, startI + i)) {\n            stateCount[2]++;\n            i++;\n        }\n        // Ran off the edge?\n        if (startI + i >= maxI || centerJ + i >= maxJ) {\n            return false;\n        }\n        while (startI + i < maxI && centerJ + i < maxJ && !image.get(centerJ + i, startI + i) &&\n            stateCount[3] < maxCount) {\n            stateCount[3]++;\n            i++;\n        }\n        if (startI + i >= maxI || centerJ + i >= maxJ || stateCount[3] >= maxCount) {\n            return false;\n        }\n        while (startI + i < maxI && centerJ + i < maxJ && image.get(centerJ + i, startI + i) &&\n            stateCount[4] < maxCount) {\n            stateCount[4]++;\n            i++;\n        }\n        if (stateCount[4] >= maxCount) {\n            return false;\n        }\n        // If we found a finder-pattern-like section, but its size is more than 100% different than\n        // the original, assume it's a false positive\n        var stateCountTotal = stateCount[0] + stateCount[1] + stateCount[2] + stateCount[3] + stateCount[4];\n        return Math.abs(stateCountTotal - originalStateCountTotal) < 2 * originalStateCountTotal &&\n            FinderPatternFinder.foundPatternCross(stateCount);\n    };\n    /**\n     * <p>After a horizontal scan finds a potential finder pattern, this method\n     * \"cross-checks\" by scanning down vertically through the center of the possible\n     * finder pattern to see if the same proportion is detected.</p>\n     *\n     * @param startI row where a finder pattern was detected\n     * @param centerJ center of the section that appears to cross a finder pattern\n     * @param maxCount maximum reasonable number of modules that should be\n     * observed in any reading state, based on the results of the horizontal scan\n     * @return vertical center of finder pattern, or {@link Float#NaN} if not found\n     */\n    FinderPatternFinder.prototype.crossCheckVertical = function (startI /*int*/, centerJ /*int*/, maxCount /*int*/, originalStateCountTotal /*int*/) {\n        var image = this.image;\n        var maxI = image.getHeight();\n        var stateCount = this.getCrossCheckStateCount();\n        // Start counting up from center\n        var i = startI;\n        while (i >= 0 && image.get(centerJ, i)) {\n            stateCount[2]++;\n            i--;\n        }\n        if (i < 0) {\n            return NaN;\n        }\n        while (i >= 0 && !image.get(centerJ, i) && stateCount[1] <= maxCount) {\n            stateCount[1]++;\n            i--;\n        }\n        // If already too many modules in this state or ran off the edge:\n        if (i < 0 || stateCount[1] > maxCount) {\n            return NaN;\n        }\n        while (i >= 0 && image.get(centerJ, i) && stateCount[0] <= maxCount) {\n            stateCount[0]++;\n            i--;\n        }\n        if (stateCount[0] > maxCount) {\n            return NaN;\n        }\n        // Now also count down from center\n        i = startI + 1;\n        while (i < maxI && image.get(centerJ, i)) {\n            stateCount[2]++;\n            i++;\n        }\n        if (i === maxI) {\n            return NaN;\n        }\n        while (i < maxI && !image.get(centerJ, i) && stateCount[3] < maxCount) {\n            stateCount[3]++;\n            i++;\n        }\n        if (i === maxI || stateCount[3] >= maxCount) {\n            return NaN;\n        }\n        while (i < maxI && image.get(centerJ, i) && stateCount[4] < maxCount) {\n            stateCount[4]++;\n            i++;\n        }\n        if (stateCount[4] >= maxCount) {\n            return NaN;\n        }\n        // If we found a finder-pattern-like section, but its size is more than 40% different than\n        // the original, assume it's a false positive\n        var stateCountTotal = stateCount[0] + stateCount[1] + stateCount[2] + stateCount[3] +\n            stateCount[4];\n        if (5 * Math.abs(stateCountTotal - originalStateCountTotal) >= 2 * originalStateCountTotal) {\n            return NaN;\n        }\n        return FinderPatternFinder.foundPatternCross(stateCount) ? FinderPatternFinder.centerFromEnd(stateCount, i) : NaN;\n    };\n    /**\n     * <p>Like {@link #crossCheckVertical(int, int, int, int)}, and in fact is basically identical,\n     * except it reads horizontally instead of vertically. This is used to cross-cross\n     * check a vertical cross check and locate the real center of the alignment pattern.</p>\n     */\n    FinderPatternFinder.prototype.crossCheckHorizontal = function (startJ /*int*/, centerI /*int*/, maxCount /*int*/, originalStateCountTotal /*int*/) {\n        var image = this.image;\n        var maxJ = image.getWidth();\n        var stateCount = this.getCrossCheckStateCount();\n        var j = startJ;\n        while (j >= 0 && image.get(j, centerI)) {\n            stateCount[2]++;\n            j--;\n        }\n        if (j < 0) {\n            return NaN;\n        }\n        while (j >= 0 && !image.get(j, centerI) && stateCount[1] <= maxCount) {\n            stateCount[1]++;\n            j--;\n        }\n        if (j < 0 || stateCount[1] > maxCount) {\n            return NaN;\n        }\n        while (j >= 0 && image.get(j, centerI) && stateCount[0] <= maxCount) {\n            stateCount[0]++;\n            j--;\n        }\n        if (stateCount[0] > maxCount) {\n            return NaN;\n        }\n        j = startJ + 1;\n        while (j < maxJ && image.get(j, centerI)) {\n            stateCount[2]++;\n            j++;\n        }\n        if (j === maxJ) {\n            return NaN;\n        }\n        while (j < maxJ && !image.get(j, centerI) && stateCount[3] < maxCount) {\n            stateCount[3]++;\n            j++;\n        }\n        if (j === maxJ || stateCount[3] >= maxCount) {\n            return NaN;\n        }\n        while (j < maxJ && image.get(j, centerI) && stateCount[4] < maxCount) {\n            stateCount[4]++;\n            j++;\n        }\n        if (stateCount[4] >= maxCount) {\n            return NaN;\n        }\n        // If we found a finder-pattern-like section, but its size is significantly different than\n        // the original, assume it's a false positive\n        var stateCountTotal = stateCount[0] + stateCount[1] + stateCount[2] + stateCount[3] +\n            stateCount[4];\n        if (5 * Math.abs(stateCountTotal - originalStateCountTotal) >= originalStateCountTotal) {\n            return NaN;\n        }\n        return FinderPatternFinder.foundPatternCross(stateCount) ? FinderPatternFinder.centerFromEnd(stateCount, j) : NaN;\n    };\n    /**\n     * <p>This is called when a horizontal scan finds a possible alignment pattern. It will\n     * cross check with a vertical scan, and if successful, will, ah, cross-cross-check\n     * with another horizontal scan. This is needed primarily to locate the real horizontal\n     * center of the pattern in cases of extreme skew.\n     * And then we cross-cross-cross check with another diagonal scan.</p>\n     *\n     * <p>If that succeeds the finder pattern location is added to a list that tracks\n     * the number of times each location has been nearly-matched as a finder pattern.\n     * Each additional find is more evidence that the location is in fact a finder\n     * pattern center\n     *\n     * @param stateCount reading state module counts from horizontal scan\n     * @param i row where finder pattern may be found\n     * @param j end of possible finder pattern in row\n     * @param pureBarcode true if in \"pure barcode\" mode\n     * @return true if a finder pattern candidate was found this time\n     */\n    FinderPatternFinder.prototype.handlePossibleCenter = function (stateCount, i /*int*/, j /*int*/, pureBarcode) {\n        var stateCountTotal = stateCount[0] + stateCount[1] + stateCount[2] + stateCount[3] +\n            stateCount[4];\n        var centerJ = FinderPatternFinder.centerFromEnd(stateCount, j);\n        var centerI = this.crossCheckVertical(i, /*(int) */ Math.floor(centerJ), stateCount[2], stateCountTotal);\n        if (!isNaN(centerI)) {\n            // Re-cross check\n            centerJ = this.crossCheckHorizontal(/*(int) */ Math.floor(centerJ), /*(int) */ Math.floor(centerI), stateCount[2], stateCountTotal);\n            if (!isNaN(centerJ) &&\n                (!pureBarcode || this.crossCheckDiagonal(/*(int) */ Math.floor(centerI), /*(int) */ Math.floor(centerJ), stateCount[2], stateCountTotal))) {\n                var estimatedModuleSize = stateCountTotal / 7.0;\n                var found = false;\n                var possibleCenters = this.possibleCenters;\n                for (var index = 0, length_1 = possibleCenters.length; index < length_1; index++) {\n                    var center = possibleCenters[index];\n                    // Look for about the same center and module size:\n                    if (center.aboutEquals(estimatedModuleSize, centerI, centerJ)) {\n                        possibleCenters[index] = center.combineEstimate(centerI, centerJ, estimatedModuleSize);\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) {\n                    var point = new FinderPattern_1.default(centerJ, centerI, estimatedModuleSize);\n                    possibleCenters.push(point);\n                    if (this.resultPointCallback !== null && this.resultPointCallback !== undefined) {\n                        this.resultPointCallback.foundPossibleResultPoint(point);\n                    }\n                }\n                return true;\n            }\n        }\n        return false;\n    };\n    /**\n     * @return number of rows we could safely skip during scanning, based on the first\n     *         two finder patterns that have been located. In some cases their position will\n     *         allow us to infer that the third pattern must lie below a certain point farther\n     *         down in the image.\n     */\n    FinderPatternFinder.prototype.findRowSkip = function () {\n        var e_1, _a;\n        var max = this.possibleCenters.length;\n        if (max <= 1) {\n            return 0;\n        }\n        var firstConfirmedCenter = null;\n        try {\n            for (var _b = __values(this.possibleCenters), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var center = _c.value;\n                if (center.getCount() >= FinderPatternFinder.CENTER_QUORUM) {\n                    if (firstConfirmedCenter == null) {\n                        firstConfirmedCenter = center;\n                    }\n                    else {\n                        // We have two confirmed centers\n                        // How far down can we skip before resuming looking for the next\n                        // pattern? In the worst case, only the difference between the\n                        // difference in the x / y coordinates of the two centers.\n                        // This is the case where you find top left last.\n                        this.hasSkipped = true;\n                        return /*(int) */ Math.floor((Math.abs(firstConfirmedCenter.getX() - center.getX()) -\n                            Math.abs(firstConfirmedCenter.getY() - center.getY())) / 2);\n                    }\n                }\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        return 0;\n    };\n    /**\n     * @return true iff we have found at least 3 finder patterns that have been detected\n     *         at least {@link #CENTER_QUORUM} times each, and, the estimated module size of the\n     *         candidates is \"pretty similar\"\n     */\n    FinderPatternFinder.prototype.haveMultiplyConfirmedCenters = function () {\n        var e_2, _a, e_3, _b;\n        var confirmedCount = 0;\n        var totalModuleSize = 0.0;\n        var max = this.possibleCenters.length;\n        try {\n            for (var _c = __values(this.possibleCenters), _d = _c.next(); !_d.done; _d = _c.next()) {\n                var pattern = _d.value;\n                if (pattern.getCount() >= FinderPatternFinder.CENTER_QUORUM) {\n                    confirmedCount++;\n                    totalModuleSize += pattern.getEstimatedModuleSize();\n                }\n            }\n        }\n        catch (e_2_1) { e_2 = { error: e_2_1 }; }\n        finally {\n            try {\n                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n            }\n            finally { if (e_2) throw e_2.error; }\n        }\n        if (confirmedCount < 3) {\n            return false;\n        }\n        // OK, we have at least 3 confirmed centers, but, it's possible that one is a \"false positive\"\n        // and that we need to keep looking. We detect this by asking if the estimated module sizes\n        // vary too much. We arbitrarily say that when the total deviation from average exceeds\n        // 5% of the total module size estimates, it's too much.\n        var average = totalModuleSize / max;\n        var totalDeviation = 0.0;\n        try {\n            for (var _e = __values(this.possibleCenters), _f = _e.next(); !_f.done; _f = _e.next()) {\n                var pattern = _f.value;\n                totalDeviation += Math.abs(pattern.getEstimatedModuleSize() - average);\n            }\n        }\n        catch (e_3_1) { e_3 = { error: e_3_1 }; }\n        finally {\n            try {\n                if (_f && !_f.done && (_b = _e.return)) _b.call(_e);\n            }\n            finally { if (e_3) throw e_3.error; }\n        }\n        return totalDeviation <= 0.05 * totalModuleSize;\n    };\n    /**\n     * @return the 3 best {@link FinderPattern}s from our list of candidates. The \"best\" are\n     *         those that have been detected at least {@link #CENTER_QUORUM} times, and whose module\n     *         size differs from the average among those patterns the least\n     * @throws NotFoundException if 3 such finder patterns do not exist\n     */\n    FinderPatternFinder.prototype.selectBestPatterns = function () {\n        var e_4, _a, e_5, _b;\n        var startSize = this.possibleCenters.length;\n        if (startSize < 3) {\n            // Couldn't find enough finder patterns\n            throw new NotFoundException_1.default();\n        }\n        var possibleCenters = this.possibleCenters;\n        var average;\n        // Filter outlier possibilities whose module size is too different\n        if (startSize > 3) {\n            // But we can only afford to do so if we have at least 4 possibilities to choose from\n            var totalModuleSize = 0.0;\n            var square = 0.0;\n            try {\n                for (var _c = __values(this.possibleCenters), _d = _c.next(); !_d.done; _d = _c.next()) {\n                    var center = _d.value;\n                    var size = center.getEstimatedModuleSize();\n                    totalModuleSize += size;\n                    square += size * size;\n                }\n            }\n            catch (e_4_1) { e_4 = { error: e_4_1 }; }\n            finally {\n                try {\n                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n                }\n                finally { if (e_4) throw e_4.error; }\n            }\n            average = totalModuleSize / startSize;\n            var stdDev = Math.sqrt(square / startSize - average * average);\n            possibleCenters.sort(\n            /**\n             * <p>Orders by furthest from average</p>\n             */\n            // FurthestFromAverageComparator implements Comparator<FinderPattern>\n            function (center1, center2) {\n                var dA = Math.abs(center2.getEstimatedModuleSize() - average);\n                var dB = Math.abs(center1.getEstimatedModuleSize() - average);\n                return dA < dB ? -1 : dA > dB ? 1 : 0;\n            });\n            var limit = Math.max(0.2 * average, stdDev);\n            for (var i = 0; i < possibleCenters.length && possibleCenters.length > 3; i++) {\n                var pattern = possibleCenters[i];\n                if (Math.abs(pattern.getEstimatedModuleSize() - average) > limit) {\n                    possibleCenters.splice(i, 1);\n                    i--;\n                }\n            }\n        }\n        if (possibleCenters.length > 3) {\n            // Throw away all but those first size candidate points we found.\n            var totalModuleSize = 0.0;\n            try {\n                for (var possibleCenters_1 = __values(possibleCenters), possibleCenters_1_1 = possibleCenters_1.next(); !possibleCenters_1_1.done; possibleCenters_1_1 = possibleCenters_1.next()) {\n                    var possibleCenter = possibleCenters_1_1.value;\n                    totalModuleSize += possibleCenter.getEstimatedModuleSize();\n                }\n            }\n            catch (e_5_1) { e_5 = { error: e_5_1 }; }\n            finally {\n                try {\n                    if (possibleCenters_1_1 && !possibleCenters_1_1.done && (_b = possibleCenters_1.return)) _b.call(possibleCenters_1);\n                }\n                finally { if (e_5) throw e_5.error; }\n            }\n            average = totalModuleSize / possibleCenters.length;\n            possibleCenters.sort(\n            /**\n             * <p>Orders by {@link FinderPattern#getCount()}, descending.</p>\n             */\n            // CenterComparator implements Comparator<FinderPattern>\n            function (center1, center2) {\n                if (center2.getCount() === center1.getCount()) {\n                    var dA = Math.abs(center2.getEstimatedModuleSize() - average);\n                    var dB = Math.abs(center1.getEstimatedModuleSize() - average);\n                    return dA < dB ? 1 : dA > dB ? -1 : 0;\n                }\n                else {\n                    return center2.getCount() - center1.getCount();\n                }\n            });\n            possibleCenters.splice(3); // this is not realy necessary as we only return first 3 anyway\n        }\n        return [\n            possibleCenters[0],\n            possibleCenters[1],\n            possibleCenters[2]\n        ];\n    };\n    FinderPatternFinder.CENTER_QUORUM = 2;\n    FinderPatternFinder.MIN_SKIP = 3; // 1 pixel/module times 3 modules/center\n    FinderPatternFinder.MAX_MODULES = 57; // support up to version 10 for mobile clients\n    return FinderPatternFinder;\n}());\nexports.default = FinderPatternFinder;\n//# sourceMappingURL=FinderPatternFinder.js.map"]},"metadata":{},"sourceType":"script"}