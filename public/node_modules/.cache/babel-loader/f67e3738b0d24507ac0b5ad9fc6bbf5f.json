{"ast":null,"code":"var _jsxFileName = \"/home/gael/development/base-back-end/frontend/src/components/effects/LoadingComp.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { IonLoading } from \"@ionic/react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { loaddingOff } from \"../../redux/actions/effects.actions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst LoadingComp = () => {\n  _s();\n\n  const {\n    loadding = false\n  } = useSelector(state => state.effects);\n  const dispatch = useDispatch();\n  return /*#__PURE__*/_jsxDEV(IonLoading, {\n    isOpen: loadding,\n    onDidDismiss: () => dispatch(loaddingOff()),\n    message: \"cargando...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 12\n  }, this);\n};\n\n_s(LoadingComp, \"Es/YkuWBUV/Nzf1GjCjoUTCGsrM=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = LoadingComp;\nexport default LoadingComp;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoadingComp\");","map":{"version":3,"sources":["/home/gael/development/base-back-end/frontend/src/components/effects/LoadingComp.tsx"],"names":["React","IonLoading","useDispatch","useSelector","loaddingOff","LoadingComp","loadding","state","effects","dispatch"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,WAAT,QAA4B,qCAA5B;;;AAIA,MAAMC,WAAW,GAAG,MAAM;AAAA;;AACtB,QAAM;AAAEC,IAAAA,QAAQ,GAAC;AAAX,MAAmCH,WAAW,CAAEI,KAAD,IAAgBA,KAAK,CAACC,OAAvB,CAApD;AACA,QAAMC,QAAQ,GAAGP,WAAW,EAA5B;AACA,sBAAO,QAAC,UAAD;AACH,IAAA,MAAM,EAAEI,QADL;AAEH,IAAA,YAAY,EAAE,MAAMG,QAAQ,CAACL,WAAW,EAAZ,CAFzB;AAGH,IAAA,OAAO,EAAC;AAHL;AAAA;AAAA;AAAA;AAAA,UAAP;AAKH,CARD;;GAAMC,W;UACuCF,W,EACxBD,W;;;KAFfG,W;AAUN,eAAeA,WAAf","sourcesContent":["import React from \"react\";\nimport { IonLoading } from \"@ionic/react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { loaddingOff } from \"../../redux/actions/effects.actions\";\nimport { efectaInitial } from \"../../redux/reducers/effects\";\n\n\nconst LoadingComp = () => {\n    const { loadding=false }:efectaInitial = useSelector((state: any) => state.effects);\n    const dispatch = useDispatch();\n    return <IonLoading\n        isOpen={loadding}\n        onDidDismiss={() => dispatch(loaddingOff())}\n        message='cargando...'\n    />\n}\n\nexport default LoadingComp;"]},"metadata":{},"sourceType":"module"}