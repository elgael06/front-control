{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar AbstractExpandedDecoder_1 = require(\"./AbstractExpandedDecoder\");\n\nvar AI01decoder =\n/** @class */\nfunction (_super) {\n  __extends(AI01decoder, _super);\n\n  function AI01decoder(information) {\n    return _super.call(this, information) || this;\n  }\n\n  AI01decoder.prototype.encodeCompressedGtin = function (buf, currentPos) {\n    buf.append(\"(01)\");\n    var initialPosition = buf.length();\n    buf.append('9');\n    this.encodeCompressedGtinWithoutAI(buf, currentPos, initialPosition);\n  };\n\n  AI01decoder.prototype.encodeCompressedGtinWithoutAI = function (buf, currentPos, initialBufferPosition) {\n    for (var i = 0; i < 4; ++i) {\n      var currentBlock = this.getGeneralDecoder().extractNumericValueFromBitArray(currentPos + 10 * i, 10);\n\n      if (currentBlock / 100 == 0) {\n        buf.append('0');\n      }\n\n      if (currentBlock / 10 == 0) {\n        buf.append('0');\n      }\n\n      buf.append(currentBlock);\n    }\n\n    AI01decoder.appendCheckDigit(buf, initialBufferPosition);\n  };\n\n  AI01decoder.appendCheckDigit = function (buf, currentPos) {\n    var checkDigit = 0;\n\n    for (var i = 0; i < 13; i++) {\n      //let digit = buf.charAt(i + currentPos) - '0';\n      //To be checked\n      var digit = buf.charAt(i + currentPos).charCodeAt(0) - '0'.charCodeAt(0);\n      checkDigit += (i & 0x01) == 0 ? 3 * digit : digit;\n    }\n\n    checkDigit = 10 - checkDigit % 10;\n\n    if (checkDigit == 10) {\n      checkDigit = 0;\n    }\n\n    buf.append(checkDigit);\n  };\n\n  AI01decoder.GTIN_SIZE = 40;\n  return AI01decoder;\n}(AbstractExpandedDecoder_1.default);\n\nexports.default = AI01decoder;","map":{"version":3,"sources":["../../../../../../src/core/oned/rss/expanded/decoders/AI01decoder.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,IAAA,yBAAA,GAAA,OAAA,CAAA,2BAAA,CAAA;;AAEA,IAAA,WAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAkD,EAAA,SAAA,CAAA,WAAA,EAAA,MAAA,CAAA;;AAIhD,WAAA,WAAA,CAAY,WAAZ,EAAiC;WAC/B,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,WAAN,KAAkB,I;AACnB;;AACC,EAAA,WAAA,CAAA,SAAA,CAAA,oBAAA,GAAA,UAAqB,GAArB,EAAwC,UAAxC,EAAyD;AACzD,IAAA,GAAG,CAAC,MAAJ,CAAW,MAAX;AACA,QAAI,eAAe,GAAG,GAAG,CAAC,MAAJ,EAAtB;AACA,IAAA,GAAG,CAAC,MAAJ,CAAW,GAAX;AAEA,SAAK,6BAAL,CAAmC,GAAnC,EAAwC,UAAxC,EAAoD,eAApD;AACD,GANC;;AAQH,EAAA,WAAA,CAAA,SAAA,CAAA,6BAAA,GAAA,UAA+B,GAA/B,EAAkD,UAAlD,EAAqE,qBAArE,EAAiG;AAC9F,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,CAApB,EAAuB,EAAE,CAAzB,EAA4B;AAC1B,UAAI,YAAY,GAAG,KAAK,iBAAL,GAAyB,+BAAzB,CAAyD,UAAU,GAAG,KAAK,CAA3E,EAA8E,EAA9E,CAAnB;;AACA,UAAI,YAAY,GAAG,GAAf,IAAsB,CAA1B,EAA6B;AAC3B,QAAA,GAAG,CAAC,MAAJ,CAAW,GAAX;AACD;;AACD,UAAI,YAAY,GAAG,EAAf,IAAqB,CAAzB,EAA4B;AAC1B,QAAA,GAAG,CAAC,MAAJ,CAAW,GAAX;AACD;;AACD,MAAA,GAAG,CAAC,MAAJ,CAAW,YAAX;AACD;;AAEC,IAAA,WAAW,CAAC,gBAAZ,CAA6B,GAA7B,EAAkC,qBAAlC;AACH,GAbF;;AAeiB,EAAA,WAAA,CAAA,gBAAA,GAAhB,UAAiC,GAAjC,EAAoD,UAApD,EAAqE;AACnE,QAAI,UAAU,GAAG,CAAjB;;AACA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,EAApB,EAAwB,CAAC,EAAzB,EAA6B;AAC3B;AACA;AACA,UAAI,KAAK,GAAG,GAAG,CAAC,MAAJ,CAAW,CAAC,GAAG,UAAf,EAA2B,UAA3B,CAAsC,CAAtC,IAA2C,IAAI,UAAJ,CAAe,CAAf,CAAvD;AACA,MAAA,UAAU,IAAI,CAAC,CAAC,GAAG,IAAL,KAAc,CAAd,GAAkB,IAAI,KAAtB,GAA8B,KAA5C;AACD;;AAED,IAAA,UAAU,GAAG,KAAM,UAAU,GAAG,EAAhC;;AACA,QAAI,UAAU,IAAI,EAAlB,EAAsB;AACpB,MAAA,UAAU,GAAG,CAAb;AACD;;AAED,IAAA,GAAG,CAAC,MAAJ,CAAW,UAAX;AACD,GAfe;;AA5BC,EAAA,WAAA,CAAA,SAAA,GAAmB,EAAnB;AA6CnB,SAAA,WAAA;AAAC,CA/CD,CAAkD,yBAAA,CAAA,OAAlD,CAAA;;kBAA8B,W","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar AbstractExpandedDecoder_1 = require(\"./AbstractExpandedDecoder\");\nvar AI01decoder = /** @class */ (function (_super) {\n    __extends(AI01decoder, _super);\n    function AI01decoder(information) {\n        return _super.call(this, information) || this;\n    }\n    AI01decoder.prototype.encodeCompressedGtin = function (buf, currentPos) {\n        buf.append(\"(01)\");\n        var initialPosition = buf.length();\n        buf.append('9');\n        this.encodeCompressedGtinWithoutAI(buf, currentPos, initialPosition);\n    };\n    AI01decoder.prototype.encodeCompressedGtinWithoutAI = function (buf, currentPos, initialBufferPosition) {\n        for (var i = 0; i < 4; ++i) {\n            var currentBlock = this.getGeneralDecoder().extractNumericValueFromBitArray(currentPos + 10 * i, 10);\n            if (currentBlock / 100 == 0) {\n                buf.append('0');\n            }\n            if (currentBlock / 10 == 0) {\n                buf.append('0');\n            }\n            buf.append(currentBlock);\n        }\n        AI01decoder.appendCheckDigit(buf, initialBufferPosition);\n    };\n    AI01decoder.appendCheckDigit = function (buf, currentPos) {\n        var checkDigit = 0;\n        for (var i = 0; i < 13; i++) {\n            //let digit = buf.charAt(i + currentPos) - '0';\n            //To be checked\n            var digit = buf.charAt(i + currentPos).charCodeAt(0) - '0'.charCodeAt(0);\n            checkDigit += (i & 0x01) == 0 ? 3 * digit : digit;\n        }\n        checkDigit = 10 - (checkDigit % 10);\n        if (checkDigit == 10) {\n            checkDigit = 0;\n        }\n        buf.append(checkDigit);\n    };\n    AI01decoder.GTIN_SIZE = 40;\n    return AI01decoder;\n}(AbstractExpandedDecoder_1.default));\nexports.default = AI01decoder;\n//# sourceMappingURL=AI01decoder.js.map"]},"metadata":{},"sourceType":"script"}