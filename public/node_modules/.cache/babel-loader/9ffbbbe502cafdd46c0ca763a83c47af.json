{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2008 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar GenericGFPoly_1 = require(\"./GenericGFPoly\");\n\nvar System_1 = require(\"../../util/System\");\n\nvar IllegalArgumentException_1 = require(\"../../IllegalArgumentException\");\n/**\n * <p>Implements Reed-Solomon encoding, as the name implies.</p>\n *\n * @author Sean Owen\n * @author William Rucklidge\n */\n\n\nvar ReedSolomonEncoder =\n/** @class */\nfunction () {\n  /**\n   * A reed solomon error-correcting encoding constructor is created by\n   * passing as Galois Field with of size equal to the number of code\n   * words (symbols) in the alphabet (the number of values in each\n   * element of arrays that are encoded/decoded).\n   * @param field A galois field with a number of elements equal to the size\n   * of the alphabet of symbols to encode.\n   */\n  function ReedSolomonEncoder(field) {\n    this.field = field;\n    this.cachedGenerators = [];\n    this.cachedGenerators.push(new GenericGFPoly_1.default(field, Int32Array.from([1])));\n  }\n\n  ReedSolomonEncoder.prototype.buildGenerator = function (degree\n  /*int*/\n  ) {\n    var cachedGenerators = this.cachedGenerators;\n\n    if (degree >= cachedGenerators.length) {\n      var lastGenerator = cachedGenerators[cachedGenerators.length - 1];\n      var field = this.field;\n\n      for (var d = cachedGenerators.length; d <= degree; d++) {\n        var nextGenerator = lastGenerator.multiply(new GenericGFPoly_1.default(field, Int32Array.from([1, field.exp(d - 1 + field.getGeneratorBase())])));\n        cachedGenerators.push(nextGenerator);\n        lastGenerator = nextGenerator;\n      }\n    }\n\n    return cachedGenerators[degree];\n  };\n  /**\n   * <p>Encode a sequence of code words (symbols) using Reed-Solomon to allow decoders\n   * to detect and correct errors that may have been introduced when the resulting\n   * data is stored or transmitted.</p>\n   *\n   * @param toEncode array used for both and output. Caller initializes the array with\n   * the code words (symbols) to be encoded followed by empty elements allocated to make\n   * space for error-correction code words in the encoded output. The array contains\n   * the encdoded output when encode returns. Code words are encoded as numbers from\n   * 0 to n-1, where n is the number of possible code words (symbols), as determined\n   * by the size of the Galois Field passed in the constructor of this object.\n   * @param ecBytes the number of elements reserved in the array (first parameter)\n   * to store error-correction code words. Thus, the number of code words (symbols)\n   * to encode in the first parameter is thus toEncode.length - ecBytes.\n   * Note, the use of \"bytes\" in the name of this parameter is misleading, as there may\n   * be more or fewer than 256 symbols being encoded, as determined by the number of\n   * elements in the Galois Field passed as a constructor to this object.\n   * @throws IllegalArgumentException thrown in response to validation errros.\n   */\n\n\n  ReedSolomonEncoder.prototype.encode = function (toEncode, ecBytes\n  /*int*/\n  ) {\n    if (ecBytes === 0) {\n      throw new IllegalArgumentException_1.default('No error correction bytes');\n    }\n\n    var dataBytes = toEncode.length - ecBytes;\n\n    if (dataBytes <= 0) {\n      throw new IllegalArgumentException_1.default('No data bytes provided');\n    }\n\n    var generator = this.buildGenerator(ecBytes);\n    var infoCoefficients = new Int32Array(dataBytes);\n    System_1.default.arraycopy(toEncode, 0, infoCoefficients, 0, dataBytes);\n    var info = new GenericGFPoly_1.default(this.field, infoCoefficients);\n    info = info.multiplyByMonomial(ecBytes, 1);\n    var remainder = info.divide(generator)[1];\n    var coefficients = remainder.getCoefficients();\n    var numZeroCoefficients = ecBytes - coefficients.length;\n\n    for (var i = 0; i < numZeroCoefficients; i++) {\n      toEncode[dataBytes + i] = 0;\n    }\n\n    System_1.default.arraycopy(coefficients, 0, toEncode, dataBytes + numZeroCoefficients, coefficients.length);\n  };\n\n  return ReedSolomonEncoder;\n}();\n\nexports.default = ReedSolomonEncoder;","map":{"version":3,"sources":["../../../../src/core/common/reedsolomon/ReedSolomonEncoder.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/*\n * Copyright 2008 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar GenericGFPoly_1 = require(\"./GenericGFPoly\");\nvar System_1 = require(\"../../util/System\");\nvar IllegalArgumentException_1 = require(\"../../IllegalArgumentException\");\n/**\n * <p>Implements Reed-Solomon encoding, as the name implies.</p>\n *\n * @author Sean Owen\n * @author William Rucklidge\n */\nvar ReedSolomonEncoder = /** @class */ (function () {\n    /**\n     * A reed solomon error-correcting encoding constructor is created by\n     * passing as Galois Field with of size equal to the number of code\n     * words (symbols) in the alphabet (the number of values in each\n     * element of arrays that are encoded/decoded).\n     * @param field A galois field with a number of elements equal to the size\n     * of the alphabet of symbols to encode.\n     */\n    function ReedSolomonEncoder(field) {\n        this.field = field;\n        this.cachedGenerators = [];\n        this.cachedGenerators.push(new GenericGFPoly_1.default(field, Int32Array.from([1])));\n    }\n    ReedSolomonEncoder.prototype.buildGenerator = function (degree /*int*/) {\n        var cachedGenerators = this.cachedGenerators;\n        if (degree >= cachedGenerators.length) {\n            var lastGenerator = cachedGenerators[cachedGenerators.length - 1];\n            var field = this.field;\n            for (var d = cachedGenerators.length; d <= degree; d++) {\n                var nextGenerator = lastGenerator.multiply(new GenericGFPoly_1.default(field, Int32Array.from([1, field.exp(d - 1 + field.getGeneratorBase())])));\n                cachedGenerators.push(nextGenerator);\n                lastGenerator = nextGenerator;\n            }\n        }\n        return cachedGenerators[degree];\n    };\n    /**\n     * <p>Encode a sequence of code words (symbols) using Reed-Solomon to allow decoders\n     * to detect and correct errors that may have been introduced when the resulting\n     * data is stored or transmitted.</p>\n     *\n     * @param toEncode array used for both and output. Caller initializes the array with\n     * the code words (symbols) to be encoded followed by empty elements allocated to make\n     * space for error-correction code words in the encoded output. The array contains\n     * the encdoded output when encode returns. Code words are encoded as numbers from\n     * 0 to n-1, where n is the number of possible code words (symbols), as determined\n     * by the size of the Galois Field passed in the constructor of this object.\n     * @param ecBytes the number of elements reserved in the array (first parameter)\n     * to store error-correction code words. Thus, the number of code words (symbols)\n     * to encode in the first parameter is thus toEncode.length - ecBytes.\n     * Note, the use of \"bytes\" in the name of this parameter is misleading, as there may\n     * be more or fewer than 256 symbols being encoded, as determined by the number of\n     * elements in the Galois Field passed as a constructor to this object.\n     * @throws IllegalArgumentException thrown in response to validation errros.\n     */\n    ReedSolomonEncoder.prototype.encode = function (toEncode, ecBytes /*int*/) {\n        if (ecBytes === 0) {\n            throw new IllegalArgumentException_1.default('No error correction bytes');\n        }\n        var dataBytes = toEncode.length - ecBytes;\n        if (dataBytes <= 0) {\n            throw new IllegalArgumentException_1.default('No data bytes provided');\n        }\n        var generator = this.buildGenerator(ecBytes);\n        var infoCoefficients = new Int32Array(dataBytes);\n        System_1.default.arraycopy(toEncode, 0, infoCoefficients, 0, dataBytes);\n        var info = new GenericGFPoly_1.default(this.field, infoCoefficients);\n        info = info.multiplyByMonomial(ecBytes, 1);\n        var remainder = info.divide(generator)[1];\n        var coefficients = remainder.getCoefficients();\n        var numZeroCoefficients = ecBytes - coefficients.length;\n        for (var i = 0; i < numZeroCoefficients; i++) {\n            toEncode[dataBytes + i] = 0;\n        }\n        System_1.default.arraycopy(coefficients, 0, toEncode, dataBytes + numZeroCoefficients, coefficients.length);\n    };\n    return ReedSolomonEncoder;\n}());\nexports.default = ReedSolomonEncoder;\n//# sourceMappingURL=ReedSolomonEncoder.js.map"]},"metadata":{},"sourceType":"script"}