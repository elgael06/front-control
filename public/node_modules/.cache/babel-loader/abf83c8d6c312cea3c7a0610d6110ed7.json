{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2008 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar __values = this && this.__values || function (o) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator],\n      i = 0;\n  if (m) return m.call(o);\n  return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*namespace com.google.zxing.qrcode.encoder {*/\n\n/*import java.util.Arrays;*/\n\nvar Arrays_1 = require(\"../../util/Arrays\");\n\nvar StringBuilder_1 = require(\"../../util/StringBuilder\");\n/**\n * JAVAPORT: The original code was a 2D array of ints, but since it only ever gets assigned\n * -1, 0, and 1, I'm going to use less memory and go with bytes.\n *\n * @author dswitkin@google.com (Daniel Switkin)\n */\n\n\nvar ByteMatrix =\n/** @class */\nfunction () {\n  function ByteMatrix(width\n  /*int*/\n  , height\n  /*int*/\n  ) {\n    this.width = width;\n    this.height = height;\n    var bytes = new Array(height); // [height][width]\n\n    for (var i = 0; i !== height; i++) {\n      bytes[i] = new Uint8Array(width);\n    }\n\n    this.bytes = bytes;\n  }\n\n  ByteMatrix.prototype.getHeight = function () {\n    return this.height;\n  };\n\n  ByteMatrix.prototype.getWidth = function () {\n    return this.width;\n  };\n\n  ByteMatrix.prototype.get = function (x\n  /*int*/\n  , y\n  /*int*/\n  ) {\n    return this.bytes[y][x];\n  };\n  /**\n   * @return an internal representation as bytes, in row-major order. array[y][x] represents point (x,y)\n   */\n\n\n  ByteMatrix.prototype.getArray = function () {\n    return this.bytes;\n  }; // TYPESCRIPTPORT: preffer to let two methods instead of override to avoid type comparison inside\n\n\n  ByteMatrix.prototype.setNumber = function (x\n  /*int*/\n  , y\n  /*int*/\n  , value\n  /*byte|int*/\n  ) {\n    this.bytes[y][x] = value;\n  }; // public set(x: number /*int*/, y: number /*int*/, value: number /*int*/): void {\n  //   bytes[y][x] = (byte) value\n  // }\n\n\n  ByteMatrix.prototype.setBoolean = function (x\n  /*int*/\n  , y\n  /*int*/\n  , value) {\n    this.bytes[y][x] =\n    /*(byte) */\n    value ? 1 : 0;\n  };\n\n  ByteMatrix.prototype.clear = function (value\n  /*byte*/\n  ) {\n    var e_1, _a;\n\n    try {\n      for (var _b = __values(this.bytes), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var aByte = _c.value;\n        Arrays_1.default.fill(aByte, value);\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n  };\n\n  ByteMatrix.prototype.equals = function (o) {\n    if (!(o instanceof ByteMatrix)) {\n      return false;\n    }\n\n    var other = o;\n\n    if (this.width !== other.width) {\n      return false;\n    }\n\n    if (this.height !== other.height) {\n      return false;\n    }\n\n    for (var y = 0, height = this.height; y < height; ++y) {\n      var bytesY = this.bytes[y];\n      var otherBytesY = other.bytes[y];\n\n      for (var x = 0, width = this.width; x < width; ++x) {\n        if (bytesY[x] !== otherBytesY[x]) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  };\n  /*@Override*/\n\n\n  ByteMatrix.prototype.toString = function () {\n    var result = new StringBuilder_1.default(); // (2 * width * height + 2)\n\n    for (var y = 0, height = this.height; y < height; ++y) {\n      var bytesY = this.bytes[y];\n\n      for (var x = 0, width = this.width; x < width; ++x) {\n        switch (bytesY[x]) {\n          case 0:\n            result.append(' 0');\n            break;\n\n          case 1:\n            result.append(' 1');\n            break;\n\n          default:\n            result.append('  ');\n            break;\n        }\n      }\n\n      result.append('\\n');\n    }\n\n    return result.toString();\n  };\n\n  return ByteMatrix;\n}();\n\nexports.default = ByteMatrix;","map":{"version":3,"sources":["../../../../src/core/qrcode/encoder/ByteMatrix.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/*\n * Copyright 2008 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __values = (this && this.__values) || function (o) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\n    if (m) return m.call(o);\n    return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/*namespace com.google.zxing.qrcode.encoder {*/\n/*import java.util.Arrays;*/\nvar Arrays_1 = require(\"../../util/Arrays\");\nvar StringBuilder_1 = require(\"../../util/StringBuilder\");\n/**\n * JAVAPORT: The original code was a 2D array of ints, but since it only ever gets assigned\n * -1, 0, and 1, I'm going to use less memory and go with bytes.\n *\n * @author dswitkin@google.com (Daniel Switkin)\n */\nvar ByteMatrix = /** @class */ (function () {\n    function ByteMatrix(width /*int*/, height /*int*/) {\n        this.width = width;\n        this.height = height;\n        var bytes = new Array(height); // [height][width]\n        for (var i = 0; i !== height; i++) {\n            bytes[i] = new Uint8Array(width);\n        }\n        this.bytes = bytes;\n    }\n    ByteMatrix.prototype.getHeight = function () {\n        return this.height;\n    };\n    ByteMatrix.prototype.getWidth = function () {\n        return this.width;\n    };\n    ByteMatrix.prototype.get = function (x /*int*/, y /*int*/) {\n        return this.bytes[y][x];\n    };\n    /**\n     * @return an internal representation as bytes, in row-major order. array[y][x] represents point (x,y)\n     */\n    ByteMatrix.prototype.getArray = function () {\n        return this.bytes;\n    };\n    // TYPESCRIPTPORT: preffer to let two methods instead of override to avoid type comparison inside\n    ByteMatrix.prototype.setNumber = function (x /*int*/, y /*int*/, value /*byte|int*/) {\n        this.bytes[y][x] = value;\n    };\n    // public set(x: number /*int*/, y: number /*int*/, value: number /*int*/): void {\n    //   bytes[y][x] = (byte) value\n    // }\n    ByteMatrix.prototype.setBoolean = function (x /*int*/, y /*int*/, value) {\n        this.bytes[y][x] = /*(byte) */ (value ? 1 : 0);\n    };\n    ByteMatrix.prototype.clear = function (value /*byte*/) {\n        var e_1, _a;\n        try {\n            for (var _b = __values(this.bytes), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var aByte = _c.value;\n                Arrays_1.default.fill(aByte, value);\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n    };\n    ByteMatrix.prototype.equals = function (o) {\n        if (!(o instanceof ByteMatrix)) {\n            return false;\n        }\n        var other = o;\n        if (this.width !== other.width) {\n            return false;\n        }\n        if (this.height !== other.height) {\n            return false;\n        }\n        for (var y = 0, height = this.height; y < height; ++y) {\n            var bytesY = this.bytes[y];\n            var otherBytesY = other.bytes[y];\n            for (var x = 0, width = this.width; x < width; ++x) {\n                if (bytesY[x] !== otherBytesY[x]) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    };\n    /*@Override*/\n    ByteMatrix.prototype.toString = function () {\n        var result = new StringBuilder_1.default(); // (2 * width * height + 2)\n        for (var y = 0, height = this.height; y < height; ++y) {\n            var bytesY = this.bytes[y];\n            for (var x = 0, width = this.width; x < width; ++x) {\n                switch (bytesY[x]) {\n                    case 0:\n                        result.append(' 0');\n                        break;\n                    case 1:\n                        result.append(' 1');\n                        break;\n                    default:\n                        result.append('  ');\n                        break;\n                }\n            }\n            result.append('\\n');\n        }\n        return result.toString();\n    };\n    return ByteMatrix;\n}());\nexports.default = ByteMatrix;\n//# sourceMappingURL=ByteMatrix.js.map"]},"metadata":{},"sourceType":"script"}