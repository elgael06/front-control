{"ast":null,"code":"\"use strict\";\n\nvar __values = this && this.__values || function (o) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator],\n      i = 0;\n  if (m) return m.call(o);\n  return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar NotFoundException_1 = require(\"../../../../NotFoundException\");\n\nvar FieldParser =\n/** @class */\nfunction () {\n  function FieldParser() {}\n\n  FieldParser.parseFieldsInGeneralPurpose = function (rawInformation) {\n    var e_1, _a, e_2, _b, e_3, _c, e_4, _d;\n\n    if (!rawInformation) {\n      return null;\n    } // Processing 2-digit AIs\n\n\n    if (rawInformation.length < 2) {\n      throw new NotFoundException_1.default();\n    }\n\n    var firstTwoDigits = rawInformation.substring(0, 2);\n\n    try {\n      for (var _e = __values(FieldParser.TWO_DIGIT_DATA_LENGTH), _f = _e.next(); !_f.done; _f = _e.next()) {\n        var dataLength = _f.value;\n\n        if (dataLength[0] === firstTwoDigits) {\n          if (dataLength[1] === FieldParser.VARIABLE_LENGTH) {\n            return FieldParser.processVariableAI(2, dataLength[2], rawInformation);\n          }\n\n          return FieldParser.processFixedAI(2, dataLength[1], rawInformation);\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_f && !_f.done && (_a = _e.return)) _a.call(_e);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n\n    if (rawInformation.length < 3) {\n      throw new NotFoundException_1.default();\n    }\n\n    var firstThreeDigits = rawInformation.substring(0, 3);\n\n    try {\n      for (var _g = __values(FieldParser.THREE_DIGIT_DATA_LENGTH), _h = _g.next(); !_h.done; _h = _g.next()) {\n        var dataLength = _h.value;\n\n        if (dataLength[0] === firstThreeDigits) {\n          if (dataLength[1] === FieldParser.VARIABLE_LENGTH) {\n            return FieldParser.processVariableAI(3, dataLength[2], rawInformation);\n          }\n\n          return FieldParser.processFixedAI(3, dataLength[1], rawInformation);\n        }\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (_h && !_h.done && (_b = _g.return)) _b.call(_g);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n\n    try {\n      for (var _j = __values(FieldParser.THREE_DIGIT_PLUS_DIGIT_DATA_LENGTH), _k = _j.next(); !_k.done; _k = _j.next()) {\n        var dataLength = _k.value;\n\n        if (dataLength[0] === firstThreeDigits) {\n          if (dataLength[1] === FieldParser.VARIABLE_LENGTH) {\n            return FieldParser.processVariableAI(4, dataLength[2], rawInformation);\n          }\n\n          return FieldParser.processFixedAI(4, dataLength[1], rawInformation);\n        }\n      }\n    } catch (e_3_1) {\n      e_3 = {\n        error: e_3_1\n      };\n    } finally {\n      try {\n        if (_k && !_k.done && (_c = _j.return)) _c.call(_j);\n      } finally {\n        if (e_3) throw e_3.error;\n      }\n    }\n\n    if (rawInformation.length < 4) {\n      throw new NotFoundException_1.default();\n    }\n\n    var firstFourDigits = rawInformation.substring(0, 4);\n\n    try {\n      for (var _l = __values(FieldParser.FOUR_DIGIT_DATA_LENGTH), _m = _l.next(); !_m.done; _m = _l.next()) {\n        var dataLength = _m.value;\n\n        if (dataLength[0] === firstFourDigits) {\n          if (dataLength[1] === FieldParser.VARIABLE_LENGTH) {\n            return FieldParser.processVariableAI(4, dataLength[2], rawInformation);\n          }\n\n          return FieldParser.processFixedAI(4, dataLength[1], rawInformation);\n        }\n      }\n    } catch (e_4_1) {\n      e_4 = {\n        error: e_4_1\n      };\n    } finally {\n      try {\n        if (_m && !_m.done && (_d = _l.return)) _d.call(_l);\n      } finally {\n        if (e_4) throw e_4.error;\n      }\n    }\n\n    throw new NotFoundException_1.default();\n  };\n\n  FieldParser.processFixedAI = function (aiSize, fieldSize, rawInformation) {\n    if (rawInformation.length < aiSize) {\n      throw new NotFoundException_1.default();\n    }\n\n    var ai = rawInformation.substring(0, aiSize);\n\n    if (rawInformation.length < aiSize + fieldSize) {\n      throw new NotFoundException_1.default();\n    }\n\n    var field = rawInformation.substring(aiSize, aiSize + fieldSize);\n    var remaining = rawInformation.substring(aiSize + fieldSize);\n    var result = '(' + ai + ')' + field;\n    var parsedAI = FieldParser.parseFieldsInGeneralPurpose(remaining);\n    return parsedAI == null ? result : result + parsedAI;\n  };\n\n  FieldParser.processVariableAI = function (aiSize, variableFieldSize, rawInformation) {\n    var ai = rawInformation.substring(0, aiSize);\n    var maxSize;\n\n    if (rawInformation.length < aiSize + variableFieldSize) {\n      maxSize = rawInformation.length;\n    } else {\n      maxSize = aiSize + variableFieldSize;\n    }\n\n    var field = rawInformation.substring(aiSize, maxSize);\n    var remaining = rawInformation.substring(maxSize);\n    var result = '(' + ai + ')' + field;\n    var parsedAI = FieldParser.parseFieldsInGeneralPurpose(remaining);\n    return parsedAI == null ? result : result + parsedAI;\n  };\n\n  FieldParser.VARIABLE_LENGTH = [];\n  FieldParser.TWO_DIGIT_DATA_LENGTH = [[\"00\", 18], [\"01\", 14], [\"02\", 14], [\"10\", FieldParser.VARIABLE_LENGTH, 20], [\"11\", 6], [\"12\", 6], [\"13\", 6], [\"15\", 6], [\"17\", 6], [\"20\", 2], [\"21\", FieldParser.VARIABLE_LENGTH, 20], [\"22\", FieldParser.VARIABLE_LENGTH, 29], [\"30\", FieldParser.VARIABLE_LENGTH, 8], [\"37\", FieldParser.VARIABLE_LENGTH, 8], //internal company codes\n  [\"90\", FieldParser.VARIABLE_LENGTH, 30], [\"91\", FieldParser.VARIABLE_LENGTH, 30], [\"92\", FieldParser.VARIABLE_LENGTH, 30], [\"93\", FieldParser.VARIABLE_LENGTH, 30], [\"94\", FieldParser.VARIABLE_LENGTH, 30], [\"95\", FieldParser.VARIABLE_LENGTH, 30], [\"96\", FieldParser.VARIABLE_LENGTH, 30], [\"97\", FieldParser.VARIABLE_LENGTH, 3], [\"98\", FieldParser.VARIABLE_LENGTH, 30], [\"99\", FieldParser.VARIABLE_LENGTH, 30]];\n  FieldParser.THREE_DIGIT_DATA_LENGTH = [// Same format as above\n  [\"240\", FieldParser.VARIABLE_LENGTH, 30], [\"241\", FieldParser.VARIABLE_LENGTH, 30], [\"242\", FieldParser.VARIABLE_LENGTH, 6], [\"250\", FieldParser.VARIABLE_LENGTH, 30], [\"251\", FieldParser.VARIABLE_LENGTH, 30], [\"253\", FieldParser.VARIABLE_LENGTH, 17], [\"254\", FieldParser.VARIABLE_LENGTH, 20], [\"400\", FieldParser.VARIABLE_LENGTH, 30], [\"401\", FieldParser.VARIABLE_LENGTH, 30], [\"402\", 17], [\"403\", FieldParser.VARIABLE_LENGTH, 30], [\"410\", 13], [\"411\", 13], [\"412\", 13], [\"413\", 13], [\"414\", 13], [\"420\", FieldParser.VARIABLE_LENGTH, 20], [\"421\", FieldParser.VARIABLE_LENGTH, 15], [\"422\", 3], [\"423\", FieldParser.VARIABLE_LENGTH, 15], [\"424\", 3], [\"425\", 3], [\"426\", 3]];\n  FieldParser.THREE_DIGIT_PLUS_DIGIT_DATA_LENGTH = [// Same format as above\n  [\"310\", 6], [\"311\", 6], [\"312\", 6], [\"313\", 6], [\"314\", 6], [\"315\", 6], [\"316\", 6], [\"320\", 6], [\"321\", 6], [\"322\", 6], [\"323\", 6], [\"324\", 6], [\"325\", 6], [\"326\", 6], [\"327\", 6], [\"328\", 6], [\"329\", 6], [\"330\", 6], [\"331\", 6], [\"332\", 6], [\"333\", 6], [\"334\", 6], [\"335\", 6], [\"336\", 6], [\"340\", 6], [\"341\", 6], [\"342\", 6], [\"343\", 6], [\"344\", 6], [\"345\", 6], [\"346\", 6], [\"347\", 6], [\"348\", 6], [\"349\", 6], [\"350\", 6], [\"351\", 6], [\"352\", 6], [\"353\", 6], [\"354\", 6], [\"355\", 6], [\"356\", 6], [\"357\", 6], [\"360\", 6], [\"361\", 6], [\"362\", 6], [\"363\", 6], [\"364\", 6], [\"365\", 6], [\"366\", 6], [\"367\", 6], [\"368\", 6], [\"369\", 6], [\"390\", FieldParser.VARIABLE_LENGTH, 15], [\"391\", FieldParser.VARIABLE_LENGTH, 18], [\"392\", FieldParser.VARIABLE_LENGTH, 15], [\"393\", FieldParser.VARIABLE_LENGTH, 18], [\"703\", FieldParser.VARIABLE_LENGTH, 30]];\n  FieldParser.FOUR_DIGIT_DATA_LENGTH = [// Same format as above\n  [\"7001\", 13], [\"7002\", FieldParser.VARIABLE_LENGTH, 30], [\"7003\", 10], [\"8001\", 14], [\"8002\", FieldParser.VARIABLE_LENGTH, 20], [\"8003\", FieldParser.VARIABLE_LENGTH, 30], [\"8004\", FieldParser.VARIABLE_LENGTH, 30], [\"8005\", 6], [\"8006\", 18], [\"8007\", FieldParser.VARIABLE_LENGTH, 30], [\"8008\", FieldParser.VARIABLE_LENGTH, 12], [\"8018\", 18], [\"8020\", FieldParser.VARIABLE_LENGTH, 25], [\"8100\", 6], [\"8101\", 10], [\"8102\", 2], [\"8110\", FieldParser.VARIABLE_LENGTH, 70], [\"8200\", FieldParser.VARIABLE_LENGTH, 70]];\n  return FieldParser;\n}();\n\nexports.default = FieldParser;","map":{"version":3,"sources":["../../../../../../src/core/oned/rss/expanded/decoders/FieldParser.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __values = (this && this.__values) || function (o) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\n    if (m) return m.call(o);\n    return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar NotFoundException_1 = require(\"../../../../NotFoundException\");\nvar FieldParser = /** @class */ (function () {\n    function FieldParser() {\n    }\n    FieldParser.parseFieldsInGeneralPurpose = function (rawInformation) {\n        var e_1, _a, e_2, _b, e_3, _c, e_4, _d;\n        if (!rawInformation) {\n            return null;\n        }\n        // Processing 2-digit AIs\n        if (rawInformation.length < 2) {\n            throw new NotFoundException_1.default();\n        }\n        var firstTwoDigits = rawInformation.substring(0, 2);\n        try {\n            for (var _e = __values(FieldParser.TWO_DIGIT_DATA_LENGTH), _f = _e.next(); !_f.done; _f = _e.next()) {\n                var dataLength = _f.value;\n                if (dataLength[0] === firstTwoDigits) {\n                    if (dataLength[1] === FieldParser.VARIABLE_LENGTH) {\n                        return FieldParser.processVariableAI(2, dataLength[2], rawInformation);\n                    }\n                    return FieldParser.processFixedAI(2, dataLength[1], rawInformation);\n                }\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_f && !_f.done && (_a = _e.return)) _a.call(_e);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        if (rawInformation.length < 3) {\n            throw new NotFoundException_1.default();\n        }\n        var firstThreeDigits = rawInformation.substring(0, 3);\n        try {\n            for (var _g = __values(FieldParser.THREE_DIGIT_DATA_LENGTH), _h = _g.next(); !_h.done; _h = _g.next()) {\n                var dataLength = _h.value;\n                if (dataLength[0] === firstThreeDigits) {\n                    if (dataLength[1] === FieldParser.VARIABLE_LENGTH) {\n                        return FieldParser.processVariableAI(3, dataLength[2], rawInformation);\n                    }\n                    return FieldParser.processFixedAI(3, dataLength[1], rawInformation);\n                }\n            }\n        }\n        catch (e_2_1) { e_2 = { error: e_2_1 }; }\n        finally {\n            try {\n                if (_h && !_h.done && (_b = _g.return)) _b.call(_g);\n            }\n            finally { if (e_2) throw e_2.error; }\n        }\n        try {\n            for (var _j = __values(FieldParser.THREE_DIGIT_PLUS_DIGIT_DATA_LENGTH), _k = _j.next(); !_k.done; _k = _j.next()) {\n                var dataLength = _k.value;\n                if (dataLength[0] === firstThreeDigits) {\n                    if (dataLength[1] === FieldParser.VARIABLE_LENGTH) {\n                        return FieldParser.processVariableAI(4, dataLength[2], rawInformation);\n                    }\n                    return FieldParser.processFixedAI(4, dataLength[1], rawInformation);\n                }\n            }\n        }\n        catch (e_3_1) { e_3 = { error: e_3_1 }; }\n        finally {\n            try {\n                if (_k && !_k.done && (_c = _j.return)) _c.call(_j);\n            }\n            finally { if (e_3) throw e_3.error; }\n        }\n        if (rawInformation.length < 4) {\n            throw new NotFoundException_1.default();\n        }\n        var firstFourDigits = rawInformation.substring(0, 4);\n        try {\n            for (var _l = __values(FieldParser.FOUR_DIGIT_DATA_LENGTH), _m = _l.next(); !_m.done; _m = _l.next()) {\n                var dataLength = _m.value;\n                if (dataLength[0] === firstFourDigits) {\n                    if (dataLength[1] === FieldParser.VARIABLE_LENGTH) {\n                        return FieldParser.processVariableAI(4, dataLength[2], rawInformation);\n                    }\n                    return FieldParser.processFixedAI(4, dataLength[1], rawInformation);\n                }\n            }\n        }\n        catch (e_4_1) { e_4 = { error: e_4_1 }; }\n        finally {\n            try {\n                if (_m && !_m.done && (_d = _l.return)) _d.call(_l);\n            }\n            finally { if (e_4) throw e_4.error; }\n        }\n        throw new NotFoundException_1.default();\n    };\n    FieldParser.processFixedAI = function (aiSize, fieldSize, rawInformation) {\n        if (rawInformation.length < aiSize) {\n            throw new NotFoundException_1.default();\n        }\n        var ai = rawInformation.substring(0, aiSize);\n        if (rawInformation.length < aiSize + fieldSize) {\n            throw new NotFoundException_1.default();\n        }\n        var field = rawInformation.substring(aiSize, aiSize + fieldSize);\n        var remaining = rawInformation.substring(aiSize + fieldSize);\n        var result = '(' + ai + ')' + field;\n        var parsedAI = FieldParser.parseFieldsInGeneralPurpose(remaining);\n        return parsedAI == null ? result : result + parsedAI;\n    };\n    FieldParser.processVariableAI = function (aiSize, variableFieldSize, rawInformation) {\n        var ai = rawInformation.substring(0, aiSize);\n        var maxSize;\n        if (rawInformation.length < aiSize + variableFieldSize) {\n            maxSize = rawInformation.length;\n        }\n        else {\n            maxSize = aiSize + variableFieldSize;\n        }\n        var field = rawInformation.substring(aiSize, maxSize);\n        var remaining = rawInformation.substring(maxSize);\n        var result = '(' + ai + ')' + field;\n        var parsedAI = FieldParser.parseFieldsInGeneralPurpose(remaining);\n        return parsedAI == null ? result : result + parsedAI;\n    };\n    FieldParser.VARIABLE_LENGTH = [];\n    FieldParser.TWO_DIGIT_DATA_LENGTH = [\n        [\"00\", 18],\n        [\"01\", 14],\n        [\"02\", 14],\n        [\"10\", FieldParser.VARIABLE_LENGTH, 20],\n        [\"11\", 6],\n        [\"12\", 6],\n        [\"13\", 6],\n        [\"15\", 6],\n        [\"17\", 6],\n        [\"20\", 2],\n        [\"21\", FieldParser.VARIABLE_LENGTH, 20],\n        [\"22\", FieldParser.VARIABLE_LENGTH, 29],\n        [\"30\", FieldParser.VARIABLE_LENGTH, 8],\n        [\"37\", FieldParser.VARIABLE_LENGTH, 8],\n        //internal company codes\n        [\"90\", FieldParser.VARIABLE_LENGTH, 30],\n        [\"91\", FieldParser.VARIABLE_LENGTH, 30],\n        [\"92\", FieldParser.VARIABLE_LENGTH, 30],\n        [\"93\", FieldParser.VARIABLE_LENGTH, 30],\n        [\"94\", FieldParser.VARIABLE_LENGTH, 30],\n        [\"95\", FieldParser.VARIABLE_LENGTH, 30],\n        [\"96\", FieldParser.VARIABLE_LENGTH, 30],\n        [\"97\", FieldParser.VARIABLE_LENGTH, 3],\n        [\"98\", FieldParser.VARIABLE_LENGTH, 30],\n        [\"99\", FieldParser.VARIABLE_LENGTH, 30],\n    ];\n    FieldParser.THREE_DIGIT_DATA_LENGTH = [\n        // Same format as above\n        [\"240\", FieldParser.VARIABLE_LENGTH, 30],\n        [\"241\", FieldParser.VARIABLE_LENGTH, 30],\n        [\"242\", FieldParser.VARIABLE_LENGTH, 6],\n        [\"250\", FieldParser.VARIABLE_LENGTH, 30],\n        [\"251\", FieldParser.VARIABLE_LENGTH, 30],\n        [\"253\", FieldParser.VARIABLE_LENGTH, 17],\n        [\"254\", FieldParser.VARIABLE_LENGTH, 20],\n        [\"400\", FieldParser.VARIABLE_LENGTH, 30],\n        [\"401\", FieldParser.VARIABLE_LENGTH, 30],\n        [\"402\", 17],\n        [\"403\", FieldParser.VARIABLE_LENGTH, 30],\n        [\"410\", 13],\n        [\"411\", 13],\n        [\"412\", 13],\n        [\"413\", 13],\n        [\"414\", 13],\n        [\"420\", FieldParser.VARIABLE_LENGTH, 20],\n        [\"421\", FieldParser.VARIABLE_LENGTH, 15],\n        [\"422\", 3],\n        [\"423\", FieldParser.VARIABLE_LENGTH, 15],\n        [\"424\", 3],\n        [\"425\", 3],\n        [\"426\", 3],\n    ];\n    FieldParser.THREE_DIGIT_PLUS_DIGIT_DATA_LENGTH = [\n        // Same format as above\n        [\"310\", 6],\n        [\"311\", 6],\n        [\"312\", 6],\n        [\"313\", 6],\n        [\"314\", 6],\n        [\"315\", 6],\n        [\"316\", 6],\n        [\"320\", 6],\n        [\"321\", 6],\n        [\"322\", 6],\n        [\"323\", 6],\n        [\"324\", 6],\n        [\"325\", 6],\n        [\"326\", 6],\n        [\"327\", 6],\n        [\"328\", 6],\n        [\"329\", 6],\n        [\"330\", 6],\n        [\"331\", 6],\n        [\"332\", 6],\n        [\"333\", 6],\n        [\"334\", 6],\n        [\"335\", 6],\n        [\"336\", 6],\n        [\"340\", 6],\n        [\"341\", 6],\n        [\"342\", 6],\n        [\"343\", 6],\n        [\"344\", 6],\n        [\"345\", 6],\n        [\"346\", 6],\n        [\"347\", 6],\n        [\"348\", 6],\n        [\"349\", 6],\n        [\"350\", 6],\n        [\"351\", 6],\n        [\"352\", 6],\n        [\"353\", 6],\n        [\"354\", 6],\n        [\"355\", 6],\n        [\"356\", 6],\n        [\"357\", 6],\n        [\"360\", 6],\n        [\"361\", 6],\n        [\"362\", 6],\n        [\"363\", 6],\n        [\"364\", 6],\n        [\"365\", 6],\n        [\"366\", 6],\n        [\"367\", 6],\n        [\"368\", 6],\n        [\"369\", 6],\n        [\"390\", FieldParser.VARIABLE_LENGTH, 15],\n        [\"391\", FieldParser.VARIABLE_LENGTH, 18],\n        [\"392\", FieldParser.VARIABLE_LENGTH, 15],\n        [\"393\", FieldParser.VARIABLE_LENGTH, 18],\n        [\"703\", FieldParser.VARIABLE_LENGTH, 30],\n    ];\n    FieldParser.FOUR_DIGIT_DATA_LENGTH = [\n        // Same format as above\n        [\"7001\", 13],\n        [\"7002\", FieldParser.VARIABLE_LENGTH, 30],\n        [\"7003\", 10],\n        [\"8001\", 14],\n        [\"8002\", FieldParser.VARIABLE_LENGTH, 20],\n        [\"8003\", FieldParser.VARIABLE_LENGTH, 30],\n        [\"8004\", FieldParser.VARIABLE_LENGTH, 30],\n        [\"8005\", 6],\n        [\"8006\", 18],\n        [\"8007\", FieldParser.VARIABLE_LENGTH, 30],\n        [\"8008\", FieldParser.VARIABLE_LENGTH, 12],\n        [\"8018\", 18],\n        [\"8020\", FieldParser.VARIABLE_LENGTH, 25],\n        [\"8100\", 6],\n        [\"8101\", 10],\n        [\"8102\", 2],\n        [\"8110\", FieldParser.VARIABLE_LENGTH, 70],\n        [\"8200\", FieldParser.VARIABLE_LENGTH, 70],\n    ];\n    return FieldParser;\n}());\nexports.default = FieldParser;\n//# sourceMappingURL=FieldParser.js.map"]},"metadata":{},"sourceType":"script"}