{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Ponyfill for Java's Integer class.\n */\n\nvar Integer =\n/** @class */\nfunction () {\n  function Integer() {}\n\n  Integer.numberOfTrailingZeros = function (i) {\n    var y;\n    if (i === 0) return 32;\n    var n = 31;\n    y = i << 16;\n\n    if (y !== 0) {\n      n -= 16;\n      i = y;\n    }\n\n    y = i << 8;\n\n    if (y !== 0) {\n      n -= 8;\n      i = y;\n    }\n\n    y = i << 4;\n\n    if (y !== 0) {\n      n -= 4;\n      i = y;\n    }\n\n    y = i << 2;\n\n    if (y !== 0) {\n      n -= 2;\n      i = y;\n    }\n\n    return n - (i << 1 >>> 31);\n  };\n\n  Integer.numberOfLeadingZeros = function (i) {\n    // HD, Figure 5-6\n    if (i === 0) {\n      return 32;\n    }\n\n    var n = 1;\n\n    if (i >>> 16 === 0) {\n      n += 16;\n      i <<= 16;\n    }\n\n    if (i >>> 24 === 0) {\n      n += 8;\n      i <<= 8;\n    }\n\n    if (i >>> 28 === 0) {\n      n += 4;\n      i <<= 4;\n    }\n\n    if (i >>> 30 === 0) {\n      n += 2;\n      i <<= 2;\n    }\n\n    n -= i >>> 31;\n    return n;\n  };\n\n  Integer.toHexString = function (i) {\n    return i.toString(16);\n  };\n\n  Integer.toBinaryString = function (intNumber) {\n    return String(parseInt(String(intNumber), 2));\n  }; // Returns the number of one-bits in the two's complement binary representation of the specified int value. This function is sometimes referred to as the population count.\n  // Returns:\n  // the number of one-bits in the two's complement binary representation of the specified int value.\n\n\n  Integer.bitCount = function (i) {\n    // HD, Figure 5-2\n    i = i - (i >>> 1 & 0x55555555);\n    i = (i & 0x33333333) + (i >>> 2 & 0x33333333);\n    i = i + (i >>> 4) & 0x0f0f0f0f;\n    i = i + (i >>> 8);\n    i = i + (i >>> 16);\n    return i & 0x3f;\n  };\n\n  Integer.truncDivision = function (dividend, divisor) {\n    return Math.trunc(dividend / divisor);\n  };\n  /**\n   * Converts A string to an integer.\n   * @param s A string to convert into a number.\n   * @param radix A value between 2 and 36 that specifies the base of the number in numString. If this argument is not supplied, strings with a prefix of '0x' are considered hexadecimal. All other strings are considered decimal.\n   */\n\n\n  Integer.parseInt = function (num, radix) {\n    if (radix === void 0) {\n      radix = undefined;\n    }\n\n    return parseInt(num, radix);\n  };\n\n  Integer.MIN_VALUE_32_BITS = -2147483648;\n  Integer.MAX_VALUE = Number.MAX_SAFE_INTEGER;\n  return Integer;\n}();\n\nexports.default = Integer;","map":{"version":3,"sources":["../../../src/core/util/Integer.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Ponyfill for Java's Integer class.\n */\nvar Integer = /** @class */ (function () {\n    function Integer() {\n    }\n    Integer.numberOfTrailingZeros = function (i) {\n        var y;\n        if (i === 0)\n            return 32;\n        var n = 31;\n        y = i << 16;\n        if (y !== 0) {\n            n -= 16;\n            i = y;\n        }\n        y = i << 8;\n        if (y !== 0) {\n            n -= 8;\n            i = y;\n        }\n        y = i << 4;\n        if (y !== 0) {\n            n -= 4;\n            i = y;\n        }\n        y = i << 2;\n        if (y !== 0) {\n            n -= 2;\n            i = y;\n        }\n        return n - ((i << 1) >>> 31);\n    };\n    Integer.numberOfLeadingZeros = function (i) {\n        // HD, Figure 5-6\n        if (i === 0) {\n            return 32;\n        }\n        var n = 1;\n        if (i >>> 16 === 0) {\n            n += 16;\n            i <<= 16;\n        }\n        if (i >>> 24 === 0) {\n            n += 8;\n            i <<= 8;\n        }\n        if (i >>> 28 === 0) {\n            n += 4;\n            i <<= 4;\n        }\n        if (i >>> 30 === 0) {\n            n += 2;\n            i <<= 2;\n        }\n        n -= i >>> 31;\n        return n;\n    };\n    Integer.toHexString = function (i) {\n        return i.toString(16);\n    };\n    Integer.toBinaryString = function (intNumber) {\n        return String(parseInt(String(intNumber), 2));\n    };\n    // Returns the number of one-bits in the two's complement binary representation of the specified int value. This function is sometimes referred to as the population count.\n    // Returns:\n    // the number of one-bits in the two's complement binary representation of the specified int value.\n    Integer.bitCount = function (i) {\n        // HD, Figure 5-2\n        i = i - ((i >>> 1) & 0x55555555);\n        i = (i & 0x33333333) + ((i >>> 2) & 0x33333333);\n        i = (i + (i >>> 4)) & 0x0f0f0f0f;\n        i = i + (i >>> 8);\n        i = i + (i >>> 16);\n        return i & 0x3f;\n    };\n    Integer.truncDivision = function (dividend, divisor) {\n        return Math.trunc(dividend / divisor);\n    };\n    /**\n     * Converts A string to an integer.\n     * @param s A string to convert into a number.\n     * @param radix A value between 2 and 36 that specifies the base of the number in numString. If this argument is not supplied, strings with a prefix of '0x' are considered hexadecimal. All other strings are considered decimal.\n     */\n    Integer.parseInt = function (num, radix) {\n        if (radix === void 0) { radix = undefined; }\n        return parseInt(num, radix);\n    };\n    Integer.MIN_VALUE_32_BITS = -2147483648;\n    Integer.MAX_VALUE = Number.MAX_SAFE_INTEGER;\n    return Integer;\n}());\nexports.default = Integer;\n//# sourceMappingURL=Integer.js.map"]},"metadata":{},"sourceType":"script"}