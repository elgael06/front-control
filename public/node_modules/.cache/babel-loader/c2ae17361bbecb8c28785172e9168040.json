{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ExpandedRow =\n/** @class */\nfunction () {\n  function ExpandedRow(pairs, rowNumber, wasReversed) {\n    this.pairs = pairs;\n    this.rowNumber = rowNumber;\n    this.wasReversed = wasReversed;\n  }\n\n  ExpandedRow.prototype.getPairs = function () {\n    return this.pairs;\n  };\n\n  ExpandedRow.prototype.getRowNumber = function () {\n    return this.rowNumber;\n  };\n\n  ExpandedRow.prototype.isReversed = function () {\n    return this.wasReversed;\n  }; // check implementation\n\n\n  ExpandedRow.prototype.isEquivalent = function (otherPairs) {\n    return this.checkEqualitity(this, otherPairs);\n  }; //@Override\n\n\n  ExpandedRow.prototype.toString = function () {\n    return \"{ \" + this.pairs + \" }\";\n  };\n  /**\n   * Two rows are equal if they contain the same pairs in the same order.\n   */\n  //@Override\n  // check implementation\n\n\n  ExpandedRow.prototype.equals = function (o1, o2) {\n    if (!(o1 instanceof ExpandedRow)) {\n      return false;\n    }\n\n    return this.checkEqualitity(o1, o2) && o1.wasReversed === o2.wasReversed;\n  };\n\n  ExpandedRow.prototype.checkEqualitity = function (pair1, pair2) {\n    if (!pair1 || !pair2) return;\n    var result;\n    pair1.forEach(function (e1, i) {\n      pair2.forEach(function (e2) {\n        if (e1.getLeftChar().getValue() === e2.getLeftChar().getValue() && e1.getRightChar().getValue() === e2.getRightChar().getValue() && e1.getFinderPatter().getValue() === e2.getFinderPatter().getValue()) {\n          result = true;\n        }\n      });\n    });\n    return result;\n  };\n\n  return ExpandedRow;\n}();\n\nexports.default = ExpandedRow;","map":{"version":3,"sources":["../../../../../src/core/oned/rss/expanded/ExpandedRow.ts"],"names":[],"mappings":";;;;;;AAGA,IAAA,WAAA;AAAA;AAAA,YAAA;AAIE,WAAA,WAAA,CAAY,KAAZ,EAAuC,SAAvC,EAAwD,WAAxD,EAA2E;AACzE,SAAK,KAAL,GAAa,KAAb;AACA,SAAK,SAAL,GAAiB,SAAjB;AACA,SAAK,WAAL,GAAmB,WAAnB;AACD;;AACD,EAAA,WAAA,CAAA,SAAA,CAAA,QAAA,GAAA,YAAA;AACE,WAAO,KAAK,KAAZ;AACD,GAFD;;AAGA,EAAA,WAAA,CAAA,SAAA,CAAA,YAAA,GAAA,YAAA;AACE,WAAO,KAAK,SAAZ;AACD,GAFD;;AAGA,EAAA,WAAA,CAAA,SAAA,CAAA,UAAA,GAAA,YAAA;AACE,WAAO,KAAK,WAAZ;AACD,GAFD,CAfF,CAkBE;;;AACA,EAAA,WAAA,CAAA,SAAA,CAAA,YAAA,GAAA,UAAa,UAAb,EAA4C;AAC1C,WAAO,KAAK,eAAL,CAAqB,IAArB,EAA2B,UAA3B,CAAP;AACD,GAFD,CAnBF,CAsBE;;;AACO,EAAA,WAAA,CAAA,SAAA,CAAA,QAAA,GAAP,YAAA;AACE,WAAO,OAAO,KAAK,KAAZ,GAAoB,IAA3B;AACD,GAFM;AAIP;;AAEG;AACH;AACE;;;AACK,EAAA,WAAA,CAAA,SAAA,CAAA,MAAA,GAAP,UAAc,EAAd,EAA6B,EAA7B,EAA2C;AACzC,QAAI,EAAE,EAAE,YAAY,WAAhB,CAAJ,EAAkC;AAChC,aAAO,KAAP;AACD;;AACD,WAAO,KAAK,eAAL,CAAqB,EAArB,EAAwB,EAAxB,KAA+B,EAAE,CAAC,WAAH,KAAmB,EAAE,CAAC,WAA5D;AACD,GALM;;AAMP,EAAA,WAAA,CAAA,SAAA,CAAA,eAAA,GAAA,UAAgB,KAAhB,EAA2B,KAA3B,EAAoC;AAClC,QAAI,CAAC,KAAD,IAAU,CAAC,KAAf,EAAsB;AACtB,QAAI,MAAJ;AACA,IAAA,KAAK,CAAC,OAAN,CAAc,UAAC,EAAD,EAAK,CAAL,EAAM;AAClB,MAAA,KAAK,CAAC,OAAN,CAAc,UAAA,EAAA,EAAE;AACd,YAAI,EAAE,CAAC,WAAH,GAAiB,QAAjB,OAAgC,EAAE,CAAC,WAAH,GAAiB,QAAjB,EAAhC,IAA+D,EAAE,CAAC,YAAH,GAAkB,QAAlB,OAAiC,EAAE,CAAC,YAAH,GAAkB,QAAlB,EAAhG,IAAgI,EAAE,CAAC,eAAH,GAAqB,QAArB,OAAoC,EAAE,CAAC,eAAH,GAAqB,QAArB,EAAxK,EAAyM;AACvM,UAAA,MAAM,GAAG,IAAT;AACD;AACF,OAJD;AAKD,KAND;AAOA,WAAO,MAAP;AACD,GAXD;;AAoBF,SAAA,WAAA;AAAC,CA1DD,EAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ExpandedRow = /** @class */ (function () {\n    function ExpandedRow(pairs, rowNumber, wasReversed) {\n        this.pairs = pairs;\n        this.rowNumber = rowNumber;\n        this.wasReversed = wasReversed;\n    }\n    ExpandedRow.prototype.getPairs = function () {\n        return this.pairs;\n    };\n    ExpandedRow.prototype.getRowNumber = function () {\n        return this.rowNumber;\n    };\n    ExpandedRow.prototype.isReversed = function () {\n        return this.wasReversed;\n    };\n    // check implementation\n    ExpandedRow.prototype.isEquivalent = function (otherPairs) {\n        return this.checkEqualitity(this, otherPairs);\n    };\n    //@Override\n    ExpandedRow.prototype.toString = function () {\n        return \"{ \" + this.pairs + \" }\";\n    };\n    /**\n     * Two rows are equal if they contain the same pairs in the same order.\n     */\n    //@Override\n    // check implementation\n    ExpandedRow.prototype.equals = function (o1, o2) {\n        if (!(o1 instanceof ExpandedRow)) {\n            return false;\n        }\n        return this.checkEqualitity(o1, o2) && o1.wasReversed === o2.wasReversed;\n    };\n    ExpandedRow.prototype.checkEqualitity = function (pair1, pair2) {\n        if (!pair1 || !pair2)\n            return;\n        var result;\n        pair1.forEach(function (e1, i) {\n            pair2.forEach(function (e2) {\n                if (e1.getLeftChar().getValue() === e2.getLeftChar().getValue() && e1.getRightChar().getValue() === e2.getRightChar().getValue() && e1.getFinderPatter().getValue() === e2.getFinderPatter().getValue()) {\n                    result = true;\n                }\n            });\n        });\n        return result;\n    };\n    return ExpandedRow;\n}());\nexports.default = ExpandedRow;\n//# sourceMappingURL=ExpandedRow.js.map"]},"metadata":{},"sourceType":"script"}