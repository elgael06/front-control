{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2007 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar __values = this && this.__values || function (o) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator],\n      i = 0;\n  if (m) return m.call(o);\n  return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar AlignmentPattern_1 = require(\"./AlignmentPattern\");\n\nvar NotFoundException_1 = require(\"../../NotFoundException\");\n/*import java.util.ArrayList;*/\n\n/*import java.util.List;*/\n\n/**\n * <p>This class attempts to find alignment patterns in a QR Code. Alignment patterns look like finder\n * patterns but are smaller and appear at regular intervals throughout the image.</p>\n *\n * <p>At the moment this only looks for the bottom-right alignment pattern.</p>\n *\n * <p>This is mostly a simplified copy of {@link FinderPatternFinder}. It is copied,\n * pasted and stripped down here for maximum performance but does unfortunately duplicate\n * some code.</p>\n *\n * <p>This class is thread-safe but not reentrant. Each thread must allocate its own object.</p>\n *\n * @author Sean Owen\n */\n\n\nvar AlignmentPatternFinder =\n/** @class */\nfunction () {\n  /**\n   * <p>Creates a finder that will look in a portion of the whole image.</p>\n   *\n   * @param image image to search\n   * @param startX left column from which to start searching\n   * @param startY top row from which to start searching\n   * @param width width of region to search\n   * @param height height of region to search\n   * @param moduleSize estimated module size so far\n   */\n  function AlignmentPatternFinder(image, startX\n  /*int*/\n  , startY\n  /*int*/\n  , width\n  /*int*/\n  , height\n  /*int*/\n  , moduleSize\n  /*float*/\n  , resultPointCallback) {\n    this.image = image;\n    this.startX = startX;\n    this.startY = startY;\n    this.width = width;\n    this.height = height;\n    this.moduleSize = moduleSize;\n    this.resultPointCallback = resultPointCallback;\n    this.possibleCenters = []; // new Array<any>(5))\n    // TYPESCRIPTPORT: array initialization without size as the length is checked below\n\n    this.crossCheckStateCount = new Int32Array(3);\n  }\n  /**\n   * <p>This method attempts to find the bottom-right alignment pattern in the image. It is a bit messy since\n   * it's pretty performance-critical and so is written to be fast foremost.</p>\n   *\n   * @return {@link AlignmentPattern} if found\n   * @throws NotFoundException if not found\n   */\n\n\n  AlignmentPatternFinder.prototype.find = function () {\n    var startX = this.startX;\n    var height = this.height;\n    var width = this.width;\n    var maxJ = startX + width;\n    var middleI = this.startY + height / 2; // We are looking for black/white/black modules in 1:1:1 ratio\n    // this tracks the number of black/white/black modules seen so far\n\n    var stateCount = new Int32Array(3);\n    var image = this.image;\n\n    for (var iGen = 0; iGen < height; iGen++) {\n      // Search from middle outwards\n      var i = middleI + ((iGen & 0x01) === 0 ? Math.floor((iGen + 1) / 2) : -Math.floor((iGen + 1) / 2));\n      stateCount[0] = 0;\n      stateCount[1] = 0;\n      stateCount[2] = 0;\n      var j = startX; // Burn off leading white pixels before anything else; if we start in the middle of\n      // a white run, it doesn't make sense to count its length, since we don't know if the\n      // white run continued to the left of the start point\n\n      while (j < maxJ && !image.get(j, i)) {\n        j++;\n      }\n\n      var currentState = 0;\n\n      while (j < maxJ) {\n        if (image.get(j, i)) {\n          // Black pixel\n          if (currentState === 1) {\n            // Counting black pixels\n            stateCount[1]++;\n          } else {\n            // Counting white pixels\n            if (currentState === 2) {\n              // A winner?\n              if (this.foundPatternCross(stateCount)) {\n                // Yes\n                var confirmed = this.handlePossibleCenter(stateCount, i, j);\n\n                if (confirmed !== null) {\n                  return confirmed;\n                }\n              }\n\n              stateCount[0] = stateCount[2];\n              stateCount[1] = 1;\n              stateCount[2] = 0;\n              currentState = 1;\n            } else {\n              stateCount[++currentState]++;\n            }\n          }\n        } else {\n          // White pixel\n          if (currentState === 1) {\n            // Counting black pixels\n            currentState++;\n          }\n\n          stateCount[currentState]++;\n        }\n\n        j++;\n      }\n\n      if (this.foundPatternCross(stateCount)) {\n        var confirmed = this.handlePossibleCenter(stateCount, i, maxJ);\n\n        if (confirmed !== null) {\n          return confirmed;\n        }\n      }\n    } // Hmm, nothing we saw was observed and confirmed twice. If we had\n    // any guess at all, return it.\n\n\n    if (this.possibleCenters.length !== 0) {\n      return this.possibleCenters[0];\n    }\n\n    throw new NotFoundException_1.default();\n  };\n  /**\n   * Given a count of black/white/black pixels just seen and an end position,\n   * figures the location of the center of this black/white/black run.\n   */\n\n\n  AlignmentPatternFinder.centerFromEnd = function (stateCount, end\n  /*int*/\n  ) {\n    return end - stateCount[2] - stateCount[1] / 2.0;\n  };\n  /**\n   * @param stateCount count of black/white/black pixels just read\n   * @return true iff the proportions of the counts is close enough to the 1/1/1 ratios\n   *         used by alignment patterns to be considered a match\n   */\n\n\n  AlignmentPatternFinder.prototype.foundPatternCross = function (stateCount) {\n    var moduleSize = this.moduleSize;\n    var maxVariance = moduleSize / 2.0;\n\n    for (var i = 0; i < 3; i++) {\n      if (Math.abs(moduleSize - stateCount[i]) >= maxVariance) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n  /**\n   * <p>After a horizontal scan finds a potential alignment pattern, this method\n   * \"cross-checks\" by scanning down vertically through the center of the possible\n   * alignment pattern to see if the same proportion is detected.</p>\n   *\n   * @param startI row where an alignment pattern was detected\n   * @param centerJ center of the section that appears to cross an alignment pattern\n   * @param maxCount maximum reasonable number of modules that should be\n   * observed in any reading state, based on the results of the horizontal scan\n   * @return vertical center of alignment pattern, or {@link Float#NaN} if not found\n   */\n\n\n  AlignmentPatternFinder.prototype.crossCheckVertical = function (startI\n  /*int*/\n  , centerJ\n  /*int*/\n  , maxCount\n  /*int*/\n  , originalStateCountTotal\n  /*int*/\n  ) {\n    var image = this.image;\n    var maxI = image.getHeight();\n    var stateCount = this.crossCheckStateCount;\n    stateCount[0] = 0;\n    stateCount[1] = 0;\n    stateCount[2] = 0; // Start counting up from center\n\n    var i = startI;\n\n    while (i >= 0 && image.get(centerJ, i) && stateCount[1] <= maxCount) {\n      stateCount[1]++;\n      i--;\n    } // If already too many modules in this state or ran off the edge:\n\n\n    if (i < 0 || stateCount[1] > maxCount) {\n      return NaN;\n    }\n\n    while (i >= 0 && !image.get(centerJ, i) && stateCount[0] <= maxCount) {\n      stateCount[0]++;\n      i--;\n    }\n\n    if (stateCount[0] > maxCount) {\n      return NaN;\n    } // Now also count down from center\n\n\n    i = startI + 1;\n\n    while (i < maxI && image.get(centerJ, i) && stateCount[1] <= maxCount) {\n      stateCount[1]++;\n      i++;\n    }\n\n    if (i === maxI || stateCount[1] > maxCount) {\n      return NaN;\n    }\n\n    while (i < maxI && !image.get(centerJ, i) && stateCount[2] <= maxCount) {\n      stateCount[2]++;\n      i++;\n    }\n\n    if (stateCount[2] > maxCount) {\n      return NaN;\n    }\n\n    var stateCountTotal = stateCount[0] + stateCount[1] + stateCount[2];\n\n    if (5 * Math.abs(stateCountTotal - originalStateCountTotal) >= 2 * originalStateCountTotal) {\n      return NaN;\n    }\n\n    return this.foundPatternCross(stateCount) ? AlignmentPatternFinder.centerFromEnd(stateCount, i) : NaN;\n  };\n  /**\n   * <p>This is called when a horizontal scan finds a possible alignment pattern. It will\n   * cross check with a vertical scan, and if successful, will see if this pattern had been\n   * found on a previous horizontal scan. If so, we consider it confirmed and conclude we have\n   * found the alignment pattern.</p>\n   *\n   * @param stateCount reading state module counts from horizontal scan\n   * @param i row where alignment pattern may be found\n   * @param j end of possible alignment pattern in row\n   * @return {@link AlignmentPattern} if we have found the same pattern twice, or null if not\n   */\n\n\n  AlignmentPatternFinder.prototype.handlePossibleCenter = function (stateCount, i\n  /*int*/\n  , j\n  /*int*/\n  ) {\n    var e_1, _a;\n\n    var stateCountTotal = stateCount[0] + stateCount[1] + stateCount[2];\n    var centerJ = AlignmentPatternFinder.centerFromEnd(stateCount, j);\n    var centerI = this.crossCheckVertical(i,\n    /*(int) */\n    centerJ, 2 * stateCount[1], stateCountTotal);\n\n    if (!isNaN(centerI)) {\n      var estimatedModuleSize = (stateCount[0] + stateCount[1] + stateCount[2]) / 3.0;\n\n      try {\n        for (var _b = __values(this.possibleCenters), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var center = _c.value; // Look for about the same center and module size:\n\n          if (center.aboutEquals(estimatedModuleSize, centerI, centerJ)) {\n            return center.combineEstimate(centerI, centerJ, estimatedModuleSize);\n          }\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      } // Hadn't found this before; save it\n\n\n      var point = new AlignmentPattern_1.default(centerJ, centerI, estimatedModuleSize);\n      this.possibleCenters.push(point);\n\n      if (this.resultPointCallback !== null && this.resultPointCallback !== undefined) {\n        this.resultPointCallback.foundPossibleResultPoint(point);\n      }\n    }\n\n    return null;\n  };\n\n  return AlignmentPatternFinder;\n}();\n\nexports.default = AlignmentPatternFinder;","map":{"version":3,"sources":["../../../../src/core/qrcode/detector/AlignmentPatternFinder.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/*\n * Copyright 2007 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __values = (this && this.__values) || function (o) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\n    if (m) return m.call(o);\n    return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar AlignmentPattern_1 = require(\"./AlignmentPattern\");\nvar NotFoundException_1 = require(\"../../NotFoundException\");\n/*import java.util.ArrayList;*/\n/*import java.util.List;*/\n/**\n * <p>This class attempts to find alignment patterns in a QR Code. Alignment patterns look like finder\n * patterns but are smaller and appear at regular intervals throughout the image.</p>\n *\n * <p>At the moment this only looks for the bottom-right alignment pattern.</p>\n *\n * <p>This is mostly a simplified copy of {@link FinderPatternFinder}. It is copied,\n * pasted and stripped down here for maximum performance but does unfortunately duplicate\n * some code.</p>\n *\n * <p>This class is thread-safe but not reentrant. Each thread must allocate its own object.</p>\n *\n * @author Sean Owen\n */\nvar AlignmentPatternFinder = /** @class */ (function () {\n    /**\n     * <p>Creates a finder that will look in a portion of the whole image.</p>\n     *\n     * @param image image to search\n     * @param startX left column from which to start searching\n     * @param startY top row from which to start searching\n     * @param width width of region to search\n     * @param height height of region to search\n     * @param moduleSize estimated module size so far\n     */\n    function AlignmentPatternFinder(image, startX /*int*/, startY /*int*/, width /*int*/, height /*int*/, moduleSize /*float*/, resultPointCallback) {\n        this.image = image;\n        this.startX = startX;\n        this.startY = startY;\n        this.width = width;\n        this.height = height;\n        this.moduleSize = moduleSize;\n        this.resultPointCallback = resultPointCallback;\n        this.possibleCenters = []; // new Array<any>(5))\n        // TYPESCRIPTPORT: array initialization without size as the length is checked below\n        this.crossCheckStateCount = new Int32Array(3);\n    }\n    /**\n     * <p>This method attempts to find the bottom-right alignment pattern in the image. It is a bit messy since\n     * it's pretty performance-critical and so is written to be fast foremost.</p>\n     *\n     * @return {@link AlignmentPattern} if found\n     * @throws NotFoundException if not found\n     */\n    AlignmentPatternFinder.prototype.find = function () {\n        var startX = this.startX;\n        var height = this.height;\n        var width = this.width;\n        var maxJ = startX + width;\n        var middleI = this.startY + (height / 2);\n        // We are looking for black/white/black modules in 1:1:1 ratio\n        // this tracks the number of black/white/black modules seen so far\n        var stateCount = new Int32Array(3);\n        var image = this.image;\n        for (var iGen = 0; iGen < height; iGen++) {\n            // Search from middle outwards\n            var i = middleI + ((iGen & 0x01) === 0 ? Math.floor((iGen + 1) / 2) : -Math.floor((iGen + 1) / 2));\n            stateCount[0] = 0;\n            stateCount[1] = 0;\n            stateCount[2] = 0;\n            var j = startX;\n            // Burn off leading white pixels before anything else; if we start in the middle of\n            // a white run, it doesn't make sense to count its length, since we don't know if the\n            // white run continued to the left of the start point\n            while (j < maxJ && !image.get(j, i)) {\n                j++;\n            }\n            var currentState = 0;\n            while (j < maxJ) {\n                if (image.get(j, i)) {\n                    // Black pixel\n                    if (currentState === 1) { // Counting black pixels\n                        stateCount[1]++;\n                    }\n                    else { // Counting white pixels\n                        if (currentState === 2) { // A winner?\n                            if (this.foundPatternCross(stateCount)) { // Yes\n                                var confirmed = this.handlePossibleCenter(stateCount, i, j);\n                                if (confirmed !== null) {\n                                    return confirmed;\n                                }\n                            }\n                            stateCount[0] = stateCount[2];\n                            stateCount[1] = 1;\n                            stateCount[2] = 0;\n                            currentState = 1;\n                        }\n                        else {\n                            stateCount[++currentState]++;\n                        }\n                    }\n                }\n                else { // White pixel\n                    if (currentState === 1) { // Counting black pixels\n                        currentState++;\n                    }\n                    stateCount[currentState]++;\n                }\n                j++;\n            }\n            if (this.foundPatternCross(stateCount)) {\n                var confirmed = this.handlePossibleCenter(stateCount, i, maxJ);\n                if (confirmed !== null) {\n                    return confirmed;\n                }\n            }\n        }\n        // Hmm, nothing we saw was observed and confirmed twice. If we had\n        // any guess at all, return it.\n        if (this.possibleCenters.length !== 0) {\n            return this.possibleCenters[0];\n        }\n        throw new NotFoundException_1.default();\n    };\n    /**\n     * Given a count of black/white/black pixels just seen and an end position,\n     * figures the location of the center of this black/white/black run.\n     */\n    AlignmentPatternFinder.centerFromEnd = function (stateCount, end /*int*/) {\n        return (end - stateCount[2]) - stateCount[1] / 2.0;\n    };\n    /**\n     * @param stateCount count of black/white/black pixels just read\n     * @return true iff the proportions of the counts is close enough to the 1/1/1 ratios\n     *         used by alignment patterns to be considered a match\n     */\n    AlignmentPatternFinder.prototype.foundPatternCross = function (stateCount) {\n        var moduleSize = this.moduleSize;\n        var maxVariance = moduleSize / 2.0;\n        for (var i = 0; i < 3; i++) {\n            if (Math.abs(moduleSize - stateCount[i]) >= maxVariance) {\n                return false;\n            }\n        }\n        return true;\n    };\n    /**\n     * <p>After a horizontal scan finds a potential alignment pattern, this method\n     * \"cross-checks\" by scanning down vertically through the center of the possible\n     * alignment pattern to see if the same proportion is detected.</p>\n     *\n     * @param startI row where an alignment pattern was detected\n     * @param centerJ center of the section that appears to cross an alignment pattern\n     * @param maxCount maximum reasonable number of modules that should be\n     * observed in any reading state, based on the results of the horizontal scan\n     * @return vertical center of alignment pattern, or {@link Float#NaN} if not found\n     */\n    AlignmentPatternFinder.prototype.crossCheckVertical = function (startI /*int*/, centerJ /*int*/, maxCount /*int*/, originalStateCountTotal /*int*/) {\n        var image = this.image;\n        var maxI = image.getHeight();\n        var stateCount = this.crossCheckStateCount;\n        stateCount[0] = 0;\n        stateCount[1] = 0;\n        stateCount[2] = 0;\n        // Start counting up from center\n        var i = startI;\n        while (i >= 0 && image.get(centerJ, i) && stateCount[1] <= maxCount) {\n            stateCount[1]++;\n            i--;\n        }\n        // If already too many modules in this state or ran off the edge:\n        if (i < 0 || stateCount[1] > maxCount) {\n            return NaN;\n        }\n        while (i >= 0 && !image.get(centerJ, i) && stateCount[0] <= maxCount) {\n            stateCount[0]++;\n            i--;\n        }\n        if (stateCount[0] > maxCount) {\n            return NaN;\n        }\n        // Now also count down from center\n        i = startI + 1;\n        while (i < maxI && image.get(centerJ, i) && stateCount[1] <= maxCount) {\n            stateCount[1]++;\n            i++;\n        }\n        if (i === maxI || stateCount[1] > maxCount) {\n            return NaN;\n        }\n        while (i < maxI && !image.get(centerJ, i) && stateCount[2] <= maxCount) {\n            stateCount[2]++;\n            i++;\n        }\n        if (stateCount[2] > maxCount) {\n            return NaN;\n        }\n        var stateCountTotal = stateCount[0] + stateCount[1] + stateCount[2];\n        if (5 * Math.abs(stateCountTotal - originalStateCountTotal) >= 2 * originalStateCountTotal) {\n            return NaN;\n        }\n        return this.foundPatternCross(stateCount) ? AlignmentPatternFinder.centerFromEnd(stateCount, i) : NaN;\n    };\n    /**\n     * <p>This is called when a horizontal scan finds a possible alignment pattern. It will\n     * cross check with a vertical scan, and if successful, will see if this pattern had been\n     * found on a previous horizontal scan. If so, we consider it confirmed and conclude we have\n     * found the alignment pattern.</p>\n     *\n     * @param stateCount reading state module counts from horizontal scan\n     * @param i row where alignment pattern may be found\n     * @param j end of possible alignment pattern in row\n     * @return {@link AlignmentPattern} if we have found the same pattern twice, or null if not\n     */\n    AlignmentPatternFinder.prototype.handlePossibleCenter = function (stateCount, i /*int*/, j /*int*/) {\n        var e_1, _a;\n        var stateCountTotal = stateCount[0] + stateCount[1] + stateCount[2];\n        var centerJ = AlignmentPatternFinder.centerFromEnd(stateCount, j);\n        var centerI = this.crossCheckVertical(i, /*(int) */ centerJ, 2 * stateCount[1], stateCountTotal);\n        if (!isNaN(centerI)) {\n            var estimatedModuleSize = (stateCount[0] + stateCount[1] + stateCount[2]) / 3.0;\n            try {\n                for (var _b = __values(this.possibleCenters), _c = _b.next(); !_c.done; _c = _b.next()) {\n                    var center = _c.value;\n                    // Look for about the same center and module size:\n                    if (center.aboutEquals(estimatedModuleSize, centerI, centerJ)) {\n                        return center.combineEstimate(centerI, centerJ, estimatedModuleSize);\n                    }\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n            // Hadn't found this before; save it\n            var point = new AlignmentPattern_1.default(centerJ, centerI, estimatedModuleSize);\n            this.possibleCenters.push(point);\n            if (this.resultPointCallback !== null && this.resultPointCallback !== undefined) {\n                this.resultPointCallback.foundPossibleResultPoint(point);\n            }\n        }\n        return null;\n    };\n    return AlignmentPatternFinder;\n}());\nexports.default = AlignmentPatternFinder;\n//# sourceMappingURL=AlignmentPatternFinder.js.map"]},"metadata":{},"sourceType":"script"}