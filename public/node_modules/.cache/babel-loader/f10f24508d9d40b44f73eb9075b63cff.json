{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2007 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*namespace com.google.zxing.qrcode.decoder {*/\n\nvar ArgumentException_1 = require(\"../../ArgumentException\");\n\nvar IllegalArgumentException_1 = require(\"../../IllegalArgumentException\");\n\nvar ErrorCorrectionLevelValues;\n\n(function (ErrorCorrectionLevelValues) {\n  ErrorCorrectionLevelValues[ErrorCorrectionLevelValues[\"L\"] = 0] = \"L\";\n  ErrorCorrectionLevelValues[ErrorCorrectionLevelValues[\"M\"] = 1] = \"M\";\n  ErrorCorrectionLevelValues[ErrorCorrectionLevelValues[\"Q\"] = 2] = \"Q\";\n  ErrorCorrectionLevelValues[ErrorCorrectionLevelValues[\"H\"] = 3] = \"H\";\n})(ErrorCorrectionLevelValues = exports.ErrorCorrectionLevelValues || (exports.ErrorCorrectionLevelValues = {}));\n/**\n * <p>See ISO 18004:2006, 6.5.1. This enum encapsulates the four error correction levels\n * defined by the QR code standard.</p>\n *\n * @author Sean Owen\n */\n\n\nvar ErrorCorrectionLevel =\n/** @class */\nfunction () {\n  function ErrorCorrectionLevel(value, stringValue, bits\n  /*int*/\n  ) {\n    this.value = value;\n    this.stringValue = stringValue;\n    this.bits = bits;\n    ErrorCorrectionLevel.FOR_BITS.set(bits, this);\n    ErrorCorrectionLevel.FOR_VALUE.set(value, this);\n  }\n\n  ErrorCorrectionLevel.prototype.getValue = function () {\n    return this.value;\n  };\n\n  ErrorCorrectionLevel.prototype.getBits = function () {\n    return this.bits;\n  };\n\n  ErrorCorrectionLevel.fromString = function (s) {\n    switch (s) {\n      case 'L':\n        return ErrorCorrectionLevel.L;\n\n      case 'M':\n        return ErrorCorrectionLevel.M;\n\n      case 'Q':\n        return ErrorCorrectionLevel.Q;\n\n      case 'H':\n        return ErrorCorrectionLevel.H;\n\n      default:\n        throw new ArgumentException_1.default(s + 'not available');\n    }\n  };\n\n  ErrorCorrectionLevel.prototype.toString = function () {\n    return this.stringValue;\n  };\n\n  ErrorCorrectionLevel.prototype.equals = function (o) {\n    if (!(o instanceof ErrorCorrectionLevel)) {\n      return false;\n    }\n\n    var other = o;\n    return this.value === other.value;\n  };\n  /**\n   * @param bits int containing the two bits encoding a QR Code's error correction level\n   * @return ErrorCorrectionLevel representing the encoded error correction level\n   */\n\n\n  ErrorCorrectionLevel.forBits = function (bits\n  /*int*/\n  ) {\n    if (bits < 0 || bits >= ErrorCorrectionLevel.FOR_BITS.size) {\n      throw new IllegalArgumentException_1.default();\n    }\n\n    return ErrorCorrectionLevel.FOR_BITS.get(bits);\n  };\n\n  ErrorCorrectionLevel.FOR_BITS = new Map();\n  ErrorCorrectionLevel.FOR_VALUE = new Map();\n  /** L = ~7% correction */\n\n  ErrorCorrectionLevel.L = new ErrorCorrectionLevel(ErrorCorrectionLevelValues.L, 'L', 0x01);\n  /** M = ~15% correction */\n\n  ErrorCorrectionLevel.M = new ErrorCorrectionLevel(ErrorCorrectionLevelValues.M, 'M', 0x00);\n  /** Q = ~25% correction */\n\n  ErrorCorrectionLevel.Q = new ErrorCorrectionLevel(ErrorCorrectionLevelValues.Q, 'Q', 0x03);\n  /** H = ~30% correction */\n\n  ErrorCorrectionLevel.H = new ErrorCorrectionLevel(ErrorCorrectionLevelValues.H, 'H', 0x02);\n  return ErrorCorrectionLevel;\n}();\n\nexports.default = ErrorCorrectionLevel;","map":{"version":3,"sources":["../../../../src/core/qrcode/decoder/ErrorCorrectionLevel.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/*\n * Copyright 2007 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/*namespace com.google.zxing.qrcode.decoder {*/\nvar ArgumentException_1 = require(\"../../ArgumentException\");\nvar IllegalArgumentException_1 = require(\"../../IllegalArgumentException\");\nvar ErrorCorrectionLevelValues;\n(function (ErrorCorrectionLevelValues) {\n    ErrorCorrectionLevelValues[ErrorCorrectionLevelValues[\"L\"] = 0] = \"L\";\n    ErrorCorrectionLevelValues[ErrorCorrectionLevelValues[\"M\"] = 1] = \"M\";\n    ErrorCorrectionLevelValues[ErrorCorrectionLevelValues[\"Q\"] = 2] = \"Q\";\n    ErrorCorrectionLevelValues[ErrorCorrectionLevelValues[\"H\"] = 3] = \"H\";\n})(ErrorCorrectionLevelValues = exports.ErrorCorrectionLevelValues || (exports.ErrorCorrectionLevelValues = {}));\n/**\n * <p>See ISO 18004:2006, 6.5.1. This enum encapsulates the four error correction levels\n * defined by the QR code standard.</p>\n *\n * @author Sean Owen\n */\nvar ErrorCorrectionLevel = /** @class */ (function () {\n    function ErrorCorrectionLevel(value, stringValue, bits /*int*/) {\n        this.value = value;\n        this.stringValue = stringValue;\n        this.bits = bits;\n        ErrorCorrectionLevel.FOR_BITS.set(bits, this);\n        ErrorCorrectionLevel.FOR_VALUE.set(value, this);\n    }\n    ErrorCorrectionLevel.prototype.getValue = function () {\n        return this.value;\n    };\n    ErrorCorrectionLevel.prototype.getBits = function () {\n        return this.bits;\n    };\n    ErrorCorrectionLevel.fromString = function (s) {\n        switch (s) {\n            case 'L': return ErrorCorrectionLevel.L;\n            case 'M': return ErrorCorrectionLevel.M;\n            case 'Q': return ErrorCorrectionLevel.Q;\n            case 'H': return ErrorCorrectionLevel.H;\n            default: throw new ArgumentException_1.default(s + 'not available');\n        }\n    };\n    ErrorCorrectionLevel.prototype.toString = function () {\n        return this.stringValue;\n    };\n    ErrorCorrectionLevel.prototype.equals = function (o) {\n        if (!(o instanceof ErrorCorrectionLevel)) {\n            return false;\n        }\n        var other = o;\n        return this.value === other.value;\n    };\n    /**\n     * @param bits int containing the two bits encoding a QR Code's error correction level\n     * @return ErrorCorrectionLevel representing the encoded error correction level\n     */\n    ErrorCorrectionLevel.forBits = function (bits /*int*/) {\n        if (bits < 0 || bits >= ErrorCorrectionLevel.FOR_BITS.size) {\n            throw new IllegalArgumentException_1.default();\n        }\n        return ErrorCorrectionLevel.FOR_BITS.get(bits);\n    };\n    ErrorCorrectionLevel.FOR_BITS = new Map();\n    ErrorCorrectionLevel.FOR_VALUE = new Map();\n    /** L = ~7% correction */\n    ErrorCorrectionLevel.L = new ErrorCorrectionLevel(ErrorCorrectionLevelValues.L, 'L', 0x01);\n    /** M = ~15% correction */\n    ErrorCorrectionLevel.M = new ErrorCorrectionLevel(ErrorCorrectionLevelValues.M, 'M', 0x00);\n    /** Q = ~25% correction */\n    ErrorCorrectionLevel.Q = new ErrorCorrectionLevel(ErrorCorrectionLevelValues.Q, 'Q', 0x03);\n    /** H = ~30% correction */\n    ErrorCorrectionLevel.H = new ErrorCorrectionLevel(ErrorCorrectionLevelValues.H, 'H', 0x02);\n    return ErrorCorrectionLevel;\n}());\nexports.default = ErrorCorrectionLevel;\n//# sourceMappingURL=ErrorCorrectionLevel.js.map"]},"metadata":{},"sourceType":"script"}