{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2007 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*namespace com.google.zxing.common {*/\n\nvar IllegalArgumentException_1 = require(\"../IllegalArgumentException\");\n/**\n * <p>This provides an easy abstraction to read bits at a time from a sequence of bytes, where the\n * number of bits read is not often a multiple of 8.</p>\n *\n * <p>This class is thread-safe but not reentrant -- unless the caller modifies the bytes array\n * it passed in, in which case all bets are off.</p>\n *\n * @author Sean Owen\n */\n\n\nvar BitSource =\n/** @class */\nfunction () {\n  /**\n   * @param bytes bytes from which this will read bits. Bits will be read from the first byte first.\n   * Bits are read within a byte from most-significant to least-significant bit.\n   */\n  function BitSource(bytes) {\n    this.bytes = bytes;\n    this.byteOffset = 0;\n    this.bitOffset = 0;\n  }\n  /**\n   * @return index of next bit in current byte which would be read by the next call to {@link #readBits(int)}.\n   */\n\n\n  BitSource.prototype.getBitOffset = function () {\n    return this.bitOffset;\n  };\n  /**\n   * @return index of next byte in input byte array which would be read by the next call to {@link #readBits(int)}.\n   */\n\n\n  BitSource.prototype.getByteOffset = function () {\n    return this.byteOffset;\n  };\n  /**\n   * @param numBits number of bits to read\n   * @return int representing the bits read. The bits will appear as the least-significant\n   *         bits of the int\n   * @throws IllegalArgumentException if numBits isn't in [1,32] or more than is available\n   */\n\n\n  BitSource.prototype.readBits = function (numBits\n  /*int*/\n  ) {\n    if (numBits < 1 || numBits > 32 || numBits > this.available()) {\n      throw new IllegalArgumentException_1.default('' + numBits);\n    }\n\n    var result = 0;\n    var bitOffset = this.bitOffset;\n    var byteOffset = this.byteOffset;\n    var bytes = this.bytes; // First, read remainder from current byte\n\n    if (bitOffset > 0) {\n      var bitsLeft = 8 - bitOffset;\n      var toRead = numBits < bitsLeft ? numBits : bitsLeft;\n      var bitsToNotRead = bitsLeft - toRead;\n      var mask = 0xFF >> 8 - toRead << bitsToNotRead;\n      result = (bytes[byteOffset] & mask) >> bitsToNotRead;\n      numBits -= toRead;\n      bitOffset += toRead;\n\n      if (bitOffset === 8) {\n        bitOffset = 0;\n        byteOffset++;\n      }\n    } // Next read whole bytes\n\n\n    if (numBits > 0) {\n      while (numBits >= 8) {\n        result = result << 8 | bytes[byteOffset] & 0xFF;\n        byteOffset++;\n        numBits -= 8;\n      } // Finally read a partial byte\n\n\n      if (numBits > 0) {\n        var bitsToNotRead = 8 - numBits;\n        var mask = 0xFF >> bitsToNotRead << bitsToNotRead;\n        result = result << numBits | (bytes[byteOffset] & mask) >> bitsToNotRead;\n        bitOffset += numBits;\n      }\n    }\n\n    this.bitOffset = bitOffset;\n    this.byteOffset = byteOffset;\n    return result;\n  };\n  /**\n   * @return number of bits that can be read successfully\n   */\n\n\n  BitSource.prototype.available = function () {\n    return 8 * (this.bytes.length - this.byteOffset) - this.bitOffset;\n  };\n\n  return BitSource;\n}();\n\nexports.default = BitSource;","map":{"version":3,"sources":["../../../src/core/common/BitSource.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;AAcG;;;;;AAEH;;AAGA,IAAA,0BAAA,GAAA,OAAA,CAAA,6BAAA,CAAA;AAEA;;;;;;;;AAQG;;;AACH,IAAA,SAAA;AAAA;AAAA,YAAA;AAKI;;;AAGG;AACH,WAAA,SAAA,CAA2B,KAA3B,EAA4C;AAAjB,SAAA,KAAA,GAAA,KAAA;AACvB,SAAK,UAAL,GAAkB,CAAlB;AACA,SAAK,SAAL,GAAiB,CAAjB;AACH;AAED;;AAEG;;;AACI,EAAA,SAAA,CAAA,SAAA,CAAA,YAAA,GAAP,YAAA;AACI,WAAO,KAAK,SAAZ;AACH,GAFM;AAIP;;AAEG;;;AACI,EAAA,SAAA,CAAA,SAAA,CAAA,aAAA,GAAP,YAAA;AACI,WAAO,KAAK,UAAZ;AACH,GAFM;AAIP;;;;;AAKG;;;AACI,EAAA,SAAA,CAAA,SAAA,CAAA,QAAA,GAAP,UAAgB;AAAgB;AAAhC,IAAuC;AACnC,QAAI,OAAO,GAAG,CAAV,IAAe,OAAO,GAAG,EAAzB,IAA+B,OAAO,GAAG,KAAK,SAAL,EAA7C,EAA+D;AAC3D,YAAM,IAAI,0BAAA,CAAA,OAAJ,CAA6B,KAAK,OAAlC,CAAN;AACH;;AAED,QAAI,MAAM,GAAG,CAAb;AAEA,QAAI,SAAS,GAAG,KAAK,SAArB;AACA,QAAI,UAAU,GAAG,KAAK,UAAtB;AAEA,QAAM,KAAK,GAAG,KAAK,KAAnB,CAVmC,CAWnC;;AACA,QAAI,SAAS,GAAG,CAAhB,EAAmB;AACf,UAAM,QAAQ,GAAG,IAAI,SAArB;AACA,UAAM,MAAM,GAAG,OAAO,GAAG,QAAV,GAAqB,OAArB,GAA+B,QAA9C;AACA,UAAM,aAAa,GAAG,QAAQ,GAAG,MAAjC;AACA,UAAM,IAAI,GAAI,QAAS,IAAI,MAAd,IAA0B,aAAvC;AAEA,MAAA,MAAM,GAAG,CAAC,KAAK,CAAC,UAAD,CAAL,GAAoB,IAArB,KAA8B,aAAvC;AACA,MAAA,OAAO,IAAI,MAAX;AACA,MAAA,SAAS,IAAI,MAAb;;AAEA,UAAI,SAAS,KAAK,CAAlB,EAAqB;AACjB,QAAA,SAAS,GAAG,CAAZ;AACA,QAAA,UAAU;AACb;AACJ,KA1BkC,CA4BnC;;;AACA,QAAI,OAAO,GAAG,CAAd,EAAiB;AAEb,aAAO,OAAO,IAAI,CAAlB,EAAqB;AACjB,QAAA,MAAM,GAAI,MAAM,IAAI,CAAX,GAAiB,KAAK,CAAC,UAAD,CAAL,GAAoB,IAA9C;AACA,QAAA,UAAU;AACV,QAAA,OAAO,IAAI,CAAX;AACH,OANY,CAQb;;;AACA,UAAI,OAAO,GAAG,CAAd,EAAiB;AACb,YAAM,aAAa,GAAG,IAAI,OAA1B;AACA,YAAM,IAAI,GAAI,QAAQ,aAAT,IAA2B,aAAxC;AAEA,QAAA,MAAM,GAAI,MAAM,IAAI,OAAX,GAAuB,CAAC,KAAK,CAAC,UAAD,CAAL,GAAoB,IAArB,KAA8B,aAA9D;AACA,QAAA,SAAS,IAAI,OAAb;AACH;AACJ;;AAED,SAAK,SAAL,GAAiB,SAAjB;AACA,SAAK,UAAL,GAAkB,UAAlB;AAEA,WAAO,MAAP;AACH,GAnDM;AAqDP;;AAEG;;;AACI,EAAA,SAAA,CAAA,SAAA,CAAA,SAAA,GAAP,YAAA;AACI,WAAO,KAAK,KAAK,KAAL,CAAW,MAAX,GAAoB,KAAK,UAA9B,IAA4C,KAAK,SAAxD;AACH,GAFM;;AAIX,SAAA,SAAA;AAAC,CA9FD,EAAA","sourceRoot":"","sourcesContent":["\"use strict\";\n/*\n * Copyright 2007 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/*namespace com.google.zxing.common {*/\nvar IllegalArgumentException_1 = require(\"../IllegalArgumentException\");\n/**\n * <p>This provides an easy abstraction to read bits at a time from a sequence of bytes, where the\n * number of bits read is not often a multiple of 8.</p>\n *\n * <p>This class is thread-safe but not reentrant -- unless the caller modifies the bytes array\n * it passed in, in which case all bets are off.</p>\n *\n * @author Sean Owen\n */\nvar BitSource = /** @class */ (function () {\n    /**\n     * @param bytes bytes from which this will read bits. Bits will be read from the first byte first.\n     * Bits are read within a byte from most-significant to least-significant bit.\n     */\n    function BitSource(bytes) {\n        this.bytes = bytes;\n        this.byteOffset = 0;\n        this.bitOffset = 0;\n    }\n    /**\n     * @return index of next bit in current byte which would be read by the next call to {@link #readBits(int)}.\n     */\n    BitSource.prototype.getBitOffset = function () {\n        return this.bitOffset;\n    };\n    /**\n     * @return index of next byte in input byte array which would be read by the next call to {@link #readBits(int)}.\n     */\n    BitSource.prototype.getByteOffset = function () {\n        return this.byteOffset;\n    };\n    /**\n     * @param numBits number of bits to read\n     * @return int representing the bits read. The bits will appear as the least-significant\n     *         bits of the int\n     * @throws IllegalArgumentException if numBits isn't in [1,32] or more than is available\n     */\n    BitSource.prototype.readBits = function (numBits /*int*/) {\n        if (numBits < 1 || numBits > 32 || numBits > this.available()) {\n            throw new IllegalArgumentException_1.default('' + numBits);\n        }\n        var result = 0;\n        var bitOffset = this.bitOffset;\n        var byteOffset = this.byteOffset;\n        var bytes = this.bytes;\n        // First, read remainder from current byte\n        if (bitOffset > 0) {\n            var bitsLeft = 8 - bitOffset;\n            var toRead = numBits < bitsLeft ? numBits : bitsLeft;\n            var bitsToNotRead = bitsLeft - toRead;\n            var mask = (0xFF >> (8 - toRead)) << bitsToNotRead;\n            result = (bytes[byteOffset] & mask) >> bitsToNotRead;\n            numBits -= toRead;\n            bitOffset += toRead;\n            if (bitOffset === 8) {\n                bitOffset = 0;\n                byteOffset++;\n            }\n        }\n        // Next read whole bytes\n        if (numBits > 0) {\n            while (numBits >= 8) {\n                result = (result << 8) | (bytes[byteOffset] & 0xFF);\n                byteOffset++;\n                numBits -= 8;\n            }\n            // Finally read a partial byte\n            if (numBits > 0) {\n                var bitsToNotRead = 8 - numBits;\n                var mask = (0xFF >> bitsToNotRead) << bitsToNotRead;\n                result = (result << numBits) | ((bytes[byteOffset] & mask) >> bitsToNotRead);\n                bitOffset += numBits;\n            }\n        }\n        this.bitOffset = bitOffset;\n        this.byteOffset = byteOffset;\n        return result;\n    };\n    /**\n     * @return number of bits that can be read successfully\n     */\n    BitSource.prototype.available = function () {\n        return 8 * (this.bytes.length - this.byteOffset) - this.bitOffset;\n    };\n    return BitSource;\n}());\nexports.default = BitSource;\n//# sourceMappingURL=BitSource.js.map"]},"metadata":{},"sourceType":"script"}