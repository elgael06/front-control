{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar UnsupportedOperationException_1 = require(\"../UnsupportedOperationException\");\n\nvar CharacterSetECI_1 = require(\"../common/CharacterSetECI\");\n/**\n * Responsible for en/decoding strings.\n */\n\n\nvar StringEncoding =\n/** @class */\nfunction () {\n  function StringEncoding() {}\n  /**\n   * Decodes some Uint8Array to a string format.\n   */\n\n\n  StringEncoding.decode = function (bytes, encoding) {\n    var encodingName = this.encodingName(encoding);\n\n    if (this.customDecoder) {\n      return this.customDecoder(bytes, encodingName);\n    } // Increases browser support.\n\n\n    if (typeof TextDecoder === 'undefined' || this.shouldDecodeOnFallback(encodingName)) {\n      return this.decodeFallback(bytes, encodingName);\n    }\n\n    return new TextDecoder(encodingName).decode(bytes);\n  };\n  /**\n   * Checks if the decoding method should use the fallback for decoding\n   * once Node TextDecoder doesn't support all encoding formats.\n   *\n   * @param encodingName\n   */\n\n\n  StringEncoding.shouldDecodeOnFallback = function (encodingName) {\n    return !StringEncoding.isBrowser() && encodingName === 'ISO-8859-1';\n  };\n  /**\n   * Encodes some string into a Uint8Array.\n   */\n\n\n  StringEncoding.encode = function (s, encoding) {\n    var encodingName = this.encodingName(encoding);\n\n    if (this.customEncoder) {\n      return this.customEncoder(s, encodingName);\n    } // Increases browser support.\n\n\n    if (typeof TextEncoder === 'undefined') {\n      return this.encodeFallback(s);\n    } // TextEncoder only encodes to UTF8 by default as specified by encoding.spec.whatwg.org\n\n\n    return new TextEncoder().encode(s);\n  };\n\n  StringEncoding.isBrowser = function () {\n    return typeof window !== 'undefined' && {}.toString.call(window) === '[object Window]';\n  };\n  /**\n   * Returns the string value from some encoding character set.\n   */\n\n\n  StringEncoding.encodingName = function (encoding) {\n    return typeof encoding === 'string' ? encoding : encoding.getName();\n  };\n  /**\n   * Returns character set from some encoding character set.\n   */\n\n\n  StringEncoding.encodingCharacterSet = function (encoding) {\n    if (encoding instanceof CharacterSetECI_1.default) {\n      return encoding;\n    }\n\n    return CharacterSetECI_1.default.getCharacterSetECIByName(encoding);\n  };\n  /**\n   * Runs a fallback for the native decoding funcion.\n   */\n\n\n  StringEncoding.decodeFallback = function (bytes, encoding) {\n    var characterSet = this.encodingCharacterSet(encoding);\n\n    if (StringEncoding.isDecodeFallbackSupported(characterSet)) {\n      var s = '';\n\n      for (var i = 0, length_1 = bytes.length; i < length_1; i++) {\n        var h = bytes[i].toString(16);\n\n        if (h.length < 2) {\n          h = '0' + h;\n        }\n\n        s += '%' + h;\n      }\n\n      return decodeURIComponent(s);\n    }\n\n    if (characterSet.equals(CharacterSetECI_1.default.UnicodeBigUnmarked)) {\n      return String.fromCharCode.apply(null, new Uint16Array(bytes.buffer));\n    }\n\n    throw new UnsupportedOperationException_1.default(\"Encoding \" + this.encodingName(encoding) + \" not supported by fallback.\");\n  };\n\n  StringEncoding.isDecodeFallbackSupported = function (characterSet) {\n    return characterSet.equals(CharacterSetECI_1.default.UTF8) || characterSet.equals(CharacterSetECI_1.default.ISO8859_1) || characterSet.equals(CharacterSetECI_1.default.ASCII);\n  };\n  /**\n   * Runs a fallback for the native encoding funcion.\n   *\n   * @see https://stackoverflow.com/a/17192845/4367683\n   */\n\n\n  StringEncoding.encodeFallback = function (s) {\n    var encodedURIstring = btoa(unescape(encodeURIComponent(s)));\n    var charList = encodedURIstring.split('');\n    var uintArray = [];\n\n    for (var i = 0; i < charList.length; i++) {\n      uintArray.push(charList[i].charCodeAt(0));\n    }\n\n    return new Uint8Array(uintArray);\n  };\n\n  return StringEncoding;\n}();\n\nexports.default = StringEncoding;","map":{"version":3,"sources":["../../../src/core/util/StringEncoding.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar UnsupportedOperationException_1 = require(\"../UnsupportedOperationException\");\nvar CharacterSetECI_1 = require(\"../common/CharacterSetECI\");\n/**\n * Responsible for en/decoding strings.\n */\nvar StringEncoding = /** @class */ (function () {\n    function StringEncoding() {\n    }\n    /**\n     * Decodes some Uint8Array to a string format.\n     */\n    StringEncoding.decode = function (bytes, encoding) {\n        var encodingName = this.encodingName(encoding);\n        if (this.customDecoder) {\n            return this.customDecoder(bytes, encodingName);\n        }\n        // Increases browser support.\n        if (typeof TextDecoder === 'undefined' || this.shouldDecodeOnFallback(encodingName)) {\n            return this.decodeFallback(bytes, encodingName);\n        }\n        return new TextDecoder(encodingName).decode(bytes);\n    };\n    /**\n     * Checks if the decoding method should use the fallback for decoding\n     * once Node TextDecoder doesn't support all encoding formats.\n     *\n     * @param encodingName\n     */\n    StringEncoding.shouldDecodeOnFallback = function (encodingName) {\n        return !StringEncoding.isBrowser() && encodingName === 'ISO-8859-1';\n    };\n    /**\n     * Encodes some string into a Uint8Array.\n     */\n    StringEncoding.encode = function (s, encoding) {\n        var encodingName = this.encodingName(encoding);\n        if (this.customEncoder) {\n            return this.customEncoder(s, encodingName);\n        }\n        // Increases browser support.\n        if (typeof TextEncoder === 'undefined') {\n            return this.encodeFallback(s);\n        }\n        // TextEncoder only encodes to UTF8 by default as specified by encoding.spec.whatwg.org\n        return new TextEncoder().encode(s);\n    };\n    StringEncoding.isBrowser = function () {\n        return (typeof window !== 'undefined' && {}.toString.call(window) === '[object Window]');\n    };\n    /**\n     * Returns the string value from some encoding character set.\n     */\n    StringEncoding.encodingName = function (encoding) {\n        return typeof encoding === 'string'\n            ? encoding\n            : encoding.getName();\n    };\n    /**\n     * Returns character set from some encoding character set.\n     */\n    StringEncoding.encodingCharacterSet = function (encoding) {\n        if (encoding instanceof CharacterSetECI_1.default) {\n            return encoding;\n        }\n        return CharacterSetECI_1.default.getCharacterSetECIByName(encoding);\n    };\n    /**\n     * Runs a fallback for the native decoding funcion.\n     */\n    StringEncoding.decodeFallback = function (bytes, encoding) {\n        var characterSet = this.encodingCharacterSet(encoding);\n        if (StringEncoding.isDecodeFallbackSupported(characterSet)) {\n            var s = '';\n            for (var i = 0, length_1 = bytes.length; i < length_1; i++) {\n                var h = bytes[i].toString(16);\n                if (h.length < 2) {\n                    h = '0' + h;\n                }\n                s += '%' + h;\n            }\n            return decodeURIComponent(s);\n        }\n        if (characterSet.equals(CharacterSetECI_1.default.UnicodeBigUnmarked)) {\n            return String.fromCharCode.apply(null, new Uint16Array(bytes.buffer));\n        }\n        throw new UnsupportedOperationException_1.default(\"Encoding \" + this.encodingName(encoding) + \" not supported by fallback.\");\n    };\n    StringEncoding.isDecodeFallbackSupported = function (characterSet) {\n        return characterSet.equals(CharacterSetECI_1.default.UTF8) ||\n            characterSet.equals(CharacterSetECI_1.default.ISO8859_1) ||\n            characterSet.equals(CharacterSetECI_1.default.ASCII);\n    };\n    /**\n     * Runs a fallback for the native encoding funcion.\n     *\n     * @see https://stackoverflow.com/a/17192845/4367683\n     */\n    StringEncoding.encodeFallback = function (s) {\n        var encodedURIstring = btoa(unescape(encodeURIComponent(s)));\n        var charList = encodedURIstring.split('');\n        var uintArray = [];\n        for (var i = 0; i < charList.length; i++) {\n            uintArray.push(charList[i].charCodeAt(0));\n        }\n        return new Uint8Array(uintArray);\n    };\n    return StringEncoding;\n}());\nexports.default = StringEncoding;\n//# sourceMappingURL=StringEncoding.js.map"]},"metadata":{},"sourceType":"script"}