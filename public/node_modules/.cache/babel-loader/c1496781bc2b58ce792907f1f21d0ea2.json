{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2009 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar LuminanceSource_1 = require(\"./LuminanceSource\");\n/*namespace com.google.zxing {*/\n\n/**\n * A wrapper implementation of {@link LuminanceSource} which inverts the luminances it returns -- black becomes\n * white and vice versa, and each value becomes (255-value).\n *\n * @author Sean Owen\n */\n\n\nvar InvertedLuminanceSource =\n/** @class */\nfunction (_super) {\n  __extends(InvertedLuminanceSource, _super);\n\n  function InvertedLuminanceSource(delegate) {\n    var _this = _super.call(this, delegate.getWidth(), delegate.getHeight()) || this;\n\n    _this.delegate = delegate;\n    return _this;\n  }\n  /*@Override*/\n\n\n  InvertedLuminanceSource.prototype.getRow = function (y\n  /*int*/\n  , row) {\n    var sourceRow = this.delegate.getRow(y, row);\n    var width = this.getWidth();\n\n    for (var i = 0; i < width; i++) {\n      sourceRow[i] =\n      /*(byte)*/\n      255 - (sourceRow[i] & 0xFF);\n    }\n\n    return sourceRow;\n  };\n  /*@Override*/\n\n\n  InvertedLuminanceSource.prototype.getMatrix = function () {\n    var matrix = this.delegate.getMatrix();\n    var length = this.getWidth() * this.getHeight();\n    var invertedMatrix = new Uint8ClampedArray(length);\n\n    for (var i = 0; i < length; i++) {\n      invertedMatrix[i] =\n      /*(byte)*/\n      255 - (matrix[i] & 0xFF);\n    }\n\n    return invertedMatrix;\n  };\n  /*@Override*/\n\n\n  InvertedLuminanceSource.prototype.isCropSupported = function () {\n    return this.delegate.isCropSupported();\n  };\n  /*@Override*/\n\n\n  InvertedLuminanceSource.prototype.crop = function (left\n  /*int*/\n  , top\n  /*int*/\n  , width\n  /*int*/\n  , height\n  /*int*/\n  ) {\n    return new InvertedLuminanceSource(this.delegate.crop(left, top, width, height));\n  };\n  /*@Override*/\n\n\n  InvertedLuminanceSource.prototype.isRotateSupported = function () {\n    return this.delegate.isRotateSupported();\n  };\n  /**\n   * @return original delegate {@link LuminanceSource} since invert undoes itself\n   */\n\n  /*@Override*/\n\n\n  InvertedLuminanceSource.prototype.invert = function () {\n    return this.delegate;\n  };\n  /*@Override*/\n\n\n  InvertedLuminanceSource.prototype.rotateCounterClockwise = function () {\n    return new InvertedLuminanceSource(this.delegate.rotateCounterClockwise());\n  };\n  /*@Override*/\n\n\n  InvertedLuminanceSource.prototype.rotateCounterClockwise45 = function () {\n    return new InvertedLuminanceSource(this.delegate.rotateCounterClockwise45());\n  };\n\n  return InvertedLuminanceSource;\n}(LuminanceSource_1.default);\n\nexports.default = InvertedLuminanceSource;","map":{"version":3,"sources":["../../src/core/InvertedLuminanceSource.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;AAcG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEH,IAAA,iBAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;AAEA;;AAEA;;;;;AAKG;;;AACH,IAAA,uBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAqD,EAAA,SAAA,CAAA,uBAAA,EAAA,MAAA,CAAA;;AAEjD,WAAA,uBAAA,CAA2B,QAA3B,EAAoD;AAApD,QAAA,KAAA,GACI,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,QAAQ,CAAC,QAAT,EAAN,EAA2B,QAAQ,CAAC,SAAT,EAA3B,KAAgD,IADpD;;AAA2B,IAAA,KAAA,CAAA,QAAA,GAAA,QAAA;;AAE1B;AAED;;;AACO,EAAA,uBAAA,CAAA,SAAA,CAAA,MAAA,GAAP,UAAc;AAAU;AAAxB,IAAiC,GAAjC,EAAwD;AACpD,QAAM,SAAS,GAAG,KAAK,QAAL,CAAc,MAAd,CAAqB,CAArB,EAAwB,GAAxB,CAAlB;AACA,QAAM,KAAK,GAAmB,KAAK,QAAL,EAA9B;;AACA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAApB,EAA2B,CAAC,EAA5B,EAAgC;AAC5B,MAAA,SAAS,CAAC,CAAD,CAAT;AAAe;AAAY,aAAO,SAAS,CAAC,CAAD,CAAT,GAAe,IAAtB,CAA3B;AACH;;AACD,WAAO,SAAP;AACH,GAPM;AASP;;;AACO,EAAA,uBAAA,CAAA,SAAA,CAAA,SAAA,GAAP,YAAA;AAEI,QAAM,MAAM,GAAsB,KAAK,QAAL,CAAc,SAAd,EAAlC;AACA,QAAM,MAAM,GAAmB,KAAK,QAAL,KAAkB,KAAK,SAAL,EAAjD;AACA,QAAM,cAAc,GAAG,IAAI,iBAAJ,CAAsB,MAAtB,CAAvB;;AAEA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,MAApB,EAA4B,CAAC,EAA7B,EAAiC;AAC7B,MAAA,cAAc,CAAC,CAAD,CAAd;AAAoB;AAAY,aAAO,MAAM,CAAC,CAAD,CAAN,GAAY,IAAnB,CAAhC;AACH;;AAED,WAAO,cAAP;AACH,GAXM;AAaP;;;AACO,EAAA,uBAAA,CAAA,SAAA,CAAA,eAAA,GAAP,YAAA;AACI,WAAO,KAAK,QAAL,CAAc,eAAd,EAAP;AACH,GAFM;AAIP;;;AACO,EAAA,uBAAA,CAAA,SAAA,CAAA,IAAA,GAAP,UAAY;AAAa;AAAzB,IAAkC;AAAY;AAA9C,IAAuD;AAAc;AAArE,IAA8E;AAAe;AAA7F,IAAoG;AAChG,WAAO,IAAI,uBAAJ,CAA4B,KAAK,QAAL,CAAc,IAAd,CAAmB,IAAnB,EAAyB,GAAzB,EAA8B,KAA9B,EAAqC,MAArC,CAA5B,CAAP;AACH,GAFM;AAIP;;;AACO,EAAA,uBAAA,CAAA,SAAA,CAAA,iBAAA,GAAP,YAAA;AACI,WAAO,KAAK,QAAL,CAAc,iBAAd,EAAP;AACH,GAFM;AAIP;;AAEG;;AACH;;;AACO,EAAA,uBAAA,CAAA,SAAA,CAAA,MAAA,GAAP,YAAA;AACI,WAAO,KAAK,QAAZ;AACH,GAFM;AAIP;;;AACO,EAAA,uBAAA,CAAA,SAAA,CAAA,sBAAA,GAAP,YAAA;AACI,WAAO,IAAI,uBAAJ,CAA4B,KAAK,QAAL,CAAc,sBAAd,EAA5B,CAAP;AACH,GAFM;AAIP;;;AACO,EAAA,uBAAA,CAAA,SAAA,CAAA,wBAAA,GAAP,YAAA;AACI,WAAO,IAAI,uBAAJ,CAA4B,KAAK,QAAL,CAAc,wBAAd,EAA5B,CAAP;AACH,GAFM;;AAIX,SAAA,uBAAA;AAAC,CA/DD,CAAqD,iBAAA,CAAA,OAArD,CAAA","sourceRoot":"","sourcesContent":["\"use strict\";\n/*\n * Copyright 2009 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar LuminanceSource_1 = require(\"./LuminanceSource\");\n/*namespace com.google.zxing {*/\n/**\n * A wrapper implementation of {@link LuminanceSource} which inverts the luminances it returns -- black becomes\n * white and vice versa, and each value becomes (255-value).\n *\n * @author Sean Owen\n */\nvar InvertedLuminanceSource = /** @class */ (function (_super) {\n    __extends(InvertedLuminanceSource, _super);\n    function InvertedLuminanceSource(delegate) {\n        var _this = _super.call(this, delegate.getWidth(), delegate.getHeight()) || this;\n        _this.delegate = delegate;\n        return _this;\n    }\n    /*@Override*/\n    InvertedLuminanceSource.prototype.getRow = function (y /*int*/, row) {\n        var sourceRow = this.delegate.getRow(y, row);\n        var width = this.getWidth();\n        for (var i = 0; i < width; i++) {\n            sourceRow[i] = /*(byte)*/ (255 - (sourceRow[i] & 0xFF));\n        }\n        return sourceRow;\n    };\n    /*@Override*/\n    InvertedLuminanceSource.prototype.getMatrix = function () {\n        var matrix = this.delegate.getMatrix();\n        var length = this.getWidth() * this.getHeight();\n        var invertedMatrix = new Uint8ClampedArray(length);\n        for (var i = 0; i < length; i++) {\n            invertedMatrix[i] = /*(byte)*/ (255 - (matrix[i] & 0xFF));\n        }\n        return invertedMatrix;\n    };\n    /*@Override*/\n    InvertedLuminanceSource.prototype.isCropSupported = function () {\n        return this.delegate.isCropSupported();\n    };\n    /*@Override*/\n    InvertedLuminanceSource.prototype.crop = function (left /*int*/, top /*int*/, width /*int*/, height /*int*/) {\n        return new InvertedLuminanceSource(this.delegate.crop(left, top, width, height));\n    };\n    /*@Override*/\n    InvertedLuminanceSource.prototype.isRotateSupported = function () {\n        return this.delegate.isRotateSupported();\n    };\n    /**\n     * @return original delegate {@link LuminanceSource} since invert undoes itself\n     */\n    /*@Override*/\n    InvertedLuminanceSource.prototype.invert = function () {\n        return this.delegate;\n    };\n    /*@Override*/\n    InvertedLuminanceSource.prototype.rotateCounterClockwise = function () {\n        return new InvertedLuminanceSource(this.delegate.rotateCounterClockwise());\n    };\n    /*@Override*/\n    InvertedLuminanceSource.prototype.rotateCounterClockwise45 = function () {\n        return new InvertedLuminanceSource(this.delegate.rotateCounterClockwise45());\n    };\n    return InvertedLuminanceSource;\n}(LuminanceSource_1.default));\nexports.default = InvertedLuminanceSource;\n//# sourceMappingURL=InvertedLuminanceSource.js.map"]},"metadata":{},"sourceType":"script"}