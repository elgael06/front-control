{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2007 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar __values = this && this.__values || function (o) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator],\n      i = 0;\n  if (m) return m.call(o);\n  return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*namespace com.google.zxing.qrcode.decoder {*/\n\nvar BitMatrix_1 = require(\"../../common/BitMatrix\");\n\nvar FormatInformation_1 = require(\"./FormatInformation\");\n\nvar ECBlocks_1 = require(\"./ECBlocks\");\n\nvar ECB_1 = require(\"./ECB\");\n\nvar FormatException_1 = require(\"../../FormatException\");\n\nvar IllegalArgumentException_1 = require(\"../../IllegalArgumentException\");\n/**\n * See ISO 18004:2006 Annex D\n *\n * @author Sean Owen\n */\n\n\nvar Version =\n/** @class */\nfunction () {\n  function Version(versionNumber\n  /*int*/\n  , alignmentPatternCenters) {\n    var e_1, _a;\n\n    var ecBlocks = [];\n\n    for (var _i = 2; _i < arguments.length; _i++) {\n      ecBlocks[_i - 2] = arguments[_i];\n    }\n\n    this.versionNumber = versionNumber;\n    this.alignmentPatternCenters = alignmentPatternCenters;\n    this.ecBlocks = ecBlocks;\n    var total = 0;\n    var ecCodewords = ecBlocks[0].getECCodewordsPerBlock();\n    var ecbArray = ecBlocks[0].getECBlocks();\n\n    try {\n      for (var ecbArray_1 = __values(ecbArray), ecbArray_1_1 = ecbArray_1.next(); !ecbArray_1_1.done; ecbArray_1_1 = ecbArray_1.next()) {\n        var ecBlock = ecbArray_1_1.value;\n        total += ecBlock.getCount() * (ecBlock.getDataCodewords() + ecCodewords);\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (ecbArray_1_1 && !ecbArray_1_1.done && (_a = ecbArray_1.return)) _a.call(ecbArray_1);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n\n    this.totalCodewords = total;\n  }\n\n  Version.prototype.getVersionNumber = function () {\n    return this.versionNumber;\n  };\n\n  Version.prototype.getAlignmentPatternCenters = function () {\n    return this.alignmentPatternCenters;\n  };\n\n  Version.prototype.getTotalCodewords = function () {\n    return this.totalCodewords;\n  };\n\n  Version.prototype.getDimensionForVersion = function () {\n    return 17 + 4 * this.versionNumber;\n  };\n\n  Version.prototype.getECBlocksForLevel = function (ecLevel) {\n    return this.ecBlocks[ecLevel.getValue()]; // TYPESCRIPTPORT: original was using ordinal, and using the order of levels as defined in ErrorCorrectionLevel enum (LMQH)\n    // I will use the direct value from ErrorCorrectionLevelValues enum which in typescript goes to a number\n  };\n  /**\n   * <p>Deduces version information purely from QR Code dimensions.</p>\n   *\n   * @param dimension dimension in modules\n   * @return Version for a QR Code of that dimension\n   * @throws FormatException if dimension is not 1 mod 4\n   */\n\n\n  Version.getProvisionalVersionForDimension = function (dimension\n  /*int*/\n  ) {\n    if (dimension % 4 !== 1) {\n      throw new FormatException_1.default();\n    }\n\n    try {\n      return this.getVersionForNumber((dimension - 17) / 4);\n    } catch (ignored\n    /*: IllegalArgumentException*/\n    ) {\n      throw new FormatException_1.default();\n    }\n  };\n\n  Version.getVersionForNumber = function (versionNumber\n  /*int*/\n  ) {\n    if (versionNumber < 1 || versionNumber > 40) {\n      throw new IllegalArgumentException_1.default();\n    }\n\n    return Version.VERSIONS[versionNumber - 1];\n  };\n\n  Version.decodeVersionInformation = function (versionBits\n  /*int*/\n  ) {\n    var bestDifference = Number.MAX_SAFE_INTEGER;\n    var bestVersion = 0;\n\n    for (var i = 0; i < Version.VERSION_DECODE_INFO.length; i++) {\n      var targetVersion = Version.VERSION_DECODE_INFO[i]; // Do the version info bits match exactly? done.\n\n      if (targetVersion === versionBits) {\n        return Version.getVersionForNumber(i + 7);\n      } // Otherwise see if this is the closest to a real version info bit string\n      // we have seen so far\n\n\n      var bitsDifference = FormatInformation_1.default.numBitsDiffering(versionBits, targetVersion);\n\n      if (bitsDifference < bestDifference) {\n        bestVersion = i + 7;\n        bestDifference = bitsDifference;\n      }\n    } // We can tolerate up to 3 bits of error since no two version info codewords will\n    // differ in less than 8 bits.\n\n\n    if (bestDifference <= 3) {\n      return Version.getVersionForNumber(bestVersion);\n    } // If we didn't find a close enough match, fail\n\n\n    return null;\n  };\n  /**\n   * See ISO 18004:2006 Annex E\n   */\n\n\n  Version.prototype.buildFunctionPattern = function () {\n    var dimension = this.getDimensionForVersion();\n    var bitMatrix = new BitMatrix_1.default(dimension); // Top left finder pattern + separator + format\n\n    bitMatrix.setRegion(0, 0, 9, 9); // Top right finder pattern + separator + format\n\n    bitMatrix.setRegion(dimension - 8, 0, 8, 9); // Bottom left finder pattern + separator + format\n\n    bitMatrix.setRegion(0, dimension - 8, 9, 8); // Alignment patterns\n\n    var max = this.alignmentPatternCenters.length;\n\n    for (var x = 0; x < max; x++) {\n      var i = this.alignmentPatternCenters[x] - 2;\n\n      for (var y = 0; y < max; y++) {\n        if (x === 0 && (y === 0 || y === max - 1) || x === max - 1 && y === 0) {\n          // No alignment patterns near the three finder patterns\n          continue;\n        }\n\n        bitMatrix.setRegion(this.alignmentPatternCenters[y] - 2, i, 5, 5);\n      }\n    } // Vertical timing pattern\n\n\n    bitMatrix.setRegion(6, 9, 1, dimension - 17); // Horizontal timing pattern\n\n    bitMatrix.setRegion(9, 6, dimension - 17, 1);\n\n    if (this.versionNumber > 6) {\n      // Version info, top right\n      bitMatrix.setRegion(dimension - 11, 0, 3, 6); // Version info, bottom left\n\n      bitMatrix.setRegion(0, dimension - 11, 6, 3);\n    }\n\n    return bitMatrix;\n  };\n  /*@Override*/\n\n\n  Version.prototype.toString = function () {\n    return '' + this.versionNumber;\n  };\n  /**\n     * See ISO 18004:2006 Annex D.\n     * Element i represents the raw version bits that specify version i + 7\n     */\n\n\n  Version.VERSION_DECODE_INFO = Int32Array.from([0x07C94, 0x085BC, 0x09A99, 0x0A4D3, 0x0BBF6, 0x0C762, 0x0D847, 0x0E60D, 0x0F928, 0x10B78, 0x1145D, 0x12A17, 0x13532, 0x149A6, 0x15683, 0x168C9, 0x177EC, 0x18EC4, 0x191E1, 0x1AFAB, 0x1B08E, 0x1CC1A, 0x1D33F, 0x1ED75, 0x1F250, 0x209D5, 0x216F0, 0x228BA, 0x2379F, 0x24B0B, 0x2542E, 0x26A64, 0x27541, 0x28C69]);\n  /**\n     * See ISO 18004:2006 6.5.1 Table 9\n     */\n\n  Version.VERSIONS = [new Version(1, new Int32Array(0), new ECBlocks_1.default(7, new ECB_1.default(1, 19)), new ECBlocks_1.default(10, new ECB_1.default(1, 16)), new ECBlocks_1.default(13, new ECB_1.default(1, 13)), new ECBlocks_1.default(17, new ECB_1.default(1, 9))), new Version(2, Int32Array.from([6, 18]), new ECBlocks_1.default(10, new ECB_1.default(1, 34)), new ECBlocks_1.default(16, new ECB_1.default(1, 28)), new ECBlocks_1.default(22, new ECB_1.default(1, 22)), new ECBlocks_1.default(28, new ECB_1.default(1, 16))), new Version(3, Int32Array.from([6, 22]), new ECBlocks_1.default(15, new ECB_1.default(1, 55)), new ECBlocks_1.default(26, new ECB_1.default(1, 44)), new ECBlocks_1.default(18, new ECB_1.default(2, 17)), new ECBlocks_1.default(22, new ECB_1.default(2, 13))), new Version(4, Int32Array.from([6, 26]), new ECBlocks_1.default(20, new ECB_1.default(1, 80)), new ECBlocks_1.default(18, new ECB_1.default(2, 32)), new ECBlocks_1.default(26, new ECB_1.default(2, 24)), new ECBlocks_1.default(16, new ECB_1.default(4, 9))), new Version(5, Int32Array.from([6, 30]), new ECBlocks_1.default(26, new ECB_1.default(1, 108)), new ECBlocks_1.default(24, new ECB_1.default(2, 43)), new ECBlocks_1.default(18, new ECB_1.default(2, 15), new ECB_1.default(2, 16)), new ECBlocks_1.default(22, new ECB_1.default(2, 11), new ECB_1.default(2, 12))), new Version(6, Int32Array.from([6, 34]), new ECBlocks_1.default(18, new ECB_1.default(2, 68)), new ECBlocks_1.default(16, new ECB_1.default(4, 27)), new ECBlocks_1.default(24, new ECB_1.default(4, 19)), new ECBlocks_1.default(28, new ECB_1.default(4, 15))), new Version(7, Int32Array.from([6, 22, 38]), new ECBlocks_1.default(20, new ECB_1.default(2, 78)), new ECBlocks_1.default(18, new ECB_1.default(4, 31)), new ECBlocks_1.default(18, new ECB_1.default(2, 14), new ECB_1.default(4, 15)), new ECBlocks_1.default(26, new ECB_1.default(4, 13), new ECB_1.default(1, 14))), new Version(8, Int32Array.from([6, 24, 42]), new ECBlocks_1.default(24, new ECB_1.default(2, 97)), new ECBlocks_1.default(22, new ECB_1.default(2, 38), new ECB_1.default(2, 39)), new ECBlocks_1.default(22, new ECB_1.default(4, 18), new ECB_1.default(2, 19)), new ECBlocks_1.default(26, new ECB_1.default(4, 14), new ECB_1.default(2, 15))), new Version(9, Int32Array.from([6, 26, 46]), new ECBlocks_1.default(30, new ECB_1.default(2, 116)), new ECBlocks_1.default(22, new ECB_1.default(3, 36), new ECB_1.default(2, 37)), new ECBlocks_1.default(20, new ECB_1.default(4, 16), new ECB_1.default(4, 17)), new ECBlocks_1.default(24, new ECB_1.default(4, 12), new ECB_1.default(4, 13))), new Version(10, Int32Array.from([6, 28, 50]), new ECBlocks_1.default(18, new ECB_1.default(2, 68), new ECB_1.default(2, 69)), new ECBlocks_1.default(26, new ECB_1.default(4, 43), new ECB_1.default(1, 44)), new ECBlocks_1.default(24, new ECB_1.default(6, 19), new ECB_1.default(2, 20)), new ECBlocks_1.default(28, new ECB_1.default(6, 15), new ECB_1.default(2, 16))), new Version(11, Int32Array.from([6, 30, 54]), new ECBlocks_1.default(20, new ECB_1.default(4, 81)), new ECBlocks_1.default(30, new ECB_1.default(1, 50), new ECB_1.default(4, 51)), new ECBlocks_1.default(28, new ECB_1.default(4, 22), new ECB_1.default(4, 23)), new ECBlocks_1.default(24, new ECB_1.default(3, 12), new ECB_1.default(8, 13))), new Version(12, Int32Array.from([6, 32, 58]), new ECBlocks_1.default(24, new ECB_1.default(2, 92), new ECB_1.default(2, 93)), new ECBlocks_1.default(22, new ECB_1.default(6, 36), new ECB_1.default(2, 37)), new ECBlocks_1.default(26, new ECB_1.default(4, 20), new ECB_1.default(6, 21)), new ECBlocks_1.default(28, new ECB_1.default(7, 14), new ECB_1.default(4, 15))), new Version(13, Int32Array.from([6, 34, 62]), new ECBlocks_1.default(26, new ECB_1.default(4, 107)), new ECBlocks_1.default(22, new ECB_1.default(8, 37), new ECB_1.default(1, 38)), new ECBlocks_1.default(24, new ECB_1.default(8, 20), new ECB_1.default(4, 21)), new ECBlocks_1.default(22, new ECB_1.default(12, 11), new ECB_1.default(4, 12))), new Version(14, Int32Array.from([6, 26, 46, 66]), new ECBlocks_1.default(30, new ECB_1.default(3, 115), new ECB_1.default(1, 116)), new ECBlocks_1.default(24, new ECB_1.default(4, 40), new ECB_1.default(5, 41)), new ECBlocks_1.default(20, new ECB_1.default(11, 16), new ECB_1.default(5, 17)), new ECBlocks_1.default(24, new ECB_1.default(11, 12), new ECB_1.default(5, 13))), new Version(15, Int32Array.from([6, 26, 48, 70]), new ECBlocks_1.default(22, new ECB_1.default(5, 87), new ECB_1.default(1, 88)), new ECBlocks_1.default(24, new ECB_1.default(5, 41), new ECB_1.default(5, 42)), new ECBlocks_1.default(30, new ECB_1.default(5, 24), new ECB_1.default(7, 25)), new ECBlocks_1.default(24, new ECB_1.default(11, 12), new ECB_1.default(7, 13))), new Version(16, Int32Array.from([6, 26, 50, 74]), new ECBlocks_1.default(24, new ECB_1.default(5, 98), new ECB_1.default(1, 99)), new ECBlocks_1.default(28, new ECB_1.default(7, 45), new ECB_1.default(3, 46)), new ECBlocks_1.default(24, new ECB_1.default(15, 19), new ECB_1.default(2, 20)), new ECBlocks_1.default(30, new ECB_1.default(3, 15), new ECB_1.default(13, 16))), new Version(17, Int32Array.from([6, 30, 54, 78]), new ECBlocks_1.default(28, new ECB_1.default(1, 107), new ECB_1.default(5, 108)), new ECBlocks_1.default(28, new ECB_1.default(10, 46), new ECB_1.default(1, 47)), new ECBlocks_1.default(28, new ECB_1.default(1, 22), new ECB_1.default(15, 23)), new ECBlocks_1.default(28, new ECB_1.default(2, 14), new ECB_1.default(17, 15))), new Version(18, Int32Array.from([6, 30, 56, 82]), new ECBlocks_1.default(30, new ECB_1.default(5, 120), new ECB_1.default(1, 121)), new ECBlocks_1.default(26, new ECB_1.default(9, 43), new ECB_1.default(4, 44)), new ECBlocks_1.default(28, new ECB_1.default(17, 22), new ECB_1.default(1, 23)), new ECBlocks_1.default(28, new ECB_1.default(2, 14), new ECB_1.default(19, 15))), new Version(19, Int32Array.from([6, 30, 58, 86]), new ECBlocks_1.default(28, new ECB_1.default(3, 113), new ECB_1.default(4, 114)), new ECBlocks_1.default(26, new ECB_1.default(3, 44), new ECB_1.default(11, 45)), new ECBlocks_1.default(26, new ECB_1.default(17, 21), new ECB_1.default(4, 22)), new ECBlocks_1.default(26, new ECB_1.default(9, 13), new ECB_1.default(16, 14))), new Version(20, Int32Array.from([6, 34, 62, 90]), new ECBlocks_1.default(28, new ECB_1.default(3, 107), new ECB_1.default(5, 108)), new ECBlocks_1.default(26, new ECB_1.default(3, 41), new ECB_1.default(13, 42)), new ECBlocks_1.default(30, new ECB_1.default(15, 24), new ECB_1.default(5, 25)), new ECBlocks_1.default(28, new ECB_1.default(15, 15), new ECB_1.default(10, 16))), new Version(21, Int32Array.from([6, 28, 50, 72, 94]), new ECBlocks_1.default(28, new ECB_1.default(4, 116), new ECB_1.default(4, 117)), new ECBlocks_1.default(26, new ECB_1.default(17, 42)), new ECBlocks_1.default(28, new ECB_1.default(17, 22), new ECB_1.default(6, 23)), new ECBlocks_1.default(30, new ECB_1.default(19, 16), new ECB_1.default(6, 17))), new Version(22, Int32Array.from([6, 26, 50, 74, 98]), new ECBlocks_1.default(28, new ECB_1.default(2, 111), new ECB_1.default(7, 112)), new ECBlocks_1.default(28, new ECB_1.default(17, 46)), new ECBlocks_1.default(30, new ECB_1.default(7, 24), new ECB_1.default(16, 25)), new ECBlocks_1.default(24, new ECB_1.default(34, 13))), new Version(23, Int32Array.from([6, 30, 54, 78, 102]), new ECBlocks_1.default(30, new ECB_1.default(4, 121), new ECB_1.default(5, 122)), new ECBlocks_1.default(28, new ECB_1.default(4, 47), new ECB_1.default(14, 48)), new ECBlocks_1.default(30, new ECB_1.default(11, 24), new ECB_1.default(14, 25)), new ECBlocks_1.default(30, new ECB_1.default(16, 15), new ECB_1.default(14, 16))), new Version(24, Int32Array.from([6, 28, 54, 80, 106]), new ECBlocks_1.default(30, new ECB_1.default(6, 117), new ECB_1.default(4, 118)), new ECBlocks_1.default(28, new ECB_1.default(6, 45), new ECB_1.default(14, 46)), new ECBlocks_1.default(30, new ECB_1.default(11, 24), new ECB_1.default(16, 25)), new ECBlocks_1.default(30, new ECB_1.default(30, 16), new ECB_1.default(2, 17))), new Version(25, Int32Array.from([6, 32, 58, 84, 110]), new ECBlocks_1.default(26, new ECB_1.default(8, 106), new ECB_1.default(4, 107)), new ECBlocks_1.default(28, new ECB_1.default(8, 47), new ECB_1.default(13, 48)), new ECBlocks_1.default(30, new ECB_1.default(7, 24), new ECB_1.default(22, 25)), new ECBlocks_1.default(30, new ECB_1.default(22, 15), new ECB_1.default(13, 16))), new Version(26, Int32Array.from([6, 30, 58, 86, 114]), new ECBlocks_1.default(28, new ECB_1.default(10, 114), new ECB_1.default(2, 115)), new ECBlocks_1.default(28, new ECB_1.default(19, 46), new ECB_1.default(4, 47)), new ECBlocks_1.default(28, new ECB_1.default(28, 22), new ECB_1.default(6, 23)), new ECBlocks_1.default(30, new ECB_1.default(33, 16), new ECB_1.default(4, 17))), new Version(27, Int32Array.from([6, 34, 62, 90, 118]), new ECBlocks_1.default(30, new ECB_1.default(8, 122), new ECB_1.default(4, 123)), new ECBlocks_1.default(28, new ECB_1.default(22, 45), new ECB_1.default(3, 46)), new ECBlocks_1.default(30, new ECB_1.default(8, 23), new ECB_1.default(26, 24)), new ECBlocks_1.default(30, new ECB_1.default(12, 15), new ECB_1.default(28, 16))), new Version(28, Int32Array.from([6, 26, 50, 74, 98, 122]), new ECBlocks_1.default(30, new ECB_1.default(3, 117), new ECB_1.default(10, 118)), new ECBlocks_1.default(28, new ECB_1.default(3, 45), new ECB_1.default(23, 46)), new ECBlocks_1.default(30, new ECB_1.default(4, 24), new ECB_1.default(31, 25)), new ECBlocks_1.default(30, new ECB_1.default(11, 15), new ECB_1.default(31, 16))), new Version(29, Int32Array.from([6, 30, 54, 78, 102, 126]), new ECBlocks_1.default(30, new ECB_1.default(7, 116), new ECB_1.default(7, 117)), new ECBlocks_1.default(28, new ECB_1.default(21, 45), new ECB_1.default(7, 46)), new ECBlocks_1.default(30, new ECB_1.default(1, 23), new ECB_1.default(37, 24)), new ECBlocks_1.default(30, new ECB_1.default(19, 15), new ECB_1.default(26, 16))), new Version(30, Int32Array.from([6, 26, 52, 78, 104, 130]), new ECBlocks_1.default(30, new ECB_1.default(5, 115), new ECB_1.default(10, 116)), new ECBlocks_1.default(28, new ECB_1.default(19, 47), new ECB_1.default(10, 48)), new ECBlocks_1.default(30, new ECB_1.default(15, 24), new ECB_1.default(25, 25)), new ECBlocks_1.default(30, new ECB_1.default(23, 15), new ECB_1.default(25, 16))), new Version(31, Int32Array.from([6, 30, 56, 82, 108, 134]), new ECBlocks_1.default(30, new ECB_1.default(13, 115), new ECB_1.default(3, 116)), new ECBlocks_1.default(28, new ECB_1.default(2, 46), new ECB_1.default(29, 47)), new ECBlocks_1.default(30, new ECB_1.default(42, 24), new ECB_1.default(1, 25)), new ECBlocks_1.default(30, new ECB_1.default(23, 15), new ECB_1.default(28, 16))), new Version(32, Int32Array.from([6, 34, 60, 86, 112, 138]), new ECBlocks_1.default(30, new ECB_1.default(17, 115)), new ECBlocks_1.default(28, new ECB_1.default(10, 46), new ECB_1.default(23, 47)), new ECBlocks_1.default(30, new ECB_1.default(10, 24), new ECB_1.default(35, 25)), new ECBlocks_1.default(30, new ECB_1.default(19, 15), new ECB_1.default(35, 16))), new Version(33, Int32Array.from([6, 30, 58, 86, 114, 142]), new ECBlocks_1.default(30, new ECB_1.default(17, 115), new ECB_1.default(1, 116)), new ECBlocks_1.default(28, new ECB_1.default(14, 46), new ECB_1.default(21, 47)), new ECBlocks_1.default(30, new ECB_1.default(29, 24), new ECB_1.default(19, 25)), new ECBlocks_1.default(30, new ECB_1.default(11, 15), new ECB_1.default(46, 16))), new Version(34, Int32Array.from([6, 34, 62, 90, 118, 146]), new ECBlocks_1.default(30, new ECB_1.default(13, 115), new ECB_1.default(6, 116)), new ECBlocks_1.default(28, new ECB_1.default(14, 46), new ECB_1.default(23, 47)), new ECBlocks_1.default(30, new ECB_1.default(44, 24), new ECB_1.default(7, 25)), new ECBlocks_1.default(30, new ECB_1.default(59, 16), new ECB_1.default(1, 17))), new Version(35, Int32Array.from([6, 30, 54, 78, 102, 126, 150]), new ECBlocks_1.default(30, new ECB_1.default(12, 121), new ECB_1.default(7, 122)), new ECBlocks_1.default(28, new ECB_1.default(12, 47), new ECB_1.default(26, 48)), new ECBlocks_1.default(30, new ECB_1.default(39, 24), new ECB_1.default(14, 25)), new ECBlocks_1.default(30, new ECB_1.default(22, 15), new ECB_1.default(41, 16))), new Version(36, Int32Array.from([6, 24, 50, 76, 102, 128, 154]), new ECBlocks_1.default(30, new ECB_1.default(6, 121), new ECB_1.default(14, 122)), new ECBlocks_1.default(28, new ECB_1.default(6, 47), new ECB_1.default(34, 48)), new ECBlocks_1.default(30, new ECB_1.default(46, 24), new ECB_1.default(10, 25)), new ECBlocks_1.default(30, new ECB_1.default(2, 15), new ECB_1.default(64, 16))), new Version(37, Int32Array.from([6, 28, 54, 80, 106, 132, 158]), new ECBlocks_1.default(30, new ECB_1.default(17, 122), new ECB_1.default(4, 123)), new ECBlocks_1.default(28, new ECB_1.default(29, 46), new ECB_1.default(14, 47)), new ECBlocks_1.default(30, new ECB_1.default(49, 24), new ECB_1.default(10, 25)), new ECBlocks_1.default(30, new ECB_1.default(24, 15), new ECB_1.default(46, 16))), new Version(38, Int32Array.from([6, 32, 58, 84, 110, 136, 162]), new ECBlocks_1.default(30, new ECB_1.default(4, 122), new ECB_1.default(18, 123)), new ECBlocks_1.default(28, new ECB_1.default(13, 46), new ECB_1.default(32, 47)), new ECBlocks_1.default(30, new ECB_1.default(48, 24), new ECB_1.default(14, 25)), new ECBlocks_1.default(30, new ECB_1.default(42, 15), new ECB_1.default(32, 16))), new Version(39, Int32Array.from([6, 26, 54, 82, 110, 138, 166]), new ECBlocks_1.default(30, new ECB_1.default(20, 117), new ECB_1.default(4, 118)), new ECBlocks_1.default(28, new ECB_1.default(40, 47), new ECB_1.default(7, 48)), new ECBlocks_1.default(30, new ECB_1.default(43, 24), new ECB_1.default(22, 25)), new ECBlocks_1.default(30, new ECB_1.default(10, 15), new ECB_1.default(67, 16))), new Version(40, Int32Array.from([6, 30, 58, 86, 114, 142, 170]), new ECBlocks_1.default(30, new ECB_1.default(19, 118), new ECB_1.default(6, 119)), new ECBlocks_1.default(28, new ECB_1.default(18, 47), new ECB_1.default(31, 48)), new ECBlocks_1.default(30, new ECB_1.default(34, 24), new ECB_1.default(34, 25)), new ECBlocks_1.default(30, new ECB_1.default(20, 15), new ECB_1.default(61, 16)))];\n  return Version;\n}();\n\nexports.default = Version;","map":{"version":3,"sources":["../../../../src/core/qrcode/decoder/Version.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/*\n * Copyright 2007 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __values = (this && this.__values) || function (o) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\n    if (m) return m.call(o);\n    return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/*namespace com.google.zxing.qrcode.decoder {*/\nvar BitMatrix_1 = require(\"../../common/BitMatrix\");\nvar FormatInformation_1 = require(\"./FormatInformation\");\nvar ECBlocks_1 = require(\"./ECBlocks\");\nvar ECB_1 = require(\"./ECB\");\nvar FormatException_1 = require(\"../../FormatException\");\nvar IllegalArgumentException_1 = require(\"../../IllegalArgumentException\");\n/**\n * See ISO 18004:2006 Annex D\n *\n * @author Sean Owen\n */\nvar Version = /** @class */ (function () {\n    function Version(versionNumber /*int*/, alignmentPatternCenters) {\n        var e_1, _a;\n        var ecBlocks = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            ecBlocks[_i - 2] = arguments[_i];\n        }\n        this.versionNumber = versionNumber;\n        this.alignmentPatternCenters = alignmentPatternCenters;\n        this.ecBlocks = ecBlocks;\n        var total = 0;\n        var ecCodewords = ecBlocks[0].getECCodewordsPerBlock();\n        var ecbArray = ecBlocks[0].getECBlocks();\n        try {\n            for (var ecbArray_1 = __values(ecbArray), ecbArray_1_1 = ecbArray_1.next(); !ecbArray_1_1.done; ecbArray_1_1 = ecbArray_1.next()) {\n                var ecBlock = ecbArray_1_1.value;\n                total += ecBlock.getCount() * (ecBlock.getDataCodewords() + ecCodewords);\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (ecbArray_1_1 && !ecbArray_1_1.done && (_a = ecbArray_1.return)) _a.call(ecbArray_1);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        this.totalCodewords = total;\n    }\n    Version.prototype.getVersionNumber = function () {\n        return this.versionNumber;\n    };\n    Version.prototype.getAlignmentPatternCenters = function () {\n        return this.alignmentPatternCenters;\n    };\n    Version.prototype.getTotalCodewords = function () {\n        return this.totalCodewords;\n    };\n    Version.prototype.getDimensionForVersion = function () {\n        return 17 + 4 * this.versionNumber;\n    };\n    Version.prototype.getECBlocksForLevel = function (ecLevel) {\n        return this.ecBlocks[ecLevel.getValue()];\n        // TYPESCRIPTPORT: original was using ordinal, and using the order of levels as defined in ErrorCorrectionLevel enum (LMQH)\n        // I will use the direct value from ErrorCorrectionLevelValues enum which in typescript goes to a number\n    };\n    /**\n     * <p>Deduces version information purely from QR Code dimensions.</p>\n     *\n     * @param dimension dimension in modules\n     * @return Version for a QR Code of that dimension\n     * @throws FormatException if dimension is not 1 mod 4\n     */\n    Version.getProvisionalVersionForDimension = function (dimension /*int*/) {\n        if (dimension % 4 !== 1) {\n            throw new FormatException_1.default();\n        }\n        try {\n            return this.getVersionForNumber((dimension - 17) / 4);\n        }\n        catch (ignored /*: IllegalArgumentException*/) {\n            throw new FormatException_1.default();\n        }\n    };\n    Version.getVersionForNumber = function (versionNumber /*int*/) {\n        if (versionNumber < 1 || versionNumber > 40) {\n            throw new IllegalArgumentException_1.default();\n        }\n        return Version.VERSIONS[versionNumber - 1];\n    };\n    Version.decodeVersionInformation = function (versionBits /*int*/) {\n        var bestDifference = Number.MAX_SAFE_INTEGER;\n        var bestVersion = 0;\n        for (var i = 0; i < Version.VERSION_DECODE_INFO.length; i++) {\n            var targetVersion = Version.VERSION_DECODE_INFO[i];\n            // Do the version info bits match exactly? done.\n            if (targetVersion === versionBits) {\n                return Version.getVersionForNumber(i + 7);\n            }\n            // Otherwise see if this is the closest to a real version info bit string\n            // we have seen so far\n            var bitsDifference = FormatInformation_1.default.numBitsDiffering(versionBits, targetVersion);\n            if (bitsDifference < bestDifference) {\n                bestVersion = i + 7;\n                bestDifference = bitsDifference;\n            }\n        }\n        // We can tolerate up to 3 bits of error since no two version info codewords will\n        // differ in less than 8 bits.\n        if (bestDifference <= 3) {\n            return Version.getVersionForNumber(bestVersion);\n        }\n        // If we didn't find a close enough match, fail\n        return null;\n    };\n    /**\n     * See ISO 18004:2006 Annex E\n     */\n    Version.prototype.buildFunctionPattern = function () {\n        var dimension = this.getDimensionForVersion();\n        var bitMatrix = new BitMatrix_1.default(dimension);\n        // Top left finder pattern + separator + format\n        bitMatrix.setRegion(0, 0, 9, 9);\n        // Top right finder pattern + separator + format\n        bitMatrix.setRegion(dimension - 8, 0, 8, 9);\n        // Bottom left finder pattern + separator + format\n        bitMatrix.setRegion(0, dimension - 8, 9, 8);\n        // Alignment patterns\n        var max = this.alignmentPatternCenters.length;\n        for (var x = 0; x < max; x++) {\n            var i = this.alignmentPatternCenters[x] - 2;\n            for (var y = 0; y < max; y++) {\n                if ((x === 0 && (y === 0 || y === max - 1)) || (x === max - 1 && y === 0)) {\n                    // No alignment patterns near the three finder patterns\n                    continue;\n                }\n                bitMatrix.setRegion(this.alignmentPatternCenters[y] - 2, i, 5, 5);\n            }\n        }\n        // Vertical timing pattern\n        bitMatrix.setRegion(6, 9, 1, dimension - 17);\n        // Horizontal timing pattern\n        bitMatrix.setRegion(9, 6, dimension - 17, 1);\n        if (this.versionNumber > 6) {\n            // Version info, top right\n            bitMatrix.setRegion(dimension - 11, 0, 3, 6);\n            // Version info, bottom left\n            bitMatrix.setRegion(0, dimension - 11, 6, 3);\n        }\n        return bitMatrix;\n    };\n    /*@Override*/\n    Version.prototype.toString = function () {\n        return '' + this.versionNumber;\n    };\n    /**\n       * See ISO 18004:2006 Annex D.\n       * Element i represents the raw version bits that specify version i + 7\n       */\n    Version.VERSION_DECODE_INFO = Int32Array.from([\n        0x07C94, 0x085BC, 0x09A99, 0x0A4D3, 0x0BBF6,\n        0x0C762, 0x0D847, 0x0E60D, 0x0F928, 0x10B78,\n        0x1145D, 0x12A17, 0x13532, 0x149A6, 0x15683,\n        0x168C9, 0x177EC, 0x18EC4, 0x191E1, 0x1AFAB,\n        0x1B08E, 0x1CC1A, 0x1D33F, 0x1ED75, 0x1F250,\n        0x209D5, 0x216F0, 0x228BA, 0x2379F, 0x24B0B,\n        0x2542E, 0x26A64, 0x27541, 0x28C69\n    ]);\n    /**\n       * See ISO 18004:2006 6.5.1 Table 9\n       */\n    Version.VERSIONS = [\n        new Version(1, new Int32Array(0), new ECBlocks_1.default(7, new ECB_1.default(1, 19)), new ECBlocks_1.default(10, new ECB_1.default(1, 16)), new ECBlocks_1.default(13, new ECB_1.default(1, 13)), new ECBlocks_1.default(17, new ECB_1.default(1, 9))),\n        new Version(2, Int32Array.from([6, 18]), new ECBlocks_1.default(10, new ECB_1.default(1, 34)), new ECBlocks_1.default(16, new ECB_1.default(1, 28)), new ECBlocks_1.default(22, new ECB_1.default(1, 22)), new ECBlocks_1.default(28, new ECB_1.default(1, 16))),\n        new Version(3, Int32Array.from([6, 22]), new ECBlocks_1.default(15, new ECB_1.default(1, 55)), new ECBlocks_1.default(26, new ECB_1.default(1, 44)), new ECBlocks_1.default(18, new ECB_1.default(2, 17)), new ECBlocks_1.default(22, new ECB_1.default(2, 13))),\n        new Version(4, Int32Array.from([6, 26]), new ECBlocks_1.default(20, new ECB_1.default(1, 80)), new ECBlocks_1.default(18, new ECB_1.default(2, 32)), new ECBlocks_1.default(26, new ECB_1.default(2, 24)), new ECBlocks_1.default(16, new ECB_1.default(4, 9))),\n        new Version(5, Int32Array.from([6, 30]), new ECBlocks_1.default(26, new ECB_1.default(1, 108)), new ECBlocks_1.default(24, new ECB_1.default(2, 43)), new ECBlocks_1.default(18, new ECB_1.default(2, 15), new ECB_1.default(2, 16)), new ECBlocks_1.default(22, new ECB_1.default(2, 11), new ECB_1.default(2, 12))),\n        new Version(6, Int32Array.from([6, 34]), new ECBlocks_1.default(18, new ECB_1.default(2, 68)), new ECBlocks_1.default(16, new ECB_1.default(4, 27)), new ECBlocks_1.default(24, new ECB_1.default(4, 19)), new ECBlocks_1.default(28, new ECB_1.default(4, 15))),\n        new Version(7, Int32Array.from([6, 22, 38]), new ECBlocks_1.default(20, new ECB_1.default(2, 78)), new ECBlocks_1.default(18, new ECB_1.default(4, 31)), new ECBlocks_1.default(18, new ECB_1.default(2, 14), new ECB_1.default(4, 15)), new ECBlocks_1.default(26, new ECB_1.default(4, 13), new ECB_1.default(1, 14))),\n        new Version(8, Int32Array.from([6, 24, 42]), new ECBlocks_1.default(24, new ECB_1.default(2, 97)), new ECBlocks_1.default(22, new ECB_1.default(2, 38), new ECB_1.default(2, 39)), new ECBlocks_1.default(22, new ECB_1.default(4, 18), new ECB_1.default(2, 19)), new ECBlocks_1.default(26, new ECB_1.default(4, 14), new ECB_1.default(2, 15))),\n        new Version(9, Int32Array.from([6, 26, 46]), new ECBlocks_1.default(30, new ECB_1.default(2, 116)), new ECBlocks_1.default(22, new ECB_1.default(3, 36), new ECB_1.default(2, 37)), new ECBlocks_1.default(20, new ECB_1.default(4, 16), new ECB_1.default(4, 17)), new ECBlocks_1.default(24, new ECB_1.default(4, 12), new ECB_1.default(4, 13))),\n        new Version(10, Int32Array.from([6, 28, 50]), new ECBlocks_1.default(18, new ECB_1.default(2, 68), new ECB_1.default(2, 69)), new ECBlocks_1.default(26, new ECB_1.default(4, 43), new ECB_1.default(1, 44)), new ECBlocks_1.default(24, new ECB_1.default(6, 19), new ECB_1.default(2, 20)), new ECBlocks_1.default(28, new ECB_1.default(6, 15), new ECB_1.default(2, 16))),\n        new Version(11, Int32Array.from([6, 30, 54]), new ECBlocks_1.default(20, new ECB_1.default(4, 81)), new ECBlocks_1.default(30, new ECB_1.default(1, 50), new ECB_1.default(4, 51)), new ECBlocks_1.default(28, new ECB_1.default(4, 22), new ECB_1.default(4, 23)), new ECBlocks_1.default(24, new ECB_1.default(3, 12), new ECB_1.default(8, 13))),\n        new Version(12, Int32Array.from([6, 32, 58]), new ECBlocks_1.default(24, new ECB_1.default(2, 92), new ECB_1.default(2, 93)), new ECBlocks_1.default(22, new ECB_1.default(6, 36), new ECB_1.default(2, 37)), new ECBlocks_1.default(26, new ECB_1.default(4, 20), new ECB_1.default(6, 21)), new ECBlocks_1.default(28, new ECB_1.default(7, 14), new ECB_1.default(4, 15))),\n        new Version(13, Int32Array.from([6, 34, 62]), new ECBlocks_1.default(26, new ECB_1.default(4, 107)), new ECBlocks_1.default(22, new ECB_1.default(8, 37), new ECB_1.default(1, 38)), new ECBlocks_1.default(24, new ECB_1.default(8, 20), new ECB_1.default(4, 21)), new ECBlocks_1.default(22, new ECB_1.default(12, 11), new ECB_1.default(4, 12))),\n        new Version(14, Int32Array.from([6, 26, 46, 66]), new ECBlocks_1.default(30, new ECB_1.default(3, 115), new ECB_1.default(1, 116)), new ECBlocks_1.default(24, new ECB_1.default(4, 40), new ECB_1.default(5, 41)), new ECBlocks_1.default(20, new ECB_1.default(11, 16), new ECB_1.default(5, 17)), new ECBlocks_1.default(24, new ECB_1.default(11, 12), new ECB_1.default(5, 13))),\n        new Version(15, Int32Array.from([6, 26, 48, 70]), new ECBlocks_1.default(22, new ECB_1.default(5, 87), new ECB_1.default(1, 88)), new ECBlocks_1.default(24, new ECB_1.default(5, 41), new ECB_1.default(5, 42)), new ECBlocks_1.default(30, new ECB_1.default(5, 24), new ECB_1.default(7, 25)), new ECBlocks_1.default(24, new ECB_1.default(11, 12), new ECB_1.default(7, 13))),\n        new Version(16, Int32Array.from([6, 26, 50, 74]), new ECBlocks_1.default(24, new ECB_1.default(5, 98), new ECB_1.default(1, 99)), new ECBlocks_1.default(28, new ECB_1.default(7, 45), new ECB_1.default(3, 46)), new ECBlocks_1.default(24, new ECB_1.default(15, 19), new ECB_1.default(2, 20)), new ECBlocks_1.default(30, new ECB_1.default(3, 15), new ECB_1.default(13, 16))),\n        new Version(17, Int32Array.from([6, 30, 54, 78]), new ECBlocks_1.default(28, new ECB_1.default(1, 107), new ECB_1.default(5, 108)), new ECBlocks_1.default(28, new ECB_1.default(10, 46), new ECB_1.default(1, 47)), new ECBlocks_1.default(28, new ECB_1.default(1, 22), new ECB_1.default(15, 23)), new ECBlocks_1.default(28, new ECB_1.default(2, 14), new ECB_1.default(17, 15))),\n        new Version(18, Int32Array.from([6, 30, 56, 82]), new ECBlocks_1.default(30, new ECB_1.default(5, 120), new ECB_1.default(1, 121)), new ECBlocks_1.default(26, new ECB_1.default(9, 43), new ECB_1.default(4, 44)), new ECBlocks_1.default(28, new ECB_1.default(17, 22), new ECB_1.default(1, 23)), new ECBlocks_1.default(28, new ECB_1.default(2, 14), new ECB_1.default(19, 15))),\n        new Version(19, Int32Array.from([6, 30, 58, 86]), new ECBlocks_1.default(28, new ECB_1.default(3, 113), new ECB_1.default(4, 114)), new ECBlocks_1.default(26, new ECB_1.default(3, 44), new ECB_1.default(11, 45)), new ECBlocks_1.default(26, new ECB_1.default(17, 21), new ECB_1.default(4, 22)), new ECBlocks_1.default(26, new ECB_1.default(9, 13), new ECB_1.default(16, 14))),\n        new Version(20, Int32Array.from([6, 34, 62, 90]), new ECBlocks_1.default(28, new ECB_1.default(3, 107), new ECB_1.default(5, 108)), new ECBlocks_1.default(26, new ECB_1.default(3, 41), new ECB_1.default(13, 42)), new ECBlocks_1.default(30, new ECB_1.default(15, 24), new ECB_1.default(5, 25)), new ECBlocks_1.default(28, new ECB_1.default(15, 15), new ECB_1.default(10, 16))),\n        new Version(21, Int32Array.from([6, 28, 50, 72, 94]), new ECBlocks_1.default(28, new ECB_1.default(4, 116), new ECB_1.default(4, 117)), new ECBlocks_1.default(26, new ECB_1.default(17, 42)), new ECBlocks_1.default(28, new ECB_1.default(17, 22), new ECB_1.default(6, 23)), new ECBlocks_1.default(30, new ECB_1.default(19, 16), new ECB_1.default(6, 17))),\n        new Version(22, Int32Array.from([6, 26, 50, 74, 98]), new ECBlocks_1.default(28, new ECB_1.default(2, 111), new ECB_1.default(7, 112)), new ECBlocks_1.default(28, new ECB_1.default(17, 46)), new ECBlocks_1.default(30, new ECB_1.default(7, 24), new ECB_1.default(16, 25)), new ECBlocks_1.default(24, new ECB_1.default(34, 13))),\n        new Version(23, Int32Array.from([6, 30, 54, 78, 102]), new ECBlocks_1.default(30, new ECB_1.default(4, 121), new ECB_1.default(5, 122)), new ECBlocks_1.default(28, new ECB_1.default(4, 47), new ECB_1.default(14, 48)), new ECBlocks_1.default(30, new ECB_1.default(11, 24), new ECB_1.default(14, 25)), new ECBlocks_1.default(30, new ECB_1.default(16, 15), new ECB_1.default(14, 16))),\n        new Version(24, Int32Array.from([6, 28, 54, 80, 106]), new ECBlocks_1.default(30, new ECB_1.default(6, 117), new ECB_1.default(4, 118)), new ECBlocks_1.default(28, new ECB_1.default(6, 45), new ECB_1.default(14, 46)), new ECBlocks_1.default(30, new ECB_1.default(11, 24), new ECB_1.default(16, 25)), new ECBlocks_1.default(30, new ECB_1.default(30, 16), new ECB_1.default(2, 17))),\n        new Version(25, Int32Array.from([6, 32, 58, 84, 110]), new ECBlocks_1.default(26, new ECB_1.default(8, 106), new ECB_1.default(4, 107)), new ECBlocks_1.default(28, new ECB_1.default(8, 47), new ECB_1.default(13, 48)), new ECBlocks_1.default(30, new ECB_1.default(7, 24), new ECB_1.default(22, 25)), new ECBlocks_1.default(30, new ECB_1.default(22, 15), new ECB_1.default(13, 16))),\n        new Version(26, Int32Array.from([6, 30, 58, 86, 114]), new ECBlocks_1.default(28, new ECB_1.default(10, 114), new ECB_1.default(2, 115)), new ECBlocks_1.default(28, new ECB_1.default(19, 46), new ECB_1.default(4, 47)), new ECBlocks_1.default(28, new ECB_1.default(28, 22), new ECB_1.default(6, 23)), new ECBlocks_1.default(30, new ECB_1.default(33, 16), new ECB_1.default(4, 17))),\n        new Version(27, Int32Array.from([6, 34, 62, 90, 118]), new ECBlocks_1.default(30, new ECB_1.default(8, 122), new ECB_1.default(4, 123)), new ECBlocks_1.default(28, new ECB_1.default(22, 45), new ECB_1.default(3, 46)), new ECBlocks_1.default(30, new ECB_1.default(8, 23), new ECB_1.default(26, 24)), new ECBlocks_1.default(30, new ECB_1.default(12, 15), new ECB_1.default(28, 16))),\n        new Version(28, Int32Array.from([6, 26, 50, 74, 98, 122]), new ECBlocks_1.default(30, new ECB_1.default(3, 117), new ECB_1.default(10, 118)), new ECBlocks_1.default(28, new ECB_1.default(3, 45), new ECB_1.default(23, 46)), new ECBlocks_1.default(30, new ECB_1.default(4, 24), new ECB_1.default(31, 25)), new ECBlocks_1.default(30, new ECB_1.default(11, 15), new ECB_1.default(31, 16))),\n        new Version(29, Int32Array.from([6, 30, 54, 78, 102, 126]), new ECBlocks_1.default(30, new ECB_1.default(7, 116), new ECB_1.default(7, 117)), new ECBlocks_1.default(28, new ECB_1.default(21, 45), new ECB_1.default(7, 46)), new ECBlocks_1.default(30, new ECB_1.default(1, 23), new ECB_1.default(37, 24)), new ECBlocks_1.default(30, new ECB_1.default(19, 15), new ECB_1.default(26, 16))),\n        new Version(30, Int32Array.from([6, 26, 52, 78, 104, 130]), new ECBlocks_1.default(30, new ECB_1.default(5, 115), new ECB_1.default(10, 116)), new ECBlocks_1.default(28, new ECB_1.default(19, 47), new ECB_1.default(10, 48)), new ECBlocks_1.default(30, new ECB_1.default(15, 24), new ECB_1.default(25, 25)), new ECBlocks_1.default(30, new ECB_1.default(23, 15), new ECB_1.default(25, 16))),\n        new Version(31, Int32Array.from([6, 30, 56, 82, 108, 134]), new ECBlocks_1.default(30, new ECB_1.default(13, 115), new ECB_1.default(3, 116)), new ECBlocks_1.default(28, new ECB_1.default(2, 46), new ECB_1.default(29, 47)), new ECBlocks_1.default(30, new ECB_1.default(42, 24), new ECB_1.default(1, 25)), new ECBlocks_1.default(30, new ECB_1.default(23, 15), new ECB_1.default(28, 16))),\n        new Version(32, Int32Array.from([6, 34, 60, 86, 112, 138]), new ECBlocks_1.default(30, new ECB_1.default(17, 115)), new ECBlocks_1.default(28, new ECB_1.default(10, 46), new ECB_1.default(23, 47)), new ECBlocks_1.default(30, new ECB_1.default(10, 24), new ECB_1.default(35, 25)), new ECBlocks_1.default(30, new ECB_1.default(19, 15), new ECB_1.default(35, 16))),\n        new Version(33, Int32Array.from([6, 30, 58, 86, 114, 142]), new ECBlocks_1.default(30, new ECB_1.default(17, 115), new ECB_1.default(1, 116)), new ECBlocks_1.default(28, new ECB_1.default(14, 46), new ECB_1.default(21, 47)), new ECBlocks_1.default(30, new ECB_1.default(29, 24), new ECB_1.default(19, 25)), new ECBlocks_1.default(30, new ECB_1.default(11, 15), new ECB_1.default(46, 16))),\n        new Version(34, Int32Array.from([6, 34, 62, 90, 118, 146]), new ECBlocks_1.default(30, new ECB_1.default(13, 115), new ECB_1.default(6, 116)), new ECBlocks_1.default(28, new ECB_1.default(14, 46), new ECB_1.default(23, 47)), new ECBlocks_1.default(30, new ECB_1.default(44, 24), new ECB_1.default(7, 25)), new ECBlocks_1.default(30, new ECB_1.default(59, 16), new ECB_1.default(1, 17))),\n        new Version(35, Int32Array.from([6, 30, 54, 78, 102, 126, 150]), new ECBlocks_1.default(30, new ECB_1.default(12, 121), new ECB_1.default(7, 122)), new ECBlocks_1.default(28, new ECB_1.default(12, 47), new ECB_1.default(26, 48)), new ECBlocks_1.default(30, new ECB_1.default(39, 24), new ECB_1.default(14, 25)), new ECBlocks_1.default(30, new ECB_1.default(22, 15), new ECB_1.default(41, 16))),\n        new Version(36, Int32Array.from([6, 24, 50, 76, 102, 128, 154]), new ECBlocks_1.default(30, new ECB_1.default(6, 121), new ECB_1.default(14, 122)), new ECBlocks_1.default(28, new ECB_1.default(6, 47), new ECB_1.default(34, 48)), new ECBlocks_1.default(30, new ECB_1.default(46, 24), new ECB_1.default(10, 25)), new ECBlocks_1.default(30, new ECB_1.default(2, 15), new ECB_1.default(64, 16))),\n        new Version(37, Int32Array.from([6, 28, 54, 80, 106, 132, 158]), new ECBlocks_1.default(30, new ECB_1.default(17, 122), new ECB_1.default(4, 123)), new ECBlocks_1.default(28, new ECB_1.default(29, 46), new ECB_1.default(14, 47)), new ECBlocks_1.default(30, new ECB_1.default(49, 24), new ECB_1.default(10, 25)), new ECBlocks_1.default(30, new ECB_1.default(24, 15), new ECB_1.default(46, 16))),\n        new Version(38, Int32Array.from([6, 32, 58, 84, 110, 136, 162]), new ECBlocks_1.default(30, new ECB_1.default(4, 122), new ECB_1.default(18, 123)), new ECBlocks_1.default(28, new ECB_1.default(13, 46), new ECB_1.default(32, 47)), new ECBlocks_1.default(30, new ECB_1.default(48, 24), new ECB_1.default(14, 25)), new ECBlocks_1.default(30, new ECB_1.default(42, 15), new ECB_1.default(32, 16))),\n        new Version(39, Int32Array.from([6, 26, 54, 82, 110, 138, 166]), new ECBlocks_1.default(30, new ECB_1.default(20, 117), new ECB_1.default(4, 118)), new ECBlocks_1.default(28, new ECB_1.default(40, 47), new ECB_1.default(7, 48)), new ECBlocks_1.default(30, new ECB_1.default(43, 24), new ECB_1.default(22, 25)), new ECBlocks_1.default(30, new ECB_1.default(10, 15), new ECB_1.default(67, 16))),\n        new Version(40, Int32Array.from([6, 30, 58, 86, 114, 142, 170]), new ECBlocks_1.default(30, new ECB_1.default(19, 118), new ECB_1.default(6, 119)), new ECBlocks_1.default(28, new ECB_1.default(18, 47), new ECB_1.default(31, 48)), new ECBlocks_1.default(30, new ECB_1.default(34, 24), new ECB_1.default(34, 25)), new ECBlocks_1.default(30, new ECB_1.default(20, 15), new ECB_1.default(61, 16)))\n    ];\n    return Version;\n}());\nexports.default = Version;\n//# sourceMappingURL=Version.js.map"]},"metadata":{},"sourceType":"script"}