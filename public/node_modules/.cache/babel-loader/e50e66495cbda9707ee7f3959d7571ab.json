{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2007 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*namespace com.google.zxing.common.reedsolomon {*/\n\nvar GenericGFPoly_1 = require(\"./GenericGFPoly\");\n\nvar AbstractGenericGF_1 = require(\"./AbstractGenericGF\");\n\nvar Integer_1 = require(\"../../util/Integer\");\n\nvar IllegalArgumentException_1 = require(\"../../IllegalArgumentException\");\n\nvar ArithmeticException_1 = require(\"../../ArithmeticException\");\n/**\n * <p>This class contains utility methods for performing mathematical operations over\n * the Galois Fields. Operations use a given primitive polynomial in calculations.</p>\n *\n * <p>Throughout this package, elements of the GF are represented as an {@code int}\n * for convenience and speed (but at the cost of memory).\n * </p>\n *\n * @author Sean Owen\n * @author David Olivier\n */\n\n\nvar GenericGF =\n/** @class */\nfunction (_super) {\n  __extends(GenericGF, _super);\n  /**\n   * Create a representation of GF(size) using the given primitive polynomial.\n   *\n   * @param primitive irreducible polynomial whose coefficients are represented by\n   *  the bits of an int, where the least-significant bit represents the constant\n   *  coefficient\n   * @param size the size of the field\n   * @param b the factor b in the generator polynomial can be 0- or 1-based\n   *  (g(x) = (x+a^b)(x+a^(b+1))...(x+a^(b+2t-1))).\n   *  In most cases it should be 1, but for QR code it is 0.\n   */\n\n\n  function GenericGF(primitive\n  /*int*/\n  , size\n  /*int*/\n  , generatorBase\n  /*int*/\n  ) {\n    var _this = _super.call(this) || this;\n\n    _this.primitive = primitive;\n    _this.size = size;\n    _this.generatorBase = generatorBase;\n    var expTable = new Int32Array(size);\n    var x = 1;\n\n    for (var i = 0; i < size; i++) {\n      expTable[i] = x;\n      x *= 2; // we're assuming the generator alpha is 2\n\n      if (x >= size) {\n        x ^= primitive;\n        x &= size - 1;\n      }\n    }\n\n    _this.expTable = expTable;\n    var logTable = new Int32Array(size);\n\n    for (var i = 0; i < size - 1; i++) {\n      logTable[expTable[i]] = i;\n    }\n\n    _this.logTable = logTable; // logTable[0] == 0 but this should never be used\n\n    _this.zero = new GenericGFPoly_1.default(_this, Int32Array.from([0]));\n    _this.one = new GenericGFPoly_1.default(_this, Int32Array.from([1]));\n    return _this;\n  }\n\n  GenericGF.prototype.getZero = function () {\n    return this.zero;\n  };\n\n  GenericGF.prototype.getOne = function () {\n    return this.one;\n  };\n  /**\n   * @return the monomial representing coefficient * x^degree\n   */\n\n\n  GenericGF.prototype.buildMonomial = function (degree\n  /*int*/\n  , coefficient\n  /*int*/\n  ) {\n    if (degree < 0) {\n      throw new IllegalArgumentException_1.default();\n    }\n\n    if (coefficient === 0) {\n      return this.zero;\n    }\n\n    var coefficients = new Int32Array(degree + 1);\n    coefficients[0] = coefficient;\n    return new GenericGFPoly_1.default(this, coefficients);\n  };\n  /**\n   * @return multiplicative inverse of a\n   */\n\n\n  GenericGF.prototype.inverse = function (a\n  /*int*/\n  ) {\n    if (a === 0) {\n      throw new ArithmeticException_1.default();\n    }\n\n    return this.expTable[this.size - this.logTable[a] - 1];\n  };\n  /**\n   * @return product of a and b in GF(size)\n   */\n\n\n  GenericGF.prototype.multiply = function (a\n  /*int*/\n  , b\n  /*int*/\n  ) {\n    if (a === 0 || b === 0) {\n      return 0;\n    }\n\n    return this.expTable[(this.logTable[a] + this.logTable[b]) % (this.size - 1)];\n  };\n\n  GenericGF.prototype.getSize = function () {\n    return this.size;\n  };\n\n  GenericGF.prototype.getGeneratorBase = function () {\n    return this.generatorBase;\n  };\n  /*@Override*/\n\n\n  GenericGF.prototype.toString = function () {\n    return 'GF(0x' + Integer_1.default.toHexString(this.primitive) + ',' + this.size + ')';\n  };\n\n  GenericGF.prototype.equals = function (o) {\n    return o === this;\n  };\n\n  GenericGF.AZTEC_DATA_12 = new GenericGF(0x1069, 4096, 1); // x^12 + x^6 + x^5 + x^3 + 1\n\n  GenericGF.AZTEC_DATA_10 = new GenericGF(0x409, 1024, 1); // x^10 + x^3 + 1\n\n  GenericGF.AZTEC_DATA_6 = new GenericGF(0x43, 64, 1); // x^6 + x + 1\n\n  GenericGF.AZTEC_PARAM = new GenericGF(0x13, 16, 1); // x^4 + x + 1\n\n  GenericGF.QR_CODE_FIELD_256 = new GenericGF(0x011d, 256, 0); // x^8 + x^4 + x^3 + x^2 + 1\n\n  GenericGF.DATA_MATRIX_FIELD_256 = new GenericGF(0x012d, 256, 1); // x^8 + x^5 + x^3 + x^2 + 1\n\n  GenericGF.AZTEC_DATA_8 = GenericGF.DATA_MATRIX_FIELD_256;\n  GenericGF.MAXICODE_FIELD_64 = GenericGF.AZTEC_DATA_6;\n  return GenericGF;\n}(AbstractGenericGF_1.default);\n\nexports.default = GenericGF;","map":{"version":3,"sources":["../../../../src/core/common/reedsolomon/GenericGF.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/*\n * Copyright 2007 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/*namespace com.google.zxing.common.reedsolomon {*/\nvar GenericGFPoly_1 = require(\"./GenericGFPoly\");\nvar AbstractGenericGF_1 = require(\"./AbstractGenericGF\");\nvar Integer_1 = require(\"../../util/Integer\");\nvar IllegalArgumentException_1 = require(\"../../IllegalArgumentException\");\nvar ArithmeticException_1 = require(\"../../ArithmeticException\");\n/**\n * <p>This class contains utility methods for performing mathematical operations over\n * the Galois Fields. Operations use a given primitive polynomial in calculations.</p>\n *\n * <p>Throughout this package, elements of the GF are represented as an {@code int}\n * for convenience and speed (but at the cost of memory).\n * </p>\n *\n * @author Sean Owen\n * @author David Olivier\n */\nvar GenericGF = /** @class */ (function (_super) {\n    __extends(GenericGF, _super);\n    /**\n     * Create a representation of GF(size) using the given primitive polynomial.\n     *\n     * @param primitive irreducible polynomial whose coefficients are represented by\n     *  the bits of an int, where the least-significant bit represents the constant\n     *  coefficient\n     * @param size the size of the field\n     * @param b the factor b in the generator polynomial can be 0- or 1-based\n     *  (g(x) = (x+a^b)(x+a^(b+1))...(x+a^(b+2t-1))).\n     *  In most cases it should be 1, but for QR code it is 0.\n     */\n    function GenericGF(primitive /*int*/, size /*int*/, generatorBase /*int*/) {\n        var _this = _super.call(this) || this;\n        _this.primitive = primitive;\n        _this.size = size;\n        _this.generatorBase = generatorBase;\n        var expTable = new Int32Array(size);\n        var x = 1;\n        for (var i = 0; i < size; i++) {\n            expTable[i] = x;\n            x *= 2; // we're assuming the generator alpha is 2\n            if (x >= size) {\n                x ^= primitive;\n                x &= size - 1;\n            }\n        }\n        _this.expTable = expTable;\n        var logTable = new Int32Array(size);\n        for (var i = 0; i < size - 1; i++) {\n            logTable[expTable[i]] = i;\n        }\n        _this.logTable = logTable;\n        // logTable[0] == 0 but this should never be used\n        _this.zero = new GenericGFPoly_1.default(_this, Int32Array.from([0]));\n        _this.one = new GenericGFPoly_1.default(_this, Int32Array.from([1]));\n        return _this;\n    }\n    GenericGF.prototype.getZero = function () {\n        return this.zero;\n    };\n    GenericGF.prototype.getOne = function () {\n        return this.one;\n    };\n    /**\n     * @return the monomial representing coefficient * x^degree\n     */\n    GenericGF.prototype.buildMonomial = function (degree /*int*/, coefficient /*int*/) {\n        if (degree < 0) {\n            throw new IllegalArgumentException_1.default();\n        }\n        if (coefficient === 0) {\n            return this.zero;\n        }\n        var coefficients = new Int32Array(degree + 1);\n        coefficients[0] = coefficient;\n        return new GenericGFPoly_1.default(this, coefficients);\n    };\n    /**\n     * @return multiplicative inverse of a\n     */\n    GenericGF.prototype.inverse = function (a /*int*/) {\n        if (a === 0) {\n            throw new ArithmeticException_1.default();\n        }\n        return this.expTable[this.size - this.logTable[a] - 1];\n    };\n    /**\n     * @return product of a and b in GF(size)\n     */\n    GenericGF.prototype.multiply = function (a /*int*/, b /*int*/) {\n        if (a === 0 || b === 0) {\n            return 0;\n        }\n        return this.expTable[(this.logTable[a] + this.logTable[b]) % (this.size - 1)];\n    };\n    GenericGF.prototype.getSize = function () {\n        return this.size;\n    };\n    GenericGF.prototype.getGeneratorBase = function () {\n        return this.generatorBase;\n    };\n    /*@Override*/\n    GenericGF.prototype.toString = function () {\n        return ('GF(0x' + Integer_1.default.toHexString(this.primitive) + ',' + this.size + ')');\n    };\n    GenericGF.prototype.equals = function (o) {\n        return o === this;\n    };\n    GenericGF.AZTEC_DATA_12 = new GenericGF(0x1069, 4096, 1); // x^12 + x^6 + x^5 + x^3 + 1\n    GenericGF.AZTEC_DATA_10 = new GenericGF(0x409, 1024, 1); // x^10 + x^3 + 1\n    GenericGF.AZTEC_DATA_6 = new GenericGF(0x43, 64, 1); // x^6 + x + 1\n    GenericGF.AZTEC_PARAM = new GenericGF(0x13, 16, 1); // x^4 + x + 1\n    GenericGF.QR_CODE_FIELD_256 = new GenericGF(0x011d, 256, 0); // x^8 + x^4 + x^3 + x^2 + 1\n    GenericGF.DATA_MATRIX_FIELD_256 = new GenericGF(0x012d, 256, 1); // x^8 + x^5 + x^3 + x^2 + 1\n    GenericGF.AZTEC_DATA_8 = GenericGF.DATA_MATRIX_FIELD_256;\n    GenericGF.MAXICODE_FIELD_64 = GenericGF.AZTEC_DATA_6;\n    return GenericGF;\n}(AbstractGenericGF_1.default));\nexports.default = GenericGF;\n//# sourceMappingURL=GenericGF.js.map"]},"metadata":{},"sourceType":"script"}