{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2007 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*namespace com.google.zxing.common {*/\n\n/**\n * <p>This class implements a perspective transform in two dimensions. Given four source and four\n * destination points, it will compute the transformation implied between them. The code is based\n * directly upon section 3.4.2 of George Wolberg's \"Digital Image Warping\"; see pages 54-56.</p>\n *\n * @author Sean Owen\n */\n\nvar PerspectiveTransform =\n/** @class */\nfunction () {\n  function PerspectiveTransform(a11\n  /*float*/\n  , a21\n  /*float*/\n  , a31\n  /*float*/\n  , a12\n  /*float*/\n  , a22\n  /*float*/\n  , a32\n  /*float*/\n  , a13\n  /*float*/\n  , a23\n  /*float*/\n  , a33\n  /*float*/\n  ) {\n    this.a11 = a11;\n    this.a21 = a21;\n    this.a31 = a31;\n    this.a12 = a12;\n    this.a22 = a22;\n    this.a32 = a32;\n    this.a13 = a13;\n    this.a23 = a23;\n    this.a33 = a33;\n  }\n\n  PerspectiveTransform.quadrilateralToQuadrilateral = function (x0\n  /*float*/\n  , y0\n  /*float*/\n  , x1\n  /*float*/\n  , y1\n  /*float*/\n  , x2\n  /*float*/\n  , y2\n  /*float*/\n  , x3\n  /*float*/\n  , y3\n  /*float*/\n  , x0p\n  /*float*/\n  , y0p\n  /*float*/\n  , x1p\n  /*float*/\n  , y1p\n  /*float*/\n  , x2p\n  /*float*/\n  , y2p\n  /*float*/\n  , x3p\n  /*float*/\n  , y3p\n  /*float*/\n  ) {\n    var qToS = PerspectiveTransform.quadrilateralToSquare(x0, y0, x1, y1, x2, y2, x3, y3);\n    var sToQ = PerspectiveTransform.squareToQuadrilateral(x0p, y0p, x1p, y1p, x2p, y2p, x3p, y3p);\n    return sToQ.times(qToS);\n  };\n\n  PerspectiveTransform.prototype.transformPoints = function (points) {\n    var max = points.length;\n    var a11 = this.a11;\n    var a12 = this.a12;\n    var a13 = this.a13;\n    var a21 = this.a21;\n    var a22 = this.a22;\n    var a23 = this.a23;\n    var a31 = this.a31;\n    var a32 = this.a32;\n    var a33 = this.a33;\n\n    for (var i = 0; i < max; i += 2) {\n      var x = points[i];\n      var y = points[i + 1];\n      var denominator = a13 * x + a23 * y + a33;\n      points[i] = (a11 * x + a21 * y + a31) / denominator;\n      points[i + 1] = (a12 * x + a22 * y + a32) / denominator;\n    }\n  };\n\n  PerspectiveTransform.prototype.transformPointsWithValues = function (xValues, yValues) {\n    var a11 = this.a11;\n    var a12 = this.a12;\n    var a13 = this.a13;\n    var a21 = this.a21;\n    var a22 = this.a22;\n    var a23 = this.a23;\n    var a31 = this.a31;\n    var a32 = this.a32;\n    var a33 = this.a33;\n    var n = xValues.length;\n\n    for (var i = 0; i < n; i++) {\n      var x = xValues[i];\n      var y = yValues[i];\n      var denominator = a13 * x + a23 * y + a33;\n      xValues[i] = (a11 * x + a21 * y + a31) / denominator;\n      yValues[i] = (a12 * x + a22 * y + a32) / denominator;\n    }\n  };\n\n  PerspectiveTransform.squareToQuadrilateral = function (x0\n  /*float*/\n  , y0\n  /*float*/\n  , x1\n  /*float*/\n  , y1\n  /*float*/\n  , x2\n  /*float*/\n  , y2\n  /*float*/\n  , x3\n  /*float*/\n  , y3\n  /*float*/\n  ) {\n    var dx3 = x0 - x1 + x2 - x3;\n    var dy3 = y0 - y1 + y2 - y3;\n\n    if (dx3 === 0.0 && dy3 === 0.0) {\n      // Affine\n      return new PerspectiveTransform(x1 - x0, x2 - x1, x0, y1 - y0, y2 - y1, y0, 0.0, 0.0, 1.0);\n    } else {\n      var dx1 = x1 - x2;\n      var dx2 = x3 - x2;\n      var dy1 = y1 - y2;\n      var dy2 = y3 - y2;\n      var denominator = dx1 * dy2 - dx2 * dy1;\n      var a13 = (dx3 * dy2 - dx2 * dy3) / denominator;\n      var a23 = (dx1 * dy3 - dx3 * dy1) / denominator;\n      return new PerspectiveTransform(x1 - x0 + a13 * x1, x3 - x0 + a23 * x3, x0, y1 - y0 + a13 * y1, y3 - y0 + a23 * y3, y0, a13, a23, 1.0);\n    }\n  };\n\n  PerspectiveTransform.quadrilateralToSquare = function (x0\n  /*float*/\n  , y0\n  /*float*/\n  , x1\n  /*float*/\n  , y1\n  /*float*/\n  , x2\n  /*float*/\n  , y2\n  /*float*/\n  , x3\n  /*float*/\n  , y3\n  /*float*/\n  ) {\n    // Here, the adjoint serves as the inverse:\n    return PerspectiveTransform.squareToQuadrilateral(x0, y0, x1, y1, x2, y2, x3, y3).buildAdjoint();\n  };\n\n  PerspectiveTransform.prototype.buildAdjoint = function () {\n    // Adjoint is the transpose of the cofactor matrix:\n    return new PerspectiveTransform(this.a22 * this.a33 - this.a23 * this.a32, this.a23 * this.a31 - this.a21 * this.a33, this.a21 * this.a32 - this.a22 * this.a31, this.a13 * this.a32 - this.a12 * this.a33, this.a11 * this.a33 - this.a13 * this.a31, this.a12 * this.a31 - this.a11 * this.a32, this.a12 * this.a23 - this.a13 * this.a22, this.a13 * this.a21 - this.a11 * this.a23, this.a11 * this.a22 - this.a12 * this.a21);\n  };\n\n  PerspectiveTransform.prototype.times = function (other) {\n    return new PerspectiveTransform(this.a11 * other.a11 + this.a21 * other.a12 + this.a31 * other.a13, this.a11 * other.a21 + this.a21 * other.a22 + this.a31 * other.a23, this.a11 * other.a31 + this.a21 * other.a32 + this.a31 * other.a33, this.a12 * other.a11 + this.a22 * other.a12 + this.a32 * other.a13, this.a12 * other.a21 + this.a22 * other.a22 + this.a32 * other.a23, this.a12 * other.a31 + this.a22 * other.a32 + this.a32 * other.a33, this.a13 * other.a11 + this.a23 * other.a12 + this.a33 * other.a13, this.a13 * other.a21 + this.a23 * other.a22 + this.a33 * other.a23, this.a13 * other.a31 + this.a23 * other.a32 + this.a33 * other.a33);\n  };\n\n  return PerspectiveTransform;\n}();\n\nexports.default = PerspectiveTransform;","map":{"version":3,"sources":["../../../src/core/common/PerspectiveTransform.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/*\n * Copyright 2007 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/*namespace com.google.zxing.common {*/\n/**\n * <p>This class implements a perspective transform in two dimensions. Given four source and four\n * destination points, it will compute the transformation implied between them. The code is based\n * directly upon section 3.4.2 of George Wolberg's \"Digital Image Warping\"; see pages 54-56.</p>\n *\n * @author Sean Owen\n */\nvar PerspectiveTransform = /** @class */ (function () {\n    function PerspectiveTransform(a11 /*float*/, a21 /*float*/, a31 /*float*/, a12 /*float*/, a22 /*float*/, a32 /*float*/, a13 /*float*/, a23 /*float*/, a33 /*float*/) {\n        this.a11 = a11;\n        this.a21 = a21;\n        this.a31 = a31;\n        this.a12 = a12;\n        this.a22 = a22;\n        this.a32 = a32;\n        this.a13 = a13;\n        this.a23 = a23;\n        this.a33 = a33;\n    }\n    PerspectiveTransform.quadrilateralToQuadrilateral = function (x0 /*float*/, y0 /*float*/, x1 /*float*/, y1 /*float*/, x2 /*float*/, y2 /*float*/, x3 /*float*/, y3 /*float*/, x0p /*float*/, y0p /*float*/, x1p /*float*/, y1p /*float*/, x2p /*float*/, y2p /*float*/, x3p /*float*/, y3p /*float*/) {\n        var qToS = PerspectiveTransform.quadrilateralToSquare(x0, y0, x1, y1, x2, y2, x3, y3);\n        var sToQ = PerspectiveTransform.squareToQuadrilateral(x0p, y0p, x1p, y1p, x2p, y2p, x3p, y3p);\n        return sToQ.times(qToS);\n    };\n    PerspectiveTransform.prototype.transformPoints = function (points) {\n        var max = points.length;\n        var a11 = this.a11;\n        var a12 = this.a12;\n        var a13 = this.a13;\n        var a21 = this.a21;\n        var a22 = this.a22;\n        var a23 = this.a23;\n        var a31 = this.a31;\n        var a32 = this.a32;\n        var a33 = this.a33;\n        for (var i = 0; i < max; i += 2) {\n            var x = points[i];\n            var y = points[i + 1];\n            var denominator = a13 * x + a23 * y + a33;\n            points[i] = (a11 * x + a21 * y + a31) / denominator;\n            points[i + 1] = (a12 * x + a22 * y + a32) / denominator;\n        }\n    };\n    PerspectiveTransform.prototype.transformPointsWithValues = function (xValues, yValues) {\n        var a11 = this.a11;\n        var a12 = this.a12;\n        var a13 = this.a13;\n        var a21 = this.a21;\n        var a22 = this.a22;\n        var a23 = this.a23;\n        var a31 = this.a31;\n        var a32 = this.a32;\n        var a33 = this.a33;\n        var n = xValues.length;\n        for (var i = 0; i < n; i++) {\n            var x = xValues[i];\n            var y = yValues[i];\n            var denominator = a13 * x + a23 * y + a33;\n            xValues[i] = (a11 * x + a21 * y + a31) / denominator;\n            yValues[i] = (a12 * x + a22 * y + a32) / denominator;\n        }\n    };\n    PerspectiveTransform.squareToQuadrilateral = function (x0 /*float*/, y0 /*float*/, x1 /*float*/, y1 /*float*/, x2 /*float*/, y2 /*float*/, x3 /*float*/, y3 /*float*/) {\n        var dx3 = x0 - x1 + x2 - x3;\n        var dy3 = y0 - y1 + y2 - y3;\n        if (dx3 === 0.0 && dy3 === 0.0) {\n            // Affine\n            return new PerspectiveTransform(x1 - x0, x2 - x1, x0, y1 - y0, y2 - y1, y0, 0.0, 0.0, 1.0);\n        }\n        else {\n            var dx1 = x1 - x2;\n            var dx2 = x3 - x2;\n            var dy1 = y1 - y2;\n            var dy2 = y3 - y2;\n            var denominator = dx1 * dy2 - dx2 * dy1;\n            var a13 = (dx3 * dy2 - dx2 * dy3) / denominator;\n            var a23 = (dx1 * dy3 - dx3 * dy1) / denominator;\n            return new PerspectiveTransform(x1 - x0 + a13 * x1, x3 - x0 + a23 * x3, x0, y1 - y0 + a13 * y1, y3 - y0 + a23 * y3, y0, a13, a23, 1.0);\n        }\n    };\n    PerspectiveTransform.quadrilateralToSquare = function (x0 /*float*/, y0 /*float*/, x1 /*float*/, y1 /*float*/, x2 /*float*/, y2 /*float*/, x3 /*float*/, y3 /*float*/) {\n        // Here, the adjoint serves as the inverse:\n        return PerspectiveTransform.squareToQuadrilateral(x0, y0, x1, y1, x2, y2, x3, y3).buildAdjoint();\n    };\n    PerspectiveTransform.prototype.buildAdjoint = function () {\n        // Adjoint is the transpose of the cofactor matrix:\n        return new PerspectiveTransform(this.a22 * this.a33 - this.a23 * this.a32, this.a23 * this.a31 - this.a21 * this.a33, this.a21 * this.a32 - this.a22 * this.a31, this.a13 * this.a32 - this.a12 * this.a33, this.a11 * this.a33 - this.a13 * this.a31, this.a12 * this.a31 - this.a11 * this.a32, this.a12 * this.a23 - this.a13 * this.a22, this.a13 * this.a21 - this.a11 * this.a23, this.a11 * this.a22 - this.a12 * this.a21);\n    };\n    PerspectiveTransform.prototype.times = function (other) {\n        return new PerspectiveTransform(this.a11 * other.a11 + this.a21 * other.a12 + this.a31 * other.a13, this.a11 * other.a21 + this.a21 * other.a22 + this.a31 * other.a23, this.a11 * other.a31 + this.a21 * other.a32 + this.a31 * other.a33, this.a12 * other.a11 + this.a22 * other.a12 + this.a32 * other.a13, this.a12 * other.a21 + this.a22 * other.a22 + this.a32 * other.a23, this.a12 * other.a31 + this.a22 * other.a32 + this.a32 * other.a33, this.a13 * other.a11 + this.a23 * other.a12 + this.a33 * other.a13, this.a13 * other.a21 + this.a23 * other.a22 + this.a33 * other.a23, this.a13 * other.a31 + this.a23 * other.a32 + this.a33 * other.a33);\n    };\n    return PerspectiveTransform;\n}());\nexports.default = PerspectiveTransform;\n//# sourceMappingURL=PerspectiveTransform.js.map"]},"metadata":{},"sourceType":"script"}